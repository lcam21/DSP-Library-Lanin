
build/DSP-Library.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4825      	ldr	r0, [pc, #148]	; (8000258 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 f83d 	bl	8001250 <__core_init>
 80001d6:	f008 fd4b 	bl	8008c70 <__early_init>
 80001da:	4820      	ldr	r0, [pc, #128]	; (800025c <endfiniloop+0x8>)
 80001dc:	4920      	ldr	r1, [pc, #128]	; (8000260 <endfiniloop+0xc>)
 80001de:	4a21      	ldr	r2, [pc, #132]	; (8000264 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	f7ff bffa 	bcc.w	80001e0 <msloop>
 80001ec:	491e      	ldr	r1, [pc, #120]	; (8000268 <endfiniloop+0x14>)
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x4>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	f7ff bffa 	bcc.w	80001f0 <psloop>
 80001fc:	491b      	ldr	r1, [pc, #108]	; (800026c <endfiniloop+0x18>)
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <endfiniloop+0x1c>)
 8000200:	4b1c      	ldr	r3, [pc, #112]	; (8000274 <endfiniloop+0x20>)

08000202 <dloop>:
 8000202:	429a      	cmp	r2, r3
 8000204:	bf3e      	ittt	cc
 8000206:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800020a:	f842 0b04 	strcc.w	r0, [r2], #4
 800020e:	f7ff bff8 	bcc.w	8000202 <dloop>
 8000212:	2000      	movs	r0, #0
 8000214:	4918      	ldr	r1, [pc, #96]	; (8000278 <endfiniloop+0x24>)
 8000216:	4a19      	ldr	r2, [pc, #100]	; (800027c <endfiniloop+0x28>)

08000218 <bloop>:
 8000218:	4291      	cmp	r1, r2
 800021a:	bf3c      	itt	cc
 800021c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000220:	f7ff bffa 	bcc.w	8000218 <bloop>
 8000224:	f001 f81c 	bl	8001260 <__late_init>
 8000228:	4c15      	ldr	r4, [pc, #84]	; (8000280 <endfiniloop+0x2c>)
 800022a:	4d16      	ldr	r5, [pc, #88]	; (8000284 <endfiniloop+0x30>)

0800022c <initloop>:
 800022c:	42ac      	cmp	r4, r5
 800022e:	f280 8005 	bge.w	800023c <endinitloop>
 8000232:	f854 1b04 	ldr.w	r1, [r4], #4
 8000236:	4788      	blx	r1
 8000238:	f7ff bff8 	b.w	800022c <initloop>

0800023c <endinitloop>:
 800023c:	f008 fe08 	bl	8008e50 <main>
 8000240:	4c11      	ldr	r4, [pc, #68]	; (8000288 <endfiniloop+0x34>)
 8000242:	4d12      	ldr	r5, [pc, #72]	; (800028c <endfiniloop+0x38>)

08000244 <finiloop>:
 8000244:	42ac      	cmp	r4, r5
 8000246:	f280 8005 	bge.w	8000254 <endfiniloop>
 800024a:	f854 1b04 	ldr.w	r1, [r4], #4
 800024e:	4788      	blx	r1
 8000250:	f7ff bff8 	b.w	8000244 <finiloop>

08000254 <endfiniloop>:
 8000254:	f001 b80c 	b.w	8001270 <__default_exit>
 8000258:	20000800 	.word	0x20000800
 800025c:	55555555 	.word	0x55555555
 8000260:	20000000 	.word	0x20000000
 8000264:	20000400 	.word	0x20000400
 8000268:	20000400 	.word	0x20000400
 800026c:	08009be0 	.word	0x08009be0
 8000270:	20000800 	.word	0x20000800
 8000274:	20000800 	.word	0x20000800
 8000278:	20000800 	.word	0x20000800
 800027c:	20007c30 	.word	0x20007c30
 8000280:	080001c0 	.word	0x080001c0
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	f001 faee 	bl	8001880 <_dbg_check_unlock>
 80002a4:	f002 fc44 	bl	8002b30 <_stats_stop_measure_crit_thd>
 80002a8:	2300      	movs	r3, #0
 80002aa:	f383 8811 	msr	BASEPRI, r3
 80002ae:	4628      	mov	r0, r5
 80002b0:	47a0      	blx	r4
 80002b2:	2000      	movs	r0, #0
 80002b4:	f002 fa2c 	bl	8002710 <chThdExit>

080002b8 <_port_switch_from_isr>:
 80002b8:	f002 fc32 	bl	8002b20 <_stats_start_measure_crit_thd>
 80002bc:	f001 fac8 	bl	8001850 <_dbg_check_lock>
 80002c0:	f001 fffe 	bl	80022c0 <chSchDoReschedule>
 80002c4:	f001 fadc 	bl	8001880 <_dbg_check_unlock>
 80002c8:	f002 fc32 	bl	8002b30 <_stats_stop_measure_crit_thd>

080002cc <_port_exit_from_isr>:
 80002cc:	df00      	svc	0
 80002ce:	e7fe      	b.n	80002ce <_port_exit_from_isr+0x2>

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f092 0f00 	teq	r2, #0
 80005ba:	bf14      	ite	ne
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e720      	b.n	8000414 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aedc 	beq.w	80003c2 <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6c1      	b.n	80003c2 <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>
	...

08000a70 <__aeabi_d2iz>:
 8000a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d215      	bcs.n	8000aa6 <__aeabi_d2iz+0x36>
 8000a7a:	d511      	bpl.n	8000aa0 <__aeabi_d2iz+0x30>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d912      	bls.n	8000aac <__aeabi_d2iz+0x3c>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	bf18      	it	ne
 8000a9c:	4240      	negne	r0, r0
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d105      	bne.n	8000ab8 <__aeabi_d2iz+0x48>
 8000aac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	bf08      	it	eq
 8000ab2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	d1ed      	bne.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop
 800110c:	0000      	movs	r0, r0
	...

08001110 <memcpy>:
 8001110:	4684      	mov	ip, r0
 8001112:	ea41 0300 	orr.w	r3, r1, r0
 8001116:	f013 0303 	ands.w	r3, r3, #3
 800111a:	d16d      	bne.n	80011f8 <memcpy+0xe8>
 800111c:	3a40      	subs	r2, #64	; 0x40
 800111e:	d341      	bcc.n	80011a4 <memcpy+0x94>
 8001120:	f851 3b04 	ldr.w	r3, [r1], #4
 8001124:	f840 3b04 	str.w	r3, [r0], #4
 8001128:	f851 3b04 	ldr.w	r3, [r1], #4
 800112c:	f840 3b04 	str.w	r3, [r0], #4
 8001130:	f851 3b04 	ldr.w	r3, [r1], #4
 8001134:	f840 3b04 	str.w	r3, [r0], #4
 8001138:	f851 3b04 	ldr.w	r3, [r1], #4
 800113c:	f840 3b04 	str.w	r3, [r0], #4
 8001140:	f851 3b04 	ldr.w	r3, [r1], #4
 8001144:	f840 3b04 	str.w	r3, [r0], #4
 8001148:	f851 3b04 	ldr.w	r3, [r1], #4
 800114c:	f840 3b04 	str.w	r3, [r0], #4
 8001150:	f851 3b04 	ldr.w	r3, [r1], #4
 8001154:	f840 3b04 	str.w	r3, [r0], #4
 8001158:	f851 3b04 	ldr.w	r3, [r1], #4
 800115c:	f840 3b04 	str.w	r3, [r0], #4
 8001160:	f851 3b04 	ldr.w	r3, [r1], #4
 8001164:	f840 3b04 	str.w	r3, [r0], #4
 8001168:	f851 3b04 	ldr.w	r3, [r1], #4
 800116c:	f840 3b04 	str.w	r3, [r0], #4
 8001170:	f851 3b04 	ldr.w	r3, [r1], #4
 8001174:	f840 3b04 	str.w	r3, [r0], #4
 8001178:	f851 3b04 	ldr.w	r3, [r1], #4
 800117c:	f840 3b04 	str.w	r3, [r0], #4
 8001180:	f851 3b04 	ldr.w	r3, [r1], #4
 8001184:	f840 3b04 	str.w	r3, [r0], #4
 8001188:	f851 3b04 	ldr.w	r3, [r1], #4
 800118c:	f840 3b04 	str.w	r3, [r0], #4
 8001190:	f851 3b04 	ldr.w	r3, [r1], #4
 8001194:	f840 3b04 	str.w	r3, [r0], #4
 8001198:	f851 3b04 	ldr.w	r3, [r1], #4
 800119c:	f840 3b04 	str.w	r3, [r0], #4
 80011a0:	3a40      	subs	r2, #64	; 0x40
 80011a2:	d2bd      	bcs.n	8001120 <memcpy+0x10>
 80011a4:	3230      	adds	r2, #48	; 0x30
 80011a6:	d311      	bcc.n	80011cc <memcpy+0xbc>
 80011a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011ac:	f840 3b04 	str.w	r3, [r0], #4
 80011b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011b4:	f840 3b04 	str.w	r3, [r0], #4
 80011b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011bc:	f840 3b04 	str.w	r3, [r0], #4
 80011c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011c4:	f840 3b04 	str.w	r3, [r0], #4
 80011c8:	3a10      	subs	r2, #16
 80011ca:	d2ed      	bcs.n	80011a8 <memcpy+0x98>
 80011cc:	320c      	adds	r2, #12
 80011ce:	d305      	bcc.n	80011dc <memcpy+0xcc>
 80011d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011d4:	f840 3b04 	str.w	r3, [r0], #4
 80011d8:	3a04      	subs	r2, #4
 80011da:	d2f9      	bcs.n	80011d0 <memcpy+0xc0>
 80011dc:	3204      	adds	r2, #4
 80011de:	d008      	beq.n	80011f2 <memcpy+0xe2>
 80011e0:	07d2      	lsls	r2, r2, #31
 80011e2:	bf1c      	itt	ne
 80011e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80011e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80011ec:	d301      	bcc.n	80011f2 <memcpy+0xe2>
 80011ee:	880b      	ldrh	r3, [r1, #0]
 80011f0:	8003      	strh	r3, [r0, #0]
 80011f2:	4660      	mov	r0, ip
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2a08      	cmp	r2, #8
 80011fa:	d313      	bcc.n	8001224 <memcpy+0x114>
 80011fc:	078b      	lsls	r3, r1, #30
 80011fe:	d08d      	beq.n	800111c <memcpy+0xc>
 8001200:	f010 0303 	ands.w	r3, r0, #3
 8001204:	d08a      	beq.n	800111c <memcpy+0xc>
 8001206:	f1c3 0304 	rsb	r3, r3, #4
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	07db      	lsls	r3, r3, #31
 800120e:	bf1c      	itt	ne
 8001210:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001214:	f800 3b01 	strbne.w	r3, [r0], #1
 8001218:	d380      	bcc.n	800111c <memcpy+0xc>
 800121a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800121e:	f820 3b02 	strh.w	r3, [r0], #2
 8001222:	e77b      	b.n	800111c <memcpy+0xc>
 8001224:	3a04      	subs	r2, #4
 8001226:	d3d9      	bcc.n	80011dc <memcpy+0xcc>
 8001228:	3a01      	subs	r2, #1
 800122a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800122e:	f800 3b01 	strb.w	r3, [r0], #1
 8001232:	d2f9      	bcs.n	8001228 <memcpy+0x118>
 8001234:	780b      	ldrb	r3, [r1, #0]
 8001236:	7003      	strb	r3, [r0, #0]
 8001238:	784b      	ldrb	r3, [r1, #1]
 800123a:	7043      	strb	r3, [r0, #1]
 800123c:	788b      	ldrb	r3, [r1, #2]
 800123e:	7083      	strb	r3, [r0, #2]
 8001240:	4660      	mov	r0, ip
 8001242:	4770      	bx	lr
	...

08001250 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	f3af 8000 	nop.w

08001260 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	f3af 8000 	nop.w

08001270 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
/*lint -restore*/

  while (true) {
  }
 8001274:	e7fe      	b.n	8001274 <__default_exit+0x4>
 8001276:	bf00      	nop
 8001278:	f3af 8000 	nop.w
 800127c:	f3af 8000 	nop.w

08001280 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
/*lint -restore*/

  while (true) {
  }
 8001284:	e7fe      	b.n	8001284 <_unhandled_exception+0x4>
 8001286:	bf00      	nop
 8001288:	f3af 8000 	nop.w
 800128c:	f3af 8000 	nop.w

08001290 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	60da      	str	r2, [r3, #12]
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	f3af 8000 	nop.w
 80012dc:	f3af 8000 	nop.w

080012e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da0b      	bge.n	800130c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80012f4:	490d      	ldr	r1, [pc, #52]	; (800132c <NVIC_SetPriority+0x4c>)
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	3b04      	subs	r3, #4
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	761a      	strb	r2, [r3, #24]
 800130a:	e009      	b.n	8001320 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800130c:	4908      	ldr	r1, [pc, #32]	; (8001330 <NVIC_SetPriority+0x50>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e000e100 	.word	0xe000e100
 8001334:	f3af 8000 	nop.w
 8001338:	f3af 8000 	nop.w
 800133c:	f3af 8000 	nop.w

08001340 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <port_init+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 800134a:	2003      	movs	r0, #3
 800134c:	f7ff ffa0 	bl	8001290 <NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <port_init+0x44>)
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <port_init+0x44>)
 8001354:	68d2      	ldr	r2, [r2, #12]
 8001356:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800135a:	60da      	str	r2, [r3, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <port_init+0x48>)
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <port_init+0x48>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8001368:	f06f 0004 	mvn.w	r0, #4
 800136c:	2101      	movs	r1, #1
 800136e:	f7ff ffb7 	bl	80012e0 <NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8001372:	f06f 0001 	mvn.w	r0, #1
 8001376:	2102      	movs	r1, #2
 8001378:	f7ff ffb2 	bl	80012e0 <NVIC_SetPriority>
}
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	e000edf0 	.word	0xe000edf0
 8001388:	e0001000 	.word	0xe0001000
 800138c:	f3af 8000 	nop.w

08001390 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	2320      	movs	r3, #32
 8001398:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w

080013b0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w

080013d0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  port_lock();
 80013d4:	f7ff ffdc 	bl	8001390 <port_lock>
}
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w

080013e0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  port_unlock();
 80013e4:	f7ff ffe4 	bl	80013b0 <port_unlock>
}
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w

080013f0 <port_disable>:
/**
 * @brief   Disables all the interrupt sources.
 * @note    In this port it disables all the interrupt sources by raising
 *          the priority mask to level 0.
 */
static inline void port_disable(void) {
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i

  __disable_irq();
}
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001410:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	f3af 8000 	nop.w

08001420 <port_wait_for_interrupt>:
 *          The simplest implementation is an empty function or macro but this
 *          would not take advantage of architecture-specific power saving
 *          modes.
 * @note    Implemented as an inlined @p WFI instruction.
 */
static inline void port_wait_for_interrupt(void) {
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	f3af 8000 	nop.w

08001430 <port_rt_get_counter_value>:
/**
 * @brief   Returns the current value of the realtime counter.
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  return DWT->CYCCNT;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <port_rt_get_counter_value+0x14>)
 8001436:	685b      	ldr	r3, [r3, #4]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e0001000 	.word	0xe0001000
 8001448:	f3af 8000 	nop.w
 800144c:	f3af 8000 	nop.w

08001450 <st_lld_get_counter>:
 *
 * @return              The counter value.
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  return (systime_t)STM32_ST_TIM->CNT;
 8001454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	f3af 8000 	nop.w
 8001468:	f3af 8000 	nop.w
 800146c:	f3af 8000 	nop.w

08001470 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  stStopAlarm();
 8001474:	f003 fc84 	bl	8004d80 <stStopAlarm>
}
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w

08001480 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  stSetAlarm(time);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f003 fc81 	bl	8004d90 <stSetAlarm>
}
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	f3af 8000 	nop.w
 800149c:	f3af 8000 	nop.w

080014a0 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  return stGetCounter();
 80014a4:	f7ff ffd4 	bl	8001450 <st_lld_get_counter>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop

080014b0 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  _dbg_check_enable();
 80014b4:	f000 f9b4 	bl	8001820 <_dbg_check_enable>
  port_enable();
 80014b8:	f7ff ffa2 	bl	8001400 <port_enable>
}
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop

080014c0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 80014c4:	f7ff ff84 	bl	80013d0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 80014c8:	f001 fb3a 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80014cc:	f000 f9f0 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	f3af 8000 	nop.w
 80014dc:	f3af 8000 	nop.w

080014e0 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 80014e4:	f000 f9fc 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 80014e8:	f001 fb32 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 80014ec:	f7ff ff78 	bl	80013e0 <port_unlock_from_isr>
}
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	f3af 8000 	nop.w
 80014fc:	f3af 8000 	nop.w

08001500 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001504:	f7ff ffcc 	bl	80014a0 <port_timer_get_time>
 8001508:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop

08001510 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  chDbgCheckClassI();
 8001516:	f000 fa3b 	bl	8001990 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <chVTDoTickI+0xd8>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	60fb      	str	r3, [r7, #12]
  now = chVTGetSystemTimeX();
 8001520:	f7ff ffee 	bl	8001500 <chVTGetSystemTimeX>
 8001524:	60b8      	str	r0, [r7, #8]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001526:	e02a      	b.n	800157e <chVTDoTickI+0x6e>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <chVTDoTickI+0xd8>)
 800152a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	441a      	add	r2, r3
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <chVTDoTickI+0xd8>)
 8001534:	629a      	str	r2, [r3, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <chVTDoTickI+0xdc>)
 800153c:	605a      	str	r2, [r3, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <chVTDoTickI+0xd8>)
 8001544:	61da      	str	r2, [r3, #28]
    fn = vtp->vt_func;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	603b      	str	r3, [r7, #0]
    vtp->vt_func = NULL;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <chVTDoTickI+0xd8>)
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <chVTDoTickI+0xdc>)
 8001558:	429a      	cmp	r2, r3
 800155a:	d101      	bne.n	8001560 <chVTDoTickI+0x50>
      port_timer_stop_alarm();
 800155c:	f7ff ff88 	bl	8001470 <port_timer_stop_alarm>
    }

    /* Leaving the system critical zone in order to execute the callback
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();
 8001560:	f7ff ffbe 	bl	80014e0 <chSysUnlockFromISR>

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4610      	mov	r0, r2
 800156c:	4798      	blx	r3

    /* Re-entering the critical zone in order to continue the exploration
       of the list.*/
    chSysLockFromISR();
 800156e:	f7ff ffa7 	bl	80014c0 <chSysLockFromISR>

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <chVTDoTickI+0xd8>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	60fb      	str	r3, [r7, #12]
    now = chVTGetSystemTimeX();
 8001578:	f7ff ffc2 	bl	8001500 <chVTGetSystemTimeX>
 800157c:	60b8      	str	r0, [r7, #8]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <chVTDoTickI+0xd8>)
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	1acb      	subs	r3, r1, r3
 800158a:	429a      	cmp	r2, r3
 800158c:	d9cc      	bls.n	8001528 <chVTDoTickI+0x18>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <chVTDoTickI+0xd8>)
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <chVTDoTickI+0xdc>)
 8001594:	429a      	cmp	r2, r3
 8001596:	d100      	bne.n	800159a <chVTDoTickI+0x8a>
    return;
 8001598:	e023      	b.n	80015e2 <chVTDoTickI+0xd2>
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <chVTDoTickI+0xd8>)
 800159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	441a      	add	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	607b      	str	r3, [r7, #4]
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d801      	bhi.n	80015b4 <chVTDoTickI+0xa4>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80015b0:	2302      	movs	r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
  }
  port_timer_set_alarm(now + delta);
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff60 	bl	8001480 <port_timer_set_alarm>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 80015c0:	f7ff ff9e 	bl	8001500 <chVTGetSystemTimeX>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <chVTDoTickI+0xd8>)
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4419      	add	r1, r3
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <chVTDoTickI+0xd8>)
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	1acb      	subs	r3, r1, r3
 80015d8:	429a      	cmp	r2, r3
 80015da:	d902      	bls.n	80015e2 <chVTDoTickI+0xd2>
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <chVTDoTickI+0xe0>)
 80015de:	f000 f87f 	bl	80016e0 <chSysHalt>
              (now + delta - ch.vtlist.vt_lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000800 	.word	0x20000800
 80015ec:	2000081c 	.word	0x2000081c
 80015f0:	08009520 	.word	0x08009520
 80015f4:	f3af 8000 	nop.w
 80015f8:	f3af 8000 	nop.w
 80015fc:	f3af 8000 	nop.w

08001600 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <chRegSetThreadName+0x1c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000800 	.word	0x20000800

08001620 <chRegSetThreadNameX>:
 * @param[in] tp        pointer to the thread
 * @param[in] name      thread name as a zero terminated string
 *
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	619a      	str	r2, [r3, #24]
#else
  (void)tp;
  (void)name;
#endif
}
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w

08001640 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8001648:	f7ff feea 	bl	8001420 <port_wait_for_interrupt>
    /*lint -restore*/
    CH_CFG_IDLE_LOOP_HOOK();
  }
 800164c:	e7fc      	b.n	8001648 <_idle_thread+0x8>
 800164e:	bf00      	nop

08001650 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af02      	add	r7, sp, #8
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
 8001656:	f7ff fe73 	bl	8001340 <port_init>
  _scheduler_init();
 800165a:	f000 fc51 	bl	8001f00 <_scheduler_init>
  _vt_init();
 800165e:	f000 fa57 	bl	8001b10 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8001662:	f001 f995 	bl	8002990 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8001666:	f002 f823 	bl	80036b0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800166a:	f002 f889 	bl	8003780 <_heap_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
 800166e:	f001 fa0f 	bl	8002a90 <_stats_init>
#endif
#if CH_DBG_ENABLE_TRACE == TRUE
  _dbg_trace_init();
 8001672:	f000 f9bd 	bl	80019f0 <_dbg_trace_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <chSysInit+0x74>)
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	f000 ff61 	bl	8002540 <_thread_init>
 800167e:	4602      	mov	r2, r0
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <chSysInit+0x78>)
 8001682:	619a      	str	r2, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <chSysInit+0x78>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <chSysInit+0x78>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <chSysInit+0x7c>)
 8001694:	61da      	str	r2, [r3, #28]
#endif
  chSysEnable();
 8001696:	f7ff ff0b 	bl	80014b0 <chSysEnable>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Note, &ch_debug points to the string "main" if the registry is
     active.*/
  chRegSetThreadName((const char *)&ch_debug);
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <chSysInit+0x80>)
 800169c:	f7ff ffb0 	bl	8001600 <chRegSetThreadName>
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <chSysInit+0x84>)
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	2201      	movs	r2, #1
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <chSysInit+0x88>)
 80016ae:	f000 ffef 	bl	8002690 <chThdCreateStatic>
 80016b2:	6078      	str	r0, [r7, #4]
                                      sizeof(ch.idle_thread_wa),
                                      IDLEPRIO,
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4909      	ldr	r1, [pc, #36]	; (80016dc <chSysInit+0x8c>)
 80016b8:	f7ff ffb2 	bl	8001620 <chRegSetThreadNameX>
  }
#endif
}
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000c40 	.word	0x20000c40
 80016c8:	20000800 	.word	0x20000800
 80016cc:	20000400 	.word	0x20000400
 80016d0:	080095e0 	.word	0x080095e0
 80016d4:	20000ce8 	.word	0x20000ce8
 80016d8:	08001641 	.word	0x08001641
 80016dc:	08009400 	.word	0x08009400

080016e0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  port_disable();
 80016e8:	f7ff fe82 	bl	80013f0 <port_disable>
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <chSysHalt+0x14>)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Harmless infinite loop.*/
  while (true) {
  }
 80016f2:	e7fe      	b.n	80016f2 <chSysHalt+0x12>
 80016f4:	20000800 	.word	0x20000800
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  chDbgCheckClassI();
 8001704:	f000 f944 	bl	8001990 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
#endif
  chVTDoTickI();
 8001708:	f7ff ff02 	bl	8001510 <chVTDoTickI>
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop

08001710 <chSysIsCounterWithinX>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]

  return (bool)((cnt - start) < (end - start));
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1acb      	subs	r3, r1, r3
 8001728:	429a      	cmp	r2, r3
 800172a:	bf2c      	ite	cs
 800172c:	2300      	movcs	r3, #0
 800172e:	2301      	movcc	r3, #1
 8001730:	b2db      	uxtb	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
 8001748:	f7ff fe72 	bl	8001430 <port_rt_get_counter_value>
 800174c:	60f8      	str	r0, [r7, #12]
  rtcnt_t end  = start + cycles;
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8001756:	bf00      	nop
 8001758:	f7ff fe6a 	bl	8001430 <port_rt_get_counter_value>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f7ff ffd4 	bl	8001710 <chSysIsCounterWithinX>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f4      	bne.n	8001758 <chSysPolledDelayX+0x18>
  }
}
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f3af 8000 	nop.w
 8001778:	f3af 8000 	nop.w
 800177c:	f3af 8000 	nop.w

08001780 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	2320      	movs	r3, #32
 8001788:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w

080017a0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w

080017c0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  port_lock();
 80017c4:	f7ff ffdc 	bl	8001780 <port_lock>
}
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w

080017d0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  port_unlock();
 80017d4:	f7ff ffe4 	bl	80017a0 <port_unlock>
}
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w

080017e0 <st_lld_get_counter>:
 *
 * @return              The counter value.
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  return (systime_t)STM32_ST_TIM->CNT;
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	f3af 8000 	nop.w
 80017f8:	f3af 8000 	nop.w
 80017fc:	f3af 8000 	nop.w

08001800 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  return stGetCounter();
 8001804:	f7ff ffec 	bl	80017e0 <st_lld_get_counter>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop

08001810 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001814:	f7ff fff4 	bl	8001800 <port_timer_get_time>
 8001818:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop

08001820 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <_dbg_check_enable+0x1c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <_dbg_check_enable+0x14>
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <_dbg_check_enable+0x1c>)
 800182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <_dbg_check_enable+0x1a>
    chSysHalt("SV#3");
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <_dbg_check_enable+0x20>)
 8001836:	f7ff ff53 	bl	80016e0 <chSysHalt>
  }
}
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000800 	.word	0x20000800
 8001840:	08009420 	.word	0x08009420
 8001844:	f3af 8000 	nop.w
 8001848:	f3af 8000 	nop.w
 800184c:	f3af 8000 	nop.w

08001850 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_dbg_check_lock+0x24>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <_dbg_check_lock+0x14>
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_dbg_check_lock+0x24>)
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <_dbg_check_lock+0x1a>
    chSysHalt("SV#4");
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <_dbg_check_lock+0x28>)
 8001866:	f7ff ff3b 	bl	80016e0 <chSysHalt>
  }
  _dbg_enter_lock();
 800186a:	4b02      	ldr	r3, [pc, #8]	; (8001874 <_dbg_check_lock+0x24>)
 800186c:	2201      	movs	r2, #1
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000800 	.word	0x20000800
 8001878:	08009428 	.word	0x08009428
 800187c:	f3af 8000 	nop.w

08001880 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_dbg_check_unlock+0x24>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <_dbg_check_unlock+0x14>
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <_dbg_check_unlock+0x24>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	2b00      	cmp	r3, #0
 8001892:	dc02      	bgt.n	800189a <_dbg_check_unlock+0x1a>
    chSysHalt("SV#5");
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <_dbg_check_unlock+0x28>)
 8001896:	f7ff ff23 	bl	80016e0 <chSysHalt>
  }
  _dbg_leave_lock();
 800189a:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <_dbg_check_unlock+0x24>)
 800189c:	2200      	movs	r2, #0
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000800 	.word	0x20000800
 80018a8:	08009430 	.word	0x08009430
 80018ac:	f3af 8000 	nop.w

080018b0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_dbg_check_lock_from_isr+0x24>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dd03      	ble.n	80018c4 <_dbg_check_lock_from_isr+0x14>
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <_dbg_check_lock_from_isr+0x24>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <_dbg_check_lock_from_isr+0x1a>
    chSysHalt("SV#6");
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <_dbg_check_lock_from_isr+0x28>)
 80018c6:	f7ff ff0b 	bl	80016e0 <chSysHalt>
  }
  _dbg_enter_lock();
 80018ca:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <_dbg_check_lock_from_isr+0x24>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000800 	.word	0x20000800
 80018d8:	08009438 	.word	0x08009438
 80018dc:	f3af 8000 	nop.w

080018e0 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_dbg_check_unlock_from_isr+0x24>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd03      	ble.n	80018f4 <_dbg_check_unlock_from_isr+0x14>
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <_dbg_check_unlock_from_isr+0x24>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	dc02      	bgt.n	80018fa <_dbg_check_unlock_from_isr+0x1a>
    chSysHalt("SV#7");
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <_dbg_check_unlock_from_isr+0x28>)
 80018f6:	f7ff fef3 	bl	80016e0 <chSysHalt>
  }
  _dbg_leave_lock();
 80018fa:	4b02      	ldr	r3, [pc, #8]	; (8001904 <_dbg_check_unlock_from_isr+0x24>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000800 	.word	0x20000800
 8001908:	08009440 	.word	0x08009440
 800190c:	f3af 8000 	nop.w

08001910 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8001914:	f7ff ff54 	bl	80017c0 <port_lock_from_isr>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <_dbg_check_enter_isr+0x30>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	2b00      	cmp	r3, #0
 800191e:	db03      	blt.n	8001928 <_dbg_check_enter_isr+0x18>
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_dbg_check_enter_isr+0x30>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <_dbg_check_enter_isr+0x1e>
    chSysHalt("SV#8");
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <_dbg_check_enter_isr+0x34>)
 800192a:	f7ff fed9 	bl	80016e0 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <_dbg_check_enter_isr+0x30>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <_dbg_check_enter_isr+0x30>)
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  port_unlock_from_isr();
 8001938:	f7ff ff4a 	bl	80017d0 <port_unlock_from_isr>
}
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000800 	.word	0x20000800
 8001944:	08009448 	.word	0x08009448
 8001948:	f3af 8000 	nop.w
 800194c:	f3af 8000 	nop.w

08001950 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8001954:	f7ff ff34 	bl	80017c0 <port_lock_from_isr>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <_dbg_check_leave_isr+0x30>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd03      	ble.n	8001968 <_dbg_check_leave_isr+0x18>
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_dbg_check_leave_isr+0x30>)
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <_dbg_check_leave_isr+0x1e>
    chSysHalt("SV#9");
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <_dbg_check_leave_isr+0x34>)
 800196a:	f7ff feb9 	bl	80016e0 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <_dbg_check_leave_isr+0x30>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <_dbg_check_leave_isr+0x30>)
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  port_unlock_from_isr();
 8001978:	f7ff ff2a 	bl	80017d0 <port_unlock_from_isr>
}
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000800 	.word	0x20000800
 8001984:	08009450 	.word	0x08009450
 8001988:	f3af 8000 	nop.w
 800198c:	f3af 8000 	nop.w

08001990 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <chDbgCheckClassI+0x1c>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	2b00      	cmp	r3, #0
 800199a:	db03      	blt.n	80019a4 <chDbgCheckClassI+0x14>
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <chDbgCheckClassI+0x1c>)
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dc02      	bgt.n	80019aa <chDbgCheckClassI+0x1a>
    chSysHalt("SV#10");
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <chDbgCheckClassI+0x20>)
 80019a6:	f7ff fe9b 	bl	80016e0 <chSysHalt>
  }
}
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000800 	.word	0x20000800
 80019b0:	08009458 	.word	0x08009458
 80019b4:	f3af 8000 	nop.w
 80019b8:	f3af 8000 	nop.w
 80019bc:	f3af 8000 	nop.w

080019c0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <chDbgCheckClassS+0x1c>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <chDbgCheckClassS+0x14>
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <chDbgCheckClassS+0x1c>)
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dc02      	bgt.n	80019da <chDbgCheckClassS+0x1a>
    chSysHalt("SV#11");
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <chDbgCheckClassS+0x20>)
 80019d6:	f7ff fe83 	bl	80016e0 <chSysHalt>
  }
}
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000800 	.word	0x20000800
 80019e0:	08009460 	.word	0x08009460
 80019e4:	f3af 8000 	nop.w
 80019e8:	f3af 8000 	nop.w
 80019ec:	f3af 8000 	nop.w

080019f0 <_dbg_trace_init>:
#if (CH_DBG_ENABLE_TRACE == TRUE) || defined(__DOXYGEN__)
/**
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <_dbg_trace_init+0x18>)
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80019fa:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <_dbg_trace_init+0x18>)
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <_dbg_trace_init+0x1c>)
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000800 	.word	0x20000800
 8001a0c:	20000840 	.word	0x20000840

08001a10 <_dbg_trace>:
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_dbg_trace+0x58>)
 8001a1a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001a1c:	f7ff fef8 	bl	8001810 <chVTGetSystemTimeX>
 8001a20:	4603      	mov	r3, r0
 8001a22:	6023      	str	r3, [r4, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_dbg_trace+0x58>)
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <_dbg_trace+0x58>)
 8001a2a:	6992      	ldr	r2, [r2, #24]
 8001a2c:	605a      	str	r2, [r3, #4]
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <_dbg_trace+0x58>)
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	609a      	str	r2, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <_dbg_trace+0x58>)
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a42:	731a      	strb	r2, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_dbg_trace+0x58>)
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	f103 0210 	add.w	r2, r3, #16
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <_dbg_trace+0x58>)
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <_dbg_trace+0x58>)
 8001a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <_dbg_trace+0x5c>)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d302      	bcc.n	8001a60 <_dbg_trace+0x50>
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8001a5a:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <_dbg_trace+0x58>)
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <_dbg_trace+0x60>)
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000800 	.word	0x20000800
 8001a6c:	20000c40 	.word	0x20000c40
 8001a70:	20000840 	.word	0x20000840
 8001a74:	f3af 8000 	nop.w
 8001a78:	f3af 8000 	nop.w
 8001a7c:	f3af 8000 	nop.w

08001a80 <st_lld_get_counter>:
 *
 * @return              The counter value.
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  return (systime_t)STM32_ST_TIM->CNT;
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	f3af 8000 	nop.w
 8001a98:	f3af 8000 	nop.w
 8001a9c:	f3af 8000 	nop.w

08001aa0 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  stStartAlarm(time);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f003 f951 	bl	8004d50 <stStartAlarm>
}
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	f3af 8000 	nop.w
 8001abc:	f3af 8000 	nop.w

08001ac0 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  stStopAlarm();
 8001ac4:	f003 f95c 	bl	8004d80 <stStopAlarm>
}
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w

08001ad0 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  stSetAlarm(time);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f003 f959 	bl	8004d90 <stSetAlarm>
}
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	f3af 8000 	nop.w
 8001aec:	f3af 8000 	nop.w

08001af0 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  return stGetCounter();
 8001af4:	f7ff ffc4 	bl	8001a80 <st_lld_get_counter>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop

08001b00 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001b04:	f7ff fff4 	bl	8001af0 <port_timer_get_time>
 8001b08:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop

08001b10 <_vt_init>:
 * @brief   Virtual Timers initialization.
 * @note    Internal use only.
 *
 * @notapi
 */
void _vt_init(void) {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_vt_init+0x28>)
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <_vt_init+0x2c>)
 8001b18:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_vt_init+0x28>)
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <_vt_init+0x2c>)
 8001b1e:	621a      	str	r2, [r3, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <_vt_init+0x28>)
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <_vt_init+0x28>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000800 	.word	0x20000800
 8001b3c:	2000081c 	.word	0x2000081c

08001b40 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 8001b4e:	f7ff ff1f 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <chVTDoSetI+0x24>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <chVTDoSetI+0x24>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <chVTDoSetI+0x2a>
 8001b64:	4839      	ldr	r0, [pc, #228]	; (8001c4c <chVTDoSetI+0x10c>)
 8001b66:	f7ff fdbb 	bl	80016e0 <chSysHalt>

  vtp->vt_par = par;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	611a      	str	r2, [r3, #16]
  vtp->vt_func = vtfunc;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 8001b76:	f7ff ffc3 	bl	8001b00 <chVTGetSystemTimeX>
 8001b7a:	6178      	str	r0, [r7, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d801      	bhi.n	8001b86 <chVTDoSetI+0x46>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001b82:	2302      	movs	r3, #2
 8001b84:	60bb      	str	r3, [r7, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <chVTDoSetI+0x110>)
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <chVTDoSetI+0x114>)
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d119      	bne.n	8001bc4 <chVTDoSetI+0x84>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <chVTDoSetI+0x110>)
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <chVTDoSetI+0x110>)
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	61da      	str	r2, [r3, #28]
      ch.vtlist.vt_prev = vtp;
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <chVTDoSetI+0x110>)
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	621a      	str	r2, [r3, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <chVTDoSetI+0x114>)
 8001ba6:	601a      	str	r2, [r3, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <chVTDoSetI+0x114>)
 8001bac:	605a      	str	r2, [r3, #4]
      vtp->vt_delta = delay;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <chVTDoSetI+0x110>)
 8001bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff6f 	bl	8001aa0 <port_timer_start_alarm>

      return;
 8001bc2:	e040      	b.n	8001c46 <chVTDoSetI+0x106>
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	441a      	add	r2, r3
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <chVTDoSetI+0x110>)
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	61bb      	str	r3, [r7, #24]
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <chVTDoSetI+0x110>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d906      	bls.n	8001bec <chVTDoSetI+0xac>

      /* New alarm deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <chVTDoSetI+0x110>)
 8001be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4413      	add	r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff72 	bl	8001ad0 <port_timer_set_alarm>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <chVTDoSetI+0x110>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	61fb      	str	r3, [r7, #28]
  while (p->vt_delta < delta) {
 8001bf2:	e007      	b.n	8001c04 <chVTDoSetI+0xc4>
    delta -= p->vt_delta;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	61bb      	str	r3, [r7, #24]
    p = p->vt_next;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61fb      	str	r3, [r7, #28]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3f2      	bcc.n	8001bf4 <chVTDoSetI+0xb4>
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	601a      	str	r2, [r3, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	605a      	str	r2, [r3, #4]
  vtp->vt_prev->vt_next = vtp;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	601a      	str	r2, [r3, #0]
  p->vt_prev = vtp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
  vtp->vt_delta = delta
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad2      	subs	r2, r2, r3
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <chVTDoSetI+0x110>)
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	08009530 	.word	0x08009530
 8001c50:	20000800 	.word	0x20000800
 8001c54:	2000081c 	.word	0x2000081c
 8001c58:	f3af 8000 	nop.w
 8001c5c:	f3af 8000 	nop.w

08001c60 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8001c68:	f7ff fe92 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <chVTDoResetI+0x18>
 8001c72:	4836      	ldr	r0, [pc, #216]	; (8001d4c <chVTDoResetI+0xec>)
 8001c74:	f7ff fd34 	bl	80016e0 <chSysHalt>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <chVTDoResetI+0x26>
 8001c80:	4832      	ldr	r0, [pc, #200]	; (8001d4c <chVTDoResetI+0xec>)
 8001c82:	f7ff fd2d 	bl	80016e0 <chSysHalt>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <chVTDoResetI+0xf0>)
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d01c      	beq.n	8001cca <chVTDoResetI+0x6a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	601a      	str	r2, [r3, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6852      	ldr	r2, [r2, #4]
 8001ca2:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <chVTDoResetI+0xf4>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d009      	beq.n	8001cc8 <chVTDoResetI+0x68>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	6891      	ldr	r1, [r2, #8]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	440a      	add	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]

    return;
 8001cc6:	e03e      	b.n	8001d46 <chVTDoResetI+0xe6>
 8001cc8:	e03d      	b.n	8001d46 <chVTDoResetI+0xe6>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <chVTDoResetI+0xf0>)
 8001cd0:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <chVTDoResetI+0xf0>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <chVTDoResetI+0xf4>)
 8001cd8:	605a      	str	r2, [r3, #4]
  vtp->vt_func = NULL;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <chVTDoResetI+0xf0>)
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <chVTDoResetI+0xf4>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d102      	bne.n	8001cf0 <chVTDoResetI+0x90>
    port_timer_stop_alarm();
 8001cea:	f7ff fee9 	bl	8001ac0 <port_timer_stop_alarm>

    return;
 8001cee:	e02a      	b.n	8001d46 <chVTDoResetI+0xe6>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <chVTDoResetI+0xf0>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <chVTDoResetI+0xf0>)
 8001cf6:	69d2      	ldr	r2, [r2, #28]
 8001cf8:	6891      	ldr	r1, [r2, #8]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6892      	ldr	r2, [r2, #8]
 8001cfe:	440a      	add	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001d02:	f7ff fefd 	bl	8001b00 <chVTGetSystemTimeX>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <chVTDoResetI+0xf0>)
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	60bb      	str	r3, [r7, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <chVTDoResetI+0xf0>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d800      	bhi.n	8001d1e <chVTDoResetI+0xbe>
    return;
 8001d1c:	e013      	b.n	8001d46 <chVTDoResetI+0xe6>
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <chVTDoResetI+0xf0>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d801      	bhi.n	8001d34 <chVTDoResetI+0xd4>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001d30:	2302      	movs	r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <chVTDoResetI+0xf0>)
 8001d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fec5 	bl	8001ad0 <port_timer_set_alarm>
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	08009540 	.word	0x08009540
 8001d50:	20000800 	.word	0x20000800
 8001d54:	2000081c 	.word	0x2000081c
 8001d58:	f3af 8000 	nop.w
 8001d5c:	f3af 8000 	nop.w

08001d60 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	2320      	movs	r3, #32
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w

08001d80 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w

08001da0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  port_lock();
 8001da4:	f7ff ffdc 	bl	8001d60 <port_lock>
}
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w

08001db0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

  port_unlock();
 8001db4:	f7ff ffe4 	bl	8001d80 <port_unlock>
}
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w

08001dc0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  tqp->p_next = (thread_t *)tqp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <queue_fifo_remove>:
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->p_next;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  tqp->p_next = tp->p_next;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	605a      	str	r2, [r3, #4]

  return tp;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	f3af 8000 	nop.w

08001e10 <queue_dequeue>:
  tqp->p_prev->p_next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  tp->p_prev->p_next = tp->p_next;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6852      	ldr	r2, [r2, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

  return tp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w

08001e40 <chSchIsRescRequiredI>:
 * @retval false        if rescheduling is not necessary.
 * @retval true         if there is a ready thread at higher priority.
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

  chDbgCheckClassI();
 8001e44:	f7ff fda4 	bl	8001990 <chDbgCheckClassI>

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <chSchIsRescRequiredI+0x24>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <chSchIsRescRequiredI+0x24>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	bf94      	ite	ls
 8001e58:	2300      	movls	r3, #0
 8001e5a:	2301      	movhi	r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000800 	.word	0x20000800
 8001e68:	f3af 8000 	nop.w
 8001e6c:	f3af 8000 	nop.w

08001e70 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8001e74:	f7ff ff94 	bl	8001da0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8001e78:	f000 fe62 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8001e7c:	f7ff fd18 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	f3af 8000 	nop.w
 8001e8c:	f3af 8000 	nop.w

08001e90 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8001e94:	f7ff fd24 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8001e98:	f000 fe5a 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8001e9c:	f7ff ff88 	bl	8001db0 <port_unlock_from_isr>
}
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	f3af 8000 	nop.w
 8001eac:	f3af 8000 	nop.w

08001eb0 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8001eb8:	f7ff fd6a 	bl	8001990 <chDbgCheckClassI>

  return (bool)(vtp->vt_func != NULL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	f3af 8000 	nop.w
 8001edc:	f3af 8000 	nop.w

08001ee0 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8001ee8:	f7ff fd52 	bl	8001990 <chDbgCheckClassI>

  sp->s_cnt++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
}
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f3af 8000 	nop.w

08001f00 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  queue_init(&ch.rlist.r_queue);
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <_scheduler_init+0x20>)
 8001f06:	f7ff ff5b 	bl	8001dc0 <queue_init>
  ch.rlist.r_prio = NOPRIO;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <_scheduler_init+0x20>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <_scheduler_init+0x20>)
 8001f12:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <_scheduler_init+0x20>)
 8001f14:	611a      	str	r2, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8001f16:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <_scheduler_init+0x20>)
 8001f18:	4a01      	ldr	r2, [pc, #4]	; (8001f20 <_scheduler_init+0x20>)
 8001f1a:	615a      	str	r2, [r3, #20]
#endif
}
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000800 	.word	0x20000800
 8001f24:	f3af 8000 	nop.w
 8001f28:	f3af 8000 	nop.w
 8001f2c:	f3af 8000 	nop.w

08001f30 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  thread_t *cp;

  chDbgCheckClassI();
 8001f38:	f7ff fd2a 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <chSchReadyI+0x18>
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <chSchReadyI+0x78>)
 8001f44:	f7ff fbcc 	bl	80016e0 <chSysHalt>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <chSchReadyI+0x2c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d102      	bne.n	8001f62 <chSchReadyI+0x32>
 8001f5c:	4812      	ldr	r0, [pc, #72]	; (8001fa8 <chSchReadyI+0x78>)
 8001f5e:	f7ff fbbf 	bl	80016e0 <chSysHalt>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <chSchReadyI+0x7c>)
 8001f6c:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->p_next;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]
  } while (cp->p_prio >= tp->p_prio);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d2f6      	bcs.n	8001f6e <chSchReadyI+0x3e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
  cp->p_prev = tp;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	605a      	str	r2, [r3, #4]

  return tp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08009550 	.word	0x08009550
 8001fac:	20000800 	.word	0x20000800

08001fb0 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  thread_t *otp;

  chDbgCheckClassS();
 8001fba:	f7ff fd01 	bl	80019c0 <chDbgCheckClassS>

  otp = currp;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <chSchGoSleepS+0x74>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	60fb      	str	r3, [r7, #12]
  otp->p_state = newstate;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	79fa      	ldrb	r2, [r7, #7]
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <chSchGoSleepS+0x74>)
 8001fce:	f7ff ff07 	bl	8001de0 <queue_fifo_remove>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <chSchGoSleepS+0x74>)
 8001fd6:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <chSchGoSleepS+0x74>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2020 	strb.w	r2, [r3, #32]
  chSysSwitch(currp, otp);
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff fd14 	bl	8001a10 <_dbg_trace>
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <chSchGoSleepS+0x74>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4618      	mov	r0, r3
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	f000 fd76 	bl	8002ae0 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001ff4:	f3ef 8309 	mrs	r3, PSP
 8001ff8:	461c      	mov	r4, r3
  return(result);
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	d202      	bcs.n	8002012 <chSchGoSleepS+0x62>
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <chSchGoSleepS+0x78>)
 800200e:	f7ff fb67 	bl	80016e0 <chSysHalt>
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <chSchGoSleepS+0x74>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4618      	mov	r0, r3
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	f7fe f939 	bl	8000290 <_port_switch>
}
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	20000800 	.word	0x20000800
 8002028:	08009470 	.word	0x08009470
 800202c:	f3af 8000 	nop.w

08002030 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  thread_t *tp = (thread_t *)p;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60fb      	str	r3, [r7, #12]

  chSysLockFromISR();
 800203c:	f7ff ff18 	bl	8001e70 <chSysLockFromISR>
  switch (tp->p_state) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	2b07      	cmp	r3, #7
 8002048:	d823      	bhi.n	8002092 <wakeup+0x62>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <wakeup+0x20>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002071 	.word	0x08002071
 8002054:	08002093 	.word	0x08002093
 8002058:	08002093 	.word	0x08002093
 800205c:	08002077 	.word	0x08002077
 8002060:	0800208b 	.word	0x0800208b
 8002064:	08002081 	.word	0x08002081
 8002068:	08002093 	.word	0x08002093
 800206c:	0800208b 	.word	0x0800208b
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8002070:	f7ff ff0e 	bl	8001e90 <chSysUnlockFromISR>
    return;
 8002074:	e017      	b.n	80020a6 <wakeup+0x76>
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    break;
 800207e:	e009      	b.n	8002094 <wakeup+0x64>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff2b 	bl	8001ee0 <chSemFastSignalI>
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff fec0 	bl	8001e10 <queue_dequeue>
    break;
 8002090:	e000      	b.n	8002094 <wakeup+0x64>
  default:
    /* Any other state, nothing to do.*/
    break;
 8002092:	bf00      	nop
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f04f 32ff 	mov.w	r2, #4294967295
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7ff ff47 	bl	8001f30 <chSchReadyI>
  chSysUnlockFromISR();
 80020a2:	f7ff fef5 	bl	8001e90 <chSysUnlockFromISR>
}
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	f3af 8000 	nop.w

080020b0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]

  chDbgCheckClassS();
 80020bc:	f7ff fc80 	bl	80019c0 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c6:	d01b      	beq.n	8002100 <chSchGoSleepTimeoutS+0x50>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <chSchGoSleepTimeoutS+0x68>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f107 020c 	add.w	r2, r7, #12
 80020d0:	4610      	mov	r0, r2
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <chSchGoSleepTimeoutS+0x6c>)
 80020d6:	f7ff fd33 	bl	8001b40 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff67 	bl	8001fb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fee2 	bl	8001eb0 <chVTIsArmedI>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <chSchGoSleepTimeoutS+0x4e>
      chVTDoResetI(&vt);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fdb2 	bl	8001c60 <chVTDoResetI>
 80020fc:	e004      	b.n	8002108 <chSchGoSleepTimeoutS+0x58>
 80020fe:	e003      	b.n	8002108 <chSchGoSleepTimeoutS+0x58>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff54 	bl	8001fb0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <chSchGoSleepTimeoutS+0x68>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000800 	.word	0x20000800
 800211c:	08002031 	.word	0x08002031

08002120 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  chDbgCheckClassS();
 800212a:	f7ff fc49 	bl	80019c0 <chDbgCheckClassS>

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <chSchWakeupS+0x80>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d803      	bhi.n	800214a <chSchWakeupS+0x2a>
    (void) chSchReadyI(ntp);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fef4 	bl	8001f30 <chSchReadyI>
 8002148:	e026      	b.n	8002198 <chSchWakeupS+0x78>
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <chSchWakeupS+0x80>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff feee 	bl	8001f30 <chSchReadyI>
 8002154:	60f8      	str	r0, [r7, #12]
    setcurrp(ntp);
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <chSchWakeupS+0x80>)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2020 	strb.w	r2, [r3, #32]
    chSysSwitch(ntp, otp);
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fc53 	bl	8001a10 <_dbg_trace>
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	f000 fcb7 	bl	8002ae0 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002172:	f3ef 8309 	mrs	r3, PSP
 8002176:	461c      	mov	r4, r3
  return(result);
 8002178:	4623      	mov	r3, r4
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	429a      	cmp	r2, r3
 8002188:	d202      	bcs.n	8002190 <chSchWakeupS+0x70>
 800218a:	4806      	ldr	r0, [pc, #24]	; (80021a4 <chSchWakeupS+0x84>)
 800218c:	f7ff faa8 	bl	80016e0 <chSysHalt>
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	f7fe f87c 	bl	8000290 <_port_switch>
  }
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000800 	.word	0x20000800
 80021a4:	08009470 	.word	0x08009470
 80021a8:	f3af 8000 	nop.w
 80021ac:	f3af 8000 	nop.w

080021b0 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  chDbgCheckClassS();
 80021b4:	f7ff fc04 	bl	80019c0 <chDbgCheckClassS>

  if (chSchIsRescRequiredI()) {
 80021b8:	f7ff fe42 	bl	8001e40 <chSchIsRescRequiredI>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <chSchRescheduleS+0x16>
    chSchDoRescheduleAhead();
 80021c2:	f000 f825 	bl	8002210 <chSchDoRescheduleAhead>
  }
}
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	f3af 8000 	nop.w
 80021cc:	f3af 8000 	nop.w

080021d0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <chSchIsPreemptionRequired+0x30>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	607b      	str	r3, [r7, #4]
  tprio_t p2 = currp->p_prio;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <chSchIsPreemptionRequired+0x30>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	603b      	str	r3, [r7, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	bf94      	ite	ls
 80021ee:	2300      	movls	r3, #0
 80021f0:	2301      	movhi	r3, #1
 80021f2:	b2db      	uxtb	r3, r3
#endif
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000800 	.word	0x20000800
 8002204:	f3af 8000 	nop.w
 8002208:	f3af 8000 	nop.w
 800220c:	f3af 8000 	nop.w

08002210 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
  thread_t *otp, *cp;

  otp = currp;
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	60bb      	str	r3, [r7, #8]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800221c:	4824      	ldr	r0, [pc, #144]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 800221e:	f7ff fddf 	bl	8001de0 <queue_fifo_remove>
 8002222:	4602      	mov	r2, r0
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 8002226:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2020 	strb.w	r2, [r3, #32]

  otp->p_state = CH_STATE_READY;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 800223c:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->p_next;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
  } while (cp->p_prio > otp->p_prio);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f6      	bhi.n	800223e <chSchDoRescheduleAhead+0x2e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]
  otp->p_prev = cp->p_prev;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	605a      	str	r2, [r3, #4]
  otp->p_prev->p_next = otp;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	601a      	str	r2, [r3, #0]
  cp->p_prev = otp;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	605a      	str	r2, [r3, #4]

  chSysSwitch(currp, otp);
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f7ff fbcf 	bl	8001a10 <_dbg_trace>
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4618      	mov	r0, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	f000 fc31 	bl	8002ae0 <_stats_ctxswc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800227e:	f3ef 8309 	mrs	r3, PSP
 8002282:	461c      	mov	r4, r3
  return(result);
 8002284:	4623      	mov	r3, r4
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d202      	bcs.n	800229c <chSchDoRescheduleAhead+0x8c>
 8002296:	4807      	ldr	r0, [pc, #28]	; (80022b4 <chSchDoRescheduleAhead+0xa4>)
 8002298:	f7ff fa22 	bl	80016e0 <chSysHalt>
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <chSchDoRescheduleAhead+0xa0>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4618      	mov	r0, r3
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	f7fd fff4 	bl	8000290 <_port_switch>
}
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000800 	.word	0x20000800
 80022b4:	08009470 	.word	0x08009470
 80022b8:	f3af 8000 	nop.w
 80022bc:	f3af 8000 	nop.w

080022c0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80022c4:	f7ff ffa4 	bl	8002210 <chSchDoRescheduleAhead>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w

080022d0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	2320      	movs	r3, #32
 80022d8:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w

080022f0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w

08002310 <list_init>:
 *
 * @param[in] tlp       pointer to the threads list object
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  tlp->p_next = (thread_t *)tlp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	f3af 8000 	nop.w
 800232c:	f3af 8000 	nop.w

08002330 <list_notempty>:
 * @param[in] tlp       pointer to the threads list object
 * @return              The status of the list.
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	bf0c      	ite	eq
 8002342:	2300      	moveq	r3, #0
 8002344:	2301      	movne	r3, #1
 8002346:	b2db      	uxtb	r3, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	f3af 8000 	nop.w
 8002358:	f3af 8000 	nop.w
 800235c:	f3af 8000 	nop.w

08002360 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  tqp->p_next = (thread_t *)tqp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	605a      	str	r2, [r3, #4]
}
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <queue_notempty>:
 * @param[in] tqp       pointer to the threads queue object
 * @return              The status of the queue.
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	bf0c      	ite	eq
 8002392:	2300      	moveq	r3, #0
 8002394:	2301      	movne	r3, #1
 8002396:	b2db      	uxtb	r3, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	f3af 8000 	nop.w
 80023a8:	f3af 8000 	nop.w
 80023ac:	f3af 8000 	nop.w

080023b0 <list_remove>:

  tp->p_next = tlp->p_next;
  tlp->p_next = tp;
}

static inline thread_t *list_remove(threads_list_t *tlp) {
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  thread_t *tp = tlp->p_next;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  tlp->p_next = tp->p_next;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]

  return tp;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	f3af 8000 	nop.w
 80023d8:	f3af 8000 	nop.w
 80023dc:	f3af 8000 	nop.w

080023e0 <queue_insert>:
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]

  tp->p_next = (thread_t *)tqp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
  tqp->p_prev = tp;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	605a      	str	r2, [r3, #4]
}
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <queue_fifo_remove>:

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->p_next;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]

  tqp->p_next = tp->p_next;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	605a      	str	r2, [r3, #4]

  return tp;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	f3af 8000 	nop.w

08002440 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

  port_lock();
 8002444:	f7ff ff44 	bl	80022d0 <port_lock>
  _stats_start_measure_crit_thd();
 8002448:	f000 fb6a 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800244c:	f7ff fa00 	bl	8001850 <_dbg_check_lock>
}
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	f3af 8000 	nop.w
 8002458:	f3af 8000 	nop.w
 800245c:	f3af 8000 	nop.w

08002460 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 8002464:	f7ff fa0c 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002468:	f000 fb62 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <chSysUnlock+0x34>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <chSysUnlock+0x34>)
 8002472:	429a      	cmp	r2, r3
 8002474:	d00a      	beq.n	800248c <chSysUnlock+0x2c>
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <chSysUnlock+0x34>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <chSysUnlock+0x34>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d202      	bcs.n	800248c <chSysUnlock+0x2c>
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <chSysUnlock+0x38>)
 8002488:	f7ff f92a 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 800248c:	f7ff ff30 	bl	80022f0 <port_unlock>
}
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000800 	.word	0x20000800
 8002498:	08009570 	.word	0x08009570
 800249c:	f3af 8000 	nop.w

080024a0 <chThdGetSelfX>:
  *
  * @return             A pointer to the current thread.
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  return ch.rlist.r_current;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <chThdGetSelfX+0x14>)
 80024a6:	699b      	ldr	r3, [r3, #24]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000800 	.word	0x20000800
 80024b8:	f3af 8000 	nop.w
 80024bc:	f3af 8000 	nop.w

080024c0 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  chDbgCheck(time != TIME_IMMEDIATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <chThdSleepS+0x14>
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <chThdSleepS+0x24>)
 80024d0:	f7ff f906 	bl	80016e0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80024d4:	2008      	movs	r0, #8
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f7ff fdea 	bl	80020b0 <chSchGoSleepTimeoutS>
}
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	08009580 	.word	0x08009580
 80024e8:	f3af 8000 	nop.w
 80024ec:	f3af 8000 	nop.w

080024f0 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff40 	bl	8002380 <queue_notempty>
 8002500:	4603      	mov	r3, r0
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <chThdDoDequeueNextI+0x22>
 800250c:	480b      	ldr	r0, [pc, #44]	; (800253c <chThdDoDequeueNextI+0x4c>)
 800250e:	f7ff f8e7 	bl	80016e0 <chSysHalt>

  tp = queue_fifo_remove(tqp);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff7c 	bl	8002410 <queue_fifo_remove>
 8002518:	60f8      	str	r0, [r7, #12]

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d002      	beq.n	800252a <chThdDoDequeueNextI+0x3a>
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <chThdDoDequeueNextI+0x4c>)
 8002526:	f7ff f8db 	bl	80016e0 <chSysHalt>

  tp->p_u.rdymsg = msg;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fcfd 	bl	8001f30 <chSchReadyI>
}
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	080095c0 	.word	0x080095c0

08002540 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]

  tp->p_prio = prio;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	609a      	str	r2, [r3, #8]
  tp->p_state = CH_STATE_WTSTART;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2020 	strb.w	r2, [r3, #32]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
  tp->p_mtxlist = NULL;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <_thread_init+0x98>)
 8002584:	611a      	str	r2, [r3, #16]
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <_thread_init+0x98>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <_thread_init+0x98>)
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	615a      	str	r2, [r3, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3328      	adds	r3, #40	; 0x28
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff feb5 	bl	8002310 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	332c      	adds	r3, #44	; 0x2c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fed8 	bl	8002360 <queue_init>
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	61da      	str	r2, [r3, #28]
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3348      	adds	r3, #72	; 0x48
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fa06 	bl	80029d0 <chTMObjectInit>
  chTMStartMeasurementX(&tp->p_stats);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3348      	adds	r3, #72	; 0x48
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa21 	bl	8002a10 <chTMStartMeasurementX>
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000800 	.word	0x20000800
 80025dc:	f3af 8000 	nop.w

080025e0 <_thread_memfill>:
 * @param[in] endp      last address to fill +1
 * @param[in] v         filler value
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]

  while (startp < endp) {
 80025ee:	e004      	b.n	80025fa <_thread_memfill+0x1a>
    *startp++ = v;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60fa      	str	r2, [r7, #12]
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	701a      	strb	r2, [r3, #0]
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3f6      	bcc.n	80025f0 <_thread_memfill+0x10>
    *startp++ = v;
  }
}
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	f3af 8000 	nop.w

08002610 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	617b      	str	r3, [r7, #20]

  chDbgCheckClassI();
 8002622:	f7ff f9b5 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <chThdCreateI+0x2e>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2bef      	cmp	r3, #239	; 0xef
 8002630:	d905      	bls.n	800263e <chThdCreateI+0x2e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b7f      	cmp	r3, #127	; 0x7f
 8002636:	d802      	bhi.n	800263e <chThdCreateI+0x2e>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <chThdCreateI+0x34>
 800263e:	480f      	ldr	r0, [pc, #60]	; (800267c <chThdCreateI+0x6c>)
 8002640:	f7ff f84e 	bl	80016e0 <chSysHalt>
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3b24      	subs	r3, #36	; 0x24
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	441a      	add	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <chThdCreateI+0x70>)
 8002666:	621a      	str	r2, [r3, #32]

  return _thread_init(tp, prio);
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	f7ff ff68 	bl	8002540 <_thread_init>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08009560 	.word	0x08009560
 8002680:	080002a1 	.word	0x080002a1
 8002684:	f3af 8000 	nop.w
 8002688:	f3af 8000 	nop.w
 800268c:	f3af 8000 	nop.w

08002690 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3368      	adds	r3, #104	; 0x68
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	4619      	mov	r1, r3
 80026a6:	22ff      	movs	r2, #255	; 0xff
 80026a8:	f7ff ff9a 	bl	80025e0 <_thread_memfill>
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	440b      	add	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	2255      	movs	r2, #85	; 0x55
 80026be:	f7ff ff8f 	bl	80025e0 <_thread_memfill>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 80026c2:	f7ff febd 	bl	8002440 <chSysLock>
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f7ff ff9d 	bl	8002610 <chThdCreateI>
 80026d6:	6178      	str	r0, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	2100      	movs	r1, #0
 80026dc:	f7ff fd20 	bl	8002120 <chSchWakeupS>
  chSysUnlock();
 80026e0:	f7ff febe 	bl	8002460 <chSysUnlock>

  return tp;
 80026e4:	697b      	ldr	r3, [r7, #20]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  chSysLock();
 80026f8:	f7ff fea2 	bl	8002440 <chSysLock>
  chThdSleepS(time);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fedf 	bl	80024c0 <chThdSleepS>
  chSysUnlock();
 8002702:	f7ff fead 	bl	8002460 <chSysUnlock>
}
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f3af 8000 	nop.w

08002710 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002718:	f7ff fe92 	bl	8002440 <chSysLock>
  chThdExitS(msg);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f807 	bl	8002730 <chThdExitS>
  /* The thread never returns here.*/
}
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	f3af 8000 	nop.w
 800272c:	f3af 8000 	nop.w

08002730 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  thread_t *tp = currp;
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <chThdExitS+0x6c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	60fb      	str	r3, [r7, #12]

  tp->p_u.exitcode = msg;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8002744:	e008      	b.n	8002758 <chThdExitS+0x28>
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3328      	adds	r3, #40	; 0x28
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fe30 	bl	80023b0 <list_remove>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fbec 	bl	8001f30 <chSchReadyI>
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3328      	adds	r3, #40	; 0x28
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fde7 	bl	8002330 <list_notempty>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <chThdExitS+0x16>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <chThdExitS+0x5a>
    REG_REMOVE(tp);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6912      	ldr	r2, [r2, #16]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6952      	ldr	r2, [r2, #20]
 8002788:	615a      	str	r2, [r3, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800278a:	200f      	movs	r0, #15
 800278c:	f7ff fc10 	bl	8001fb0 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8002790:	4803      	ldr	r0, [pc, #12]	; (80027a0 <chThdExitS+0x70>)
 8002792:	f7fe ffa5 	bl	80016e0 <chSysHalt>
}
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000800 	.word	0x20000800
 80027a0:	08009590 	.word	0x08009590
 80027a4:	f3af 8000 	nop.w
 80027a8:	f3af 8000 	nop.w
 80027ac:	f3af 8000 	nop.w

080027b0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  thread_t *tp = chThdGetSelfX();
 80027b8:	f7ff fe72 	bl	80024a0 <chThdGetSelfX>
 80027bc:	60f8      	str	r0, [r7, #12]

  chDbgAssert(*trp == NULL, "not NULL");
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <chThdSuspendS+0x1c>
 80027c6:	480a      	ldr	r0, [pc, #40]	; (80027f0 <chThdSuspendS+0x40>)
 80027c8:	f7fe ff8a 	bl	80016e0 <chSysHalt>

  *trp = tp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	601a      	str	r2, [r3, #0]
  tp->p_u.wttrp = trp;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80027d8:	2003      	movs	r0, #3
 80027da:	f7ff fbe9 	bl	8001fb0 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 80027de:	f7ff fe5f 	bl	80024a0 <chThdGetSelfX>
 80027e2:	4603      	mov	r3, r0
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	080095a0 	.word	0x080095a0
 80027f4:	f3af 8000 	nop.w
 80027f8:	f3af 8000 	nop.w
 80027fc:	f3af 8000 	nop.w

08002800 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]

  if (*trp != NULL) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d013      	beq.n	800283a <chThdResumeI+0x3a>
    thread_t *tp = *trp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d002      	beq.n	8002828 <chThdResumeI+0x28>
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <chThdResumeI+0x40>)
 8002824:	f7fe ff5c 	bl	80016e0 <chSysHalt>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    tp->p_u.rdymsg = msg;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fb7b 	bl	8001f30 <chSchReadyI>
  }
}
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	080095b0 	.word	0x080095b0
 8002844:	f3af 8000 	nop.w
 8002848:	f3af 8000 	nop.w
 800284c:	f3af 8000 	nop.w

08002850 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]

  if (TIME_IMMEDIATE == timeout) {
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <chThdEnqueueTimeoutS+0x16>
    return MSG_TIMEOUT;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
 8002864:	e00a      	b.n	800287c <chThdEnqueueTimeoutS+0x2c>
  }

  queue_insert(currp, tqp);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <chThdEnqueueTimeoutS+0x34>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4618      	mov	r0, r3
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	f7ff fdb7 	bl	80023e0 <queue_insert>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002872:	2004      	movs	r0, #4
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	f7ff fc1b 	bl	80020b0 <chSchGoSleepTimeoutS>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000800 	.word	0x20000800
 8002888:	f3af 8000 	nop.w
 800288c:	f3af 8000 	nop.w

08002890 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]

  if (queue_notempty(tqp)) {
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fd70 	bl	8002380 <queue_notempty>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	f7ff fe21 	bl	80024f0 <chThdDoDequeueNextI>
  }
}
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	f3af 8000 	nop.w
 80028b8:	f3af 8000 	nop.w
 80028bc:	f3af 8000 	nop.w

080028c0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

  while (queue_notempty(tqp)) {
 80028ca:	e003      	b.n	80028d4 <chThdDequeueAllI+0x14>
    chThdDoDequeueNextI(tqp, msg);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	f7ff fe0e 	bl	80024f0 <chThdDoDequeueNextI>
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fd53 	bl	8002380 <queue_notempty>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f5      	bne.n	80028cc <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	f3af 8000 	nop.w
 80028ec:	f3af 8000 	nop.w

080028f0 <port_rt_get_counter_value>:
/**
 * @brief   Returns the current value of the realtime counter.
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  return DWT->CYCCNT;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <port_rt_get_counter_value+0x14>)
 80028f6:	685b      	ldr	r3, [r3, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e0001000 	.word	0xe0001000
 8002908:	f3af 8000 	nop.w
 800290c:	f3af 8000 	nop.w

08002910 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]

  tmp->n++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad2      	subs	r2, r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	1812      	adds	r2, r2, r0
 8002948:	eb43 0301 	adc.w	r3, r3, r1
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d904      	bls.n	8002968 <tm_stop+0x58>
    tmp->worst = tmp->last;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e009      	b.n	800297c <tm_stop+0x6c>
  }
  else if (tmp->last < tmp->best) {
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d203      	bcs.n	800297c <tm_stop+0x6c>
    tmp->best = tmp->last;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]
  }
  /*lint -restore*/
}
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	f3af 8000 	nop.w
 800298c:	f3af 8000 	nop.w

08002990 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <_tm_init+0x34>)
 8002998:	2200      	movs	r2, #0
 800299a:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
  chTMObjectInit(&tm);
 800299e:	463b      	mov	r3, r7
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f815 	bl	80029d0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 80029a6:	463b      	mov	r3, r7
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f831 	bl	8002a10 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80029ae:	463b      	mov	r3, r7
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f83d 	bl	8002a30 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <_tm_init+0x34>)
 80029ba:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
}
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000800 	.word	0x20000800
 80029c8:	f3af 8000 	nop.w
 80029cc:	f3af 8000 	nop.w

080029d0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  tmp->best       = (rtcnt_t)-1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f04f 32ff 	mov.w	r2, #4294967295
 80029de:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	f3af 8000 	nop.w

08002a10 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8002a18:	f7ff ff6a 	bl	80028f0 <port_rt_get_counter_value>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	f3af 8000 	nop.w
 8002a2c:	f3af 8000 	nop.w

08002a30 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002a38:	f7ff ff5a 	bl	80028f0 <port_rt_get_counter_value>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <chTMStopMeasurementX+0x24>)
 8002a40:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f7ff ff61 	bl	8002910 <tm_stop>
}
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000800 	.word	0x20000800
 8002a58:	f3af 8000 	nop.w
 8002a5c:	f3af 8000 	nop.w

08002a60 <chTMChainMeasurementToX>:
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8002a6a:	f7ff ff41 	bl	80028f0 <port_rt_get_counter_value>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f7ff ff47 	bl	8002910 <tm_stop>
}
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	f3af 8000 	nop.w
 8002a8c:	f3af 8000 	nop.w

08002a90 <_stats_init>:
/**
 * @brief   Initializes the statistics module.
 *
 * @init
 */
void _stats_init(void) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <_stats_init+0x24>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <_stats_init+0x24>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
  chTMObjectInit(&ch.kernel_stats.m_crit_thd);
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <_stats_init+0x28>)
 8002aa6:	f7ff ff93 	bl	80029d0 <chTMObjectInit>
  chTMObjectInit(&ch.kernel_stats.m_crit_isr);
 8002aaa:	4804      	ldr	r0, [pc, #16]	; (8002abc <_stats_init+0x2c>)
 8002aac:	f7ff ff90 	bl	80029d0 <chTMObjectInit>
}
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000800 	.word	0x20000800
 8002ab8:	20000cb8 	.word	0x20000cb8
 8002abc:	20000cd0 	.word	0x20000cd0

08002ac0 <_stats_increase_irq>:

/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  ch.kernel_stats.n_irq++;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <_stats_increase_irq+0x1c>)
 8002ac6:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <_stats_increase_irq+0x1c>)
 8002ace:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
}
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000800 	.word	0x20000800

08002ae0 <_stats_ctxswc>:
 * @brief   Updates context switch related statistics.
 *
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]

  ch.kernel_stats.n_ctxswc++;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <_stats_ctxswc+0x30>)
 8002aec:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <_stats_ctxswc+0x30>)
 8002af4:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3348      	adds	r3, #72	; 0x48
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7ff ffab 	bl	8002a60 <chTMChainMeasurementToX>
}
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000800 	.word	0x20000800
 8002b14:	f3af 8000 	nop.w
 8002b18:	f3af 8000 	nop.w
 8002b1c:	f3af 8000 	nop.w

08002b20 <_stats_start_measure_crit_thd>:

/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8002b24:	4801      	ldr	r0, [pc, #4]	; (8002b2c <_stats_start_measure_crit_thd+0xc>)
 8002b26:	f7ff ff73 	bl	8002a10 <chTMStartMeasurementX>
}
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000cb8 	.word	0x20000cb8

08002b30 <_stats_stop_measure_crit_thd>:

/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8002b34:	4801      	ldr	r0, [pc, #4]	; (8002b3c <_stats_stop_measure_crit_thd+0xc>)
 8002b36:	f7ff ff7b 	bl	8002a30 <chTMStopMeasurementX>
}
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000cb8 	.word	0x20000cb8

08002b40 <_stats_start_measure_crit_isr>:

/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <_stats_start_measure_crit_isr+0xc>)
 8002b46:	f7ff ff63 	bl	8002a10 <chTMStartMeasurementX>
}
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000cd0 	.word	0x20000cd0

08002b50 <_stats_stop_measure_crit_isr>:

/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 8002b54:	4801      	ldr	r0, [pc, #4]	; (8002b5c <_stats_stop_measure_crit_isr+0xc>)
 8002b56:	f7ff ff6b 	bl	8002a30 <chTMStopMeasurementX>
}
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000cd0 	.word	0x20000cd0

08002b60 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	2320      	movs	r3, #32
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w

08002b80 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w

08002ba0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  tqp->p_next = (thread_t *)tqp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]
}
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <queue_notempty>:
 * @param[in] tqp       pointer to the threads queue object
 * @return              The status of the queue.
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	f3af 8000 	nop.w
 8002be8:	f3af 8000 	nop.w
 8002bec:	f3af 8000 	nop.w

08002bf0 <queue_prio_insert>:
  tlp->p_next = tp->p_next;

  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  thread_t *cp = (thread_t *)tqp;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->p_next;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d005      	beq.n	8002c18 <queue_prio_insert+0x28>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d2f2      	bcs.n	8002bfe <queue_prio_insert+0xe>
  tp->p_next = cp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
  cp->p_prev = tp;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	605a      	str	r2, [r3, #4]
}
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop

08002c40 <queue_fifo_remove>:
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->p_next;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]

  tqp->p_next = tp->p_next;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]

  return tp;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	f3af 8000 	nop.w

08002c70 <queue_dequeue>:
  tqp->p_prev->p_next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  tp->p_prev->p_next = tp->p_next;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	605a      	str	r2, [r3, #4]

  return tp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w

08002ca0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

  port_lock();
 8002ca4:	f7ff ff5c 	bl	8002b60 <port_lock>
  _stats_start_measure_crit_thd();
 8002ca8:	f7ff ff3a 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8002cac:	f7fe fdd0 	bl	8001850 <_dbg_check_lock>
}
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	f3af 8000 	nop.w
 8002cbc:	f3af 8000 	nop.w

08002cc0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 8002cc4:	f7fe fddc 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002cc8:	f7ff ff32 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <chSysUnlock+0x34>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <chSysUnlock+0x34>)
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d00a      	beq.n	8002cec <chSysUnlock+0x2c>
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <chSysUnlock+0x34>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <chSysUnlock+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d202      	bcs.n	8002cec <chSysUnlock+0x2c>
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <chSysUnlock+0x38>)
 8002ce8:	f7fe fcfa 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 8002cec:	f7ff ff48 	bl	8002b80 <port_unlock>
}
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000800 	.word	0x20000800
 8002cf8:	08009610 	.word	0x08009610
 8002cfc:	f3af 8000 	nop.w

08002d00 <chMtxQueueNotEmptyS>:
 * @return              The mutex queue status.
 *
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  chDbgCheckClassS();
 8002d08:	f7fe fe5a 	bl	80019c0 <chDbgCheckClassS>

  return queue_notempty(&mp->m_queue);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff56 	bl	8002bc0 <queue_notempty>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop

08002d20 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  chDbgCheck(mp != NULL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <chMtxObjectInit+0x14>
 8002d2e:	4806      	ldr	r0, [pc, #24]	; (8002d48 <chMtxObjectInit+0x28>)
 8002d30:	f7fe fcd6 	bl	80016e0 <chSysHalt>

  queue_init(&mp->m_queue);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff32 	bl	8002ba0 <queue_init>
  mp->m_owner = NULL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08009600 	.word	0x08009600
 8002d4c:	f3af 8000 	nop.w

08002d50 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002d58:	f7ff ffa2 	bl	8002ca0 <chSysLock>
  chMtxLockS(mp);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f807 	bl	8002d70 <chMtxLockS>
  chSysUnlock();
 8002d62:	f7ff ffad 	bl	8002cc0 <chSysUnlock>
}
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	f3af 8000 	nop.w

08002d70 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  thread_t *ctp = currp;
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <chMtxLockS+0xf8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	60bb      	str	r3, [r7, #8]

  chDbgCheckClassS();
 8002d7e:	f7fe fe1f 	bl	80019c0 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <chMtxLockS+0x1e>
 8002d88:	4838      	ldr	r0, [pc, #224]	; (8002e6c <chMtxLockS+0xfc>)
 8002d8a:	f7fe fca9 	bl	80016e0 <chSysHalt>

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d05b      	beq.n	8002e4e <chMtxLockS+0xde>
    else {
#endif
      /* Priority inheritance protocol; explores the thread-mutex dependencies
         boosting the priority of all the affected threads to equal the
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60fb      	str	r3, [r7, #12]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8002d9c:	e034      	b.n	8002e08 <chMtxLockS+0x98>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d004      	beq.n	8002dba <chMtxLockS+0x4a>
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	d011      	beq.n	8002dd8 <chMtxLockS+0x68>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01a      	beq.n	8002dee <chMtxLockS+0x7e>
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
          break;
        default:
          /* Nothing to do for other states.*/
          break;
 8002db8:	e025      	b.n	8002e06 <chMtxLockS+0x96>

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff ff58 	bl	8002c70 <queue_dequeue>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7ff ff11 	bl	8002bf0 <queue_prio_insert>
          tp = tp->p_u.wtmtxp->m_owner;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60fb      	str	r3, [r7, #12]
          /*lint -e{9042} [16.1] Continues the while.*/
          continue;
 8002dd6:	e017      	b.n	8002e08 <chMtxLockS+0x98>
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff49 	bl	8002c70 <queue_dequeue>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7ff ff02 	bl	8002bf0 <queue_prio_insert>
          break;
 8002dec:	e00b      	b.n	8002e06 <chMtxLockS+0x96>
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2020 	strb.w	r2, [r3, #32]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ff3a 	bl	8002c70 <queue_dequeue>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f896 	bl	8001f30 <chSchReadyI>
          break;
 8002e04:	bf00      	nop
        default:
          /* Nothing to do for other states.*/
          break;
        }
        break;
 8002e06:	e005      	b.n	8002e14 <chMtxLockS+0xa4>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3c4      	bcc.n	8002d9e <chMtxLockS+0x2e>
        }
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68b8      	ldr	r0, [r7, #8]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff fee9 	bl	8002bf0 <queue_prio_insert>
      ctp->p_u.wtmtxp = mp;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8002e24:	2006      	movs	r0, #6
 8002e26:	f7ff f8c3 	bl	8001fb0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d002      	beq.n	8002e3a <chMtxLockS+0xca>
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <chMtxLockS+0xfc>)
 8002e36:	f7fe fc53 	bl	80016e0 <chSysHalt>
      chDbgAssert(ctp->p_mtxlist == mp, "not owned");
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d003      	beq.n	8002e4c <chMtxLockS+0xdc>
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <chMtxLockS+0xfc>)
 8002e46:	f7fe fc4b 	bl	80016e0 <chSysHalt>
 8002e4a:	e00a      	b.n	8002e62 <chMtxLockS+0xf2>
 8002e4c:	e009      	b.n	8002e62 <chMtxLockS+0xf2>
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
    mp->m_next = ctp->p_mtxlist;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
    ctp->p_mtxlist = mp;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000800 	.word	0x20000800
 8002e6c:	08009620 	.word	0x08009620

08002e70 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  thread_t *ctp = currp;
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <chMtxUnlock+0xdc>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	60fb      	str	r3, [r7, #12]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <chMtxUnlock+0x1a>
 8002e84:	4832      	ldr	r0, [pc, #200]	; (8002f50 <chMtxUnlock+0xe0>)
 8002e86:	f7fe fc2b 	bl	80016e0 <chSysHalt>

  chSysLock();
 8002e8a:	f7ff ff09 	bl	8002ca0 <chSysLock>

  chDbgAssert(ctp->p_mtxlist != NULL, "owned mutexes list empty");
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <chMtxUnlock+0x2c>
 8002e96:	482e      	ldr	r0, [pc, #184]	; (8002f50 <chMtxUnlock+0xe0>)
 8002e98:	f7fe fc22 	bl	80016e0 <chSysHalt>
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp, "ownership failure");
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d002      	beq.n	8002eae <chMtxUnlock+0x3e>
 8002ea8:	4829      	ldr	r0, [pc, #164]	; (8002f50 <chMtxUnlock+0xe0>)
 8002eaa:	f7fe fc19 	bl	80016e0 <chSysHalt>
  chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->m_cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d002      	beq.n	8002ebe <chMtxUnlock+0x4e>
 8002eb8:	4825      	ldr	r0, [pc, #148]	; (8002f50 <chMtxUnlock+0xe0>)
 8002eba:	f7fe fc11 	bl	80016e0 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff1a 	bl	8002d00 <chMtxQueueNotEmptyS>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d034      	beq.n	8002f3c <chMtxUnlock+0xcc>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	613b      	str	r3, [r7, #16]
      lmp = ctp->p_mtxlist;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	617b      	str	r3, [r7, #20]
      while (lmp != NULL) {
 8002ede:	e012      	b.n	8002f06 <chMtxUnlock+0x96>
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8002ee0:	6978      	ldr	r0, [r7, #20]
 8002ee2:	f7ff ff0d 	bl	8002d00 <chMtxQueueNotEmptyS>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <chMtxUnlock+0x90>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d903      	bls.n	8002f00 <chMtxUnlock+0x90>
            (lmp->m_queue.p_next->p_prio > newprio)) {
          newprio = lmp->m_queue.p_next->p_prio;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	613b      	str	r3, [r7, #16]
        }
        lmp = lmp->m_next;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	617b      	str	r3, [r7, #20]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e9      	bne.n	8002ee0 <chMtxUnlock+0x70>
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe93 	bl	8002c40 <queue_fifo_remove>
 8002f1a:	60b8      	str	r0, [r7, #8]
      mp->m_owner = tp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
      tp->p_mtxlist = mp;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f7fe fffd 	bl	8001f30 <chSchReadyI>
      chSchRescheduleS();
 8002f36:	f7ff f93b 	bl	80021b0 <chSchRescheduleS>
 8002f3a:	e002      	b.n	8002f42 <chMtxUnlock+0xd2>
    }
    else {
      mp->m_owner = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
 8002f42:	f7ff febd 	bl	8002cc0 <chSysUnlock>
}
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000800 	.word	0x20000800
 8002f50:	08009630 	.word	0x08009630
 8002f54:	f3af 8000 	nop.w
 8002f58:	f3af 8000 	nop.w
 8002f5c:	f3af 8000 	nop.w

08002f60 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
 8002f6a:	f7fe fd11 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <chEvtBroadcastFlagsI+0x1a>
 8002f74:	4814      	ldr	r0, [pc, #80]	; (8002fc8 <chEvtBroadcastFlagsI+0x68>)
 8002f76:	f7fe fbb3 	bl	80016e0 <chSysHalt>

  elp = esp->es_next;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002f80:	e01a      	b.n	8002fb8 <chEvtBroadcastFlagsI+0x58>
  /*lint -restore*/
    elp->el_flags |= flags;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <chEvtBroadcastFlagsI+0x42>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4013      	ands	r3, r2
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <chEvtBroadcastFlagsI+0x52>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f000 f80f 	bl	8002fd0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1e0      	bne.n	8002f82 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
  }
}
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	08009640 	.word	0x08009640
 8002fcc:	f3af 8000 	nop.w

08002fd0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]

  chDbgCheckClassI();
 8002fda:	f7fe fcd9 	bl	8001990 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <chEvtSignalI+0x1a>
 8002fe4:	4815      	ldr	r0, [pc, #84]	; (800303c <chEvtSignalI+0x6c>)
 8002fe6:	f7fe fb7b 	bl	80016e0 <chSysHalt>

  tp->p_epending |= events;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffc:	2b0a      	cmp	r3, #10
 8002ffe:	d106      	bne.n	800300e <chEvtSignalI+0x3e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	4013      	ands	r3, r2
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <chEvtSignalI+0x5a>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3020 	ldrb.w	r3, [r3, #32]
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8003014:	2b0b      	cmp	r3, #11
 8003016:	d10e      	bne.n	8003036 <chEvtSignalI+0x66>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8003026:	429a      	cmp	r2, r3
 8003028:	d105      	bne.n	8003036 <chEvtSignalI+0x66>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fe ff7d 	bl	8001f30 <chSchReadyI>
  }
}
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	08009660 	.word	0x08009660

08003040 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	2320      	movs	r3, #32
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w

08003080 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  tqp->p_next = (thread_t *)tqp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]
}
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop

080030a0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0

  port_lock();
 80030a4:	f7ff ffcc 	bl	8003040 <port_lock>
  _stats_start_measure_crit_thd();
 80030a8:	f7ff fd3a 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80030ac:	f7fe fbd0 	bl	8001850 <_dbg_check_lock>
}
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	f3af 8000 	nop.w
 80030b8:	f3af 8000 	nop.w
 80030bc:	f3af 8000 	nop.w

080030c0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 80030c4:	f7fe fbdc 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80030c8:	f7ff fd32 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <chSysUnlock+0x34>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <chSysUnlock+0x34>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d00a      	beq.n	80030ec <chSysUnlock+0x2c>
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <chSysUnlock+0x34>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <chSysUnlock+0x34>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d202      	bcs.n	80030ec <chSysUnlock+0x2c>
 80030e6:	4804      	ldr	r0, [pc, #16]	; (80030f8 <chSysUnlock+0x38>)
 80030e8:	f7fe fafa 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 80030ec:	f7ff ffb8 	bl	8003060 <port_unlock>
}
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000800 	.word	0x20000800
 80030f8:	08009670 	.word	0x08009670
 80030fc:	f3af 8000 	nop.w

08003100 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  queue_init(tqp);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffb9 	bl	8003080 <queue_init>
}
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	f3af 8000 	nop.w
 8003118:	f3af 8000 	nop.w
 800311c:	f3af 8000 	nop.w

08003120 <chIQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8003128:	f7fe fc32 	bl	8001990 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2300      	movne	r3, #0
 8003136:	2301      	moveq	r3, #1
 8003138:	b2db      	uxtb	r3, r3
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	f3af 8000 	nop.w
 8003148:	f3af 8000 	nop.w
 800314c:	f3af 8000 	nop.w

08003150 <chIQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8003158:	f7fe fc1a 	bl	8001990 <chDbgCheckClassI>

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	429a      	cmp	r2, r3
 8003166:	d105      	bne.n	8003174 <chIQIsFullI+0x24>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <chIQIsFullI+0x24>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <chIQIsFullI+0x26>
 8003174:	2300      	movs	r3, #0
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	f3af 8000 	nop.w
 8003188:	f3af 8000 	nop.w
 800318c:	f3af 8000 	nop.w

08003190 <chOQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8003198:	f7fe fbfa 	bl	8001990 <chDbgCheckClassI>

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d105      	bne.n	80031b4 <chOQIsEmptyI+0x24>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <chOQIsEmptyI+0x24>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <chOQIsEmptyI+0x26>
 80031b4:	2300      	movs	r3, #0
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	f3af 8000 	nop.w
 80031c8:	f3af 8000 	nop.w
 80031cc:	f3af 8000 	nop.w

080031d0 <chOQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 80031d8:	f7fe fbda 	bl	8001990 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2300      	movne	r3, #0
 80031e6:	2301      	moveq	r3, #1
 80031e8:	b2db      	uxtb	r3, r3
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	f3af 8000 	nop.w
 80031f8:	f3af 8000 	nop.w
 80031fc:	f3af 8000 	nop.w

08003200 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]

  chThdQueueObjectInit(&iqp->q_waiting);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff75 	bl	8003100 <chThdQueueObjectInit>
  iqp->q_counter = 0;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	441a      	add	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w

08003250 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]

  chDbgCheckClassI();
 800325c:	f7fe fb98 	bl	8001990 <chDbgCheckClassI>

  if (chIQIsFullI(iqp)) {
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff75 	bl	8003150 <chIQIsFullI>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <chIQPutI+0x22>
    return Q_FULL;
 800326c:	f06f 0303 	mvn.w	r3, #3
 8003270:	e01b      	b.n	80032aa <chIQPutI+0x5a>
  }

  iqp->q_counter++;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	1c59      	adds	r1, r3, #1
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6151      	str	r1, [r2, #20]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d303      	bcc.n	800329e <chIQPutI+0x4e>
    iqp->q_wrptr = iqp->q_buffer;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	615a      	str	r2, [r3, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	f7ff faf4 	bl	8002890 <chThdDequeueNextI>

  return Q_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	f3af 8000 	nop.w
 80032bc:	f3af 8000 	nop.w

080032c0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint8_t b;

  chSysLock();
 80032ca:	f7ff fee9 	bl	80030a0 <chSysLock>
  if (iqp->q_notify != NULL) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
  }

  while (chIQIsEmptyI(iqp)) {
 80032de:	e00d      	b.n	80032fc <chIQGetTimeout+0x3c>
 80032e0:	e00c      	b.n	80032fc <chIQGetTimeout+0x3c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	f7ff fab2 	bl	8002850 <chThdEnqueueTimeoutS>
 80032ec:	60f8      	str	r0, [r7, #12]
    if (msg < Q_OK) {
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da03      	bge.n	80032fc <chIQGetTimeout+0x3c>
      chSysUnlock();
 80032f4:	f7ff fee4 	bl	80030c0 <chSysUnlock>
      return msg;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	e01e      	b.n	800333a <chIQGetTimeout+0x7a>
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff0f 	bl	8003120 <chIQIsEmptyI>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ec      	bne.n	80032e2 <chIQGetTimeout+0x22>
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	1e5a      	subs	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6191      	str	r1, [r2, #24]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	72fb      	strb	r3, [r7, #11]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d303      	bcc.n	8003334 <chIQGetTimeout+0x74>
    iqp->q_rdptr = iqp->q_buffer;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  chSysUnlock();
 8003334:	f7ff fec4 	bl	80030c0 <chSysUnlock>

  return (msg_t)b;
 8003338:	7afb      	ldrb	r3, [r7, #11]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	f3af 8000 	nop.w
 8003348:	f3af 8000 	nop.w
 800334c:	f3af 8000 	nop.w

08003350 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = iqp->q_notify;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	613b      	str	r3, [r7, #16]
  size_t r = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  chDbgCheck(n > 0U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <chIQReadTimeout+0x24>
 800336e:	4826      	ldr	r0, [pc, #152]	; (8003408 <chIQReadTimeout+0xb8>)
 8003370:	f7fe f9b6 	bl	80016e0 <chSysHalt>

  chSysLock();
 8003374:	f7ff fe94 	bl	80030a0 <chSysLock>
  while (true) {
    if (nfy != NULL) {
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <chIQReadTimeout+0x36>
      nfy(iqp);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	4798      	blx	r3
    }

    while (chIQIsEmptyI(iqp)) {
 8003384:	e00c      	b.n	80033a0 <chIQReadTimeout+0x50>
 8003386:	e00b      	b.n	80033a0 <chIQReadTimeout+0x50>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	f7ff fa5f 	bl	8002850 <chThdEnqueueTimeoutS>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <chIQReadTimeout+0x50>
        chSysUnlock();
 8003398:	f7ff fe92 	bl	80030c0 <chSysUnlock>
        return r;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	e02e      	b.n	80033fe <chIQReadTimeout+0xae>
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff febd 	bl	8003120 <chIQIsEmptyI>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ed      	bne.n	8003388 <chIQReadTimeout+0x38>
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
    *bp++ = *iqp->q_rdptr++;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	60ba      	str	r2, [r7, #8]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	6992      	ldr	r2, [r2, #24]
 80033c0:	1c50      	adds	r0, r2, #1
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	6188      	str	r0, [r1, #24]
 80033c6:	7812      	ldrb	r2, [r2, #0]
 80033c8:	701a      	strb	r2, [r3, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d303      	bcc.n	80033de <chIQReadTimeout+0x8e>
      iqp->q_rdptr = iqp->q_buffer;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	619a      	str	r2, [r3, #24]
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 80033de:	f7ff fe6f 	bl	80030c0 <chSysUnlock>

    r++;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
    if (--n == 0U) {
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <chIQReadTimeout+0xa8>
      return r;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	e002      	b.n	80033fe <chIQReadTimeout+0xae>
    }

    chSysLock();
 80033f8:	f7ff fe52 	bl	80030a0 <chSysLock>
  }
 80033fc:	e7bc      	b.n	8003378 <chIQReadTimeout+0x28>
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	08009680 	.word	0x08009680
 800340c:	f3af 8000 	nop.w

08003410 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]

  chThdQueueObjectInit(&oqp->q_waiting);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fe6d 	bl	8003100 <chThdQueueObjectInit>
  oqp->q_counter = size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	441a      	add	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w

08003460 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	460b      	mov	r3, r1
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	72fb      	strb	r3, [r7, #11]

  chSysLock();
 800346e:	f7ff fe17 	bl	80030a0 <chSysLock>
  while (chOQIsFullI(oqp)) {
 8003472:	e00c      	b.n	800348e <chOQPutTimeout+0x2e>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4618      	mov	r0, r3
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	f7ff f9e9 	bl	8002850 <chThdEnqueueTimeoutS>
 800347e:	6178      	str	r0, [r7, #20]
    if (msg < Q_OK) {
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	da03      	bge.n	800348e <chOQPutTimeout+0x2e>
      chSysUnlock();
 8003486:	f7ff fe1b 	bl	80030c0 <chSysUnlock>
      return msg;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	e026      	b.n	80034dc <chOQPutTimeout+0x7c>
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fe9e 	bl	80031d0 <chOQIsFullI>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ec      	bne.n	8003474 <chOQPutTimeout+0x14>
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	1c59      	adds	r1, r3, #1
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6151      	str	r1, [r2, #20]
 80034ae:	7afa      	ldrb	r2, [r7, #11]
 80034b0:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d303      	bcc.n	80034c6 <chOQPutTimeout+0x66>
    oqp->q_wrptr = oqp->q_buffer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	615a      	str	r2, [r3, #20]
  }

  if (oqp->q_notify != NULL) {
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <chOQPutTimeout+0x76>
    oqp->q_notify(oqp);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	4798      	blx	r3
  }
  chSysUnlock();
 80034d6:	f7ff fdf3 	bl	80030c0 <chSysUnlock>

  return Q_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	f3af 8000 	nop.w
 80034e8:	f3af 8000 	nop.w
 80034ec:	f3af 8000 	nop.w

080034f0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint8_t b;

  chDbgCheckClassI();
 80034f8:	f7fe fa4a 	bl	8001990 <chDbgCheckClassI>

  if (chOQIsEmptyI(oqp)) {
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fe47 	bl	8003190 <chOQIsEmptyI>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <chOQGetI+0x1e>
    return Q_EMPTY;
 8003508:	f06f 0302 	mvn.w	r3, #2
 800350c:	e01b      	b.n	8003546 <chOQGetI+0x56>
  }

  oqp->q_counter++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	1c59      	adds	r1, r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6191      	str	r1, [r2, #24]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	73fb      	strb	r3, [r7, #15]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	429a      	cmp	r2, r3
 8003530:	d303      	bcc.n	800353a <chOQGetI+0x4a>
    oqp->q_rdptr = oqp->q_buffer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	2100      	movs	r1, #0
 8003540:	f7ff f9a6 	bl	8002890 <chThdDequeueNextI>

  return (msg_t)b;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop

08003550 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = oqp->q_notify;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	613b      	str	r3, [r7, #16]
  size_t w = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  chDbgCheck(n > 0U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <chOQWriteTimeout+0x24>
 800356e:	4826      	ldr	r0, [pc, #152]	; (8003608 <chOQWriteTimeout+0xb8>)
 8003570:	f7fe f8b6 	bl	80016e0 <chSysHalt>

  chSysLock();
 8003574:	f7ff fd94 	bl	80030a0 <chSysLock>
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003578:	e00b      	b.n	8003592 <chOQWriteTimeout+0x42>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	f7ff f966 	bl	8002850 <chThdEnqueueTimeoutS>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <chOQWriteTimeout+0x42>
        chSysUnlock();
 800358a:	f7ff fd99 	bl	80030c0 <chSysUnlock>
        return w;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	e035      	b.n	80035fe <chOQWriteTimeout+0xae>

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff fe1c 	bl	80031d0 <chOQIsFullI>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ed      	bne.n	800357a <chOQWriteTimeout+0x2a>
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
    *oqp->q_wrptr++ = *bp++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	6151      	str	r1, [r2, #20]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	1c51      	adds	r1, r2, #1
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d303      	bcc.n	80035d0 <chOQWriteTimeout+0x80>
      oqp->q_wrptr = oqp->q_buffer;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	615a      	str	r2, [r3, #20]
    }

    if (nfy != NULL) {
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <chOQWriteTimeout+0x8c>
      nfy(oqp);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	4798      	blx	r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 80035dc:	f7ff fd70 	bl	80030c0 <chSysUnlock>

    w++;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
    if (--n == 0U) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <chOQWriteTimeout+0xa6>
      return w;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	e003      	b.n	80035fe <chOQWriteTimeout+0xae>
    }
    chSysLock();
 80035f6:	f7ff fd53 	bl	80030a0 <chSysLock>
  }
 80035fa:	bf00      	nop

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80035fc:	e7c9      	b.n	8003592 <chOQWriteTimeout+0x42>
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	08009690 	.word	0x08009690
 800360c:	f3af 8000 	nop.w

08003610 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	2320      	movs	r3, #32
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	f3af 8000 	nop.w

08003630 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	f3af 8000 	nop.w

08003650 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0

  port_lock();
 8003654:	f7ff ffdc 	bl	8003610 <port_lock>
  _stats_start_measure_crit_thd();
 8003658:	f7ff fa62 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800365c:	f7fe f8f8 	bl	8001850 <_dbg_check_lock>
}
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	f3af 8000 	nop.w
 8003668:	f3af 8000 	nop.w
 800366c:	f3af 8000 	nop.w

08003670 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 8003674:	f7fe f904 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003678:	f7ff fa5a 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <chSysUnlock+0x34>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <chSysUnlock+0x34>)
 8003682:	429a      	cmp	r2, r3
 8003684:	d00a      	beq.n	800369c <chSysUnlock+0x2c>
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <chSysUnlock+0x34>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <chSysUnlock+0x34>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d202      	bcs.n	800369c <chSysUnlock+0x2c>
 8003696:	4804      	ldr	r0, [pc, #16]	; (80036a8 <chSysUnlock+0x38>)
 8003698:	f7fe f822 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 800369c:	f7ff ffc8 	bl	8003630 <port_unlock>
}
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000800 	.word	0x20000800
 80036a8:	080096b0 	.word	0x080096b0
 80036ac:	f3af 8000 	nop.w

080036b0 <_core_init>:
/**
 * @brief   Low level memory manager initialization.
 *
 * @notapi
 */
void _core_init(void) {
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <_core_init+0x28>)
 80036b6:	3307      	adds	r3, #7
 80036b8:	f023 0307 	bic.w	r3, r3, #7
 80036bc:	461a      	mov	r2, r3
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <_core_init+0x2c>)
 80036c0:	601a      	str	r2, [r3, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <_core_init+0x30>)
 80036c4:	f023 0307 	bic.w	r3, r3, #7
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <_core_init+0x34>)
 80036cc:	601a      	str	r2, [r3, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20007c30 	.word	0x20007c30
 80036dc:	20000de8 	.word	0x20000de8
 80036e0:	20020000 	.word	0x20020000
 80036e4:	20000dec 	.word	0x20000dec
 80036e8:	f3af 8000 	nop.w
 80036ec:	f3af 8000 	nop.w

080036f0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  void *p;

  chSysLock();
 80036f8:	f7ff ffaa 	bl	8003650 <chSysLock>
  p = chCoreAllocI(size);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f80f 	bl	8003720 <chCoreAllocI>
 8003702:	60f8      	str	r0, [r7, #12]
  chSysUnlock();
 8003704:	f7ff ffb4 	bl	8003670 <chSysUnlock>

  return p;
 8003708:	68fb      	ldr	r3, [r7, #12]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	f3af 8000 	nop.w
 800371c:	f3af 8000 	nop.w

08003720 <chCoreAllocI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocI(size_t size) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  void *p;

  chDbgCheckClassI();
 8003728:	f7fe f932 	bl	8001990 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3307      	adds	r3, #7
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	607b      	str	r3, [r7, #4]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <chCoreAllocI+0x4c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <chCoreAllocI+0x50>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d201      	bcs.n	800374e <chCoreAllocI+0x2e>
  /*lint -restore*/
    return NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	e009      	b.n	8003762 <chCoreAllocI+0x42>
  }
  p = nextmem;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <chCoreAllocI+0x50>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
  nextmem += size;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <chCoreAllocI+0x50>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	441a      	add	r2, r3
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <chCoreAllocI+0x50>)
 800375e:	601a      	str	r2, [r3, #0]

  return p;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000dec 	.word	0x20000dec
 8003770:	20000de8 	.word	0x20000de8
 8003774:	f3af 8000 	nop.w
 8003778:	f3af 8000 	nop.w
 800377c:	f3af 8000 	nop.w

08003780 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0

  default_heap.h_provider = chCoreAlloc;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <_heap_init+0x20>)
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <_heap_init+0x24>)
 8003788:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <_heap_init+0x20>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <_heap_init+0x20>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8003796:	4804      	ldr	r0, [pc, #16]	; (80037a8 <_heap_init+0x28>)
 8003798:	f7ff fac2 	bl	8002d20 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.h_sem, (cnt_t)1);
#endif
}
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000df0 	.word	0x20000df0
 80037a4:	080036f1 	.word	0x080036f1
 80037a8:	20000e00 	.word	0x20000e00
 80037ac:	f3af 8000 	nop.w

080037b0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <chHeapAlloc+0x14>
    heapp = &default_heap;
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <chHeapAlloc+0xec>)
 80037c2:	607b      	str	r3, [r7, #4]
  }

  size = MEM_ALIGN_NEXT(size);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	3307      	adds	r3, #7
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	603b      	str	r3, [r7, #0]
  qp = &heapp->h_free;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3308      	adds	r3, #8
 80037d2:	617b      	str	r3, [r7, #20]

  H_LOCK(heapp);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3310      	adds	r3, #16
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fab9 	bl	8002d50 <chMtxLock>
  while (qp->h.u.next != NULL) {
 80037de:	e036      	b.n	800384e <chHeapAlloc+0x9e>
    hp = qp->h.u.next;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
    if (hp->h.size >= size) {
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d32c      	bcc.n	800384a <chHeapAlloc+0x9a>
      if (hp->h.size < (size + sizeof(union heap_header))) {
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d204      	bcs.n	8003806 <chHeapAlloc+0x56>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e016      	b.n	8003834 <chHeapAlloc+0x84>
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f1a3 0208 	sub.w	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]
        qp->h.u.next = fp;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]
        hp->h.size = size;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]
      }
      hp->h.u.heap = heapp;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
      H_UNLOCK(heapp);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3310      	adds	r3, #16
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fb16 	bl	8002e70 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)(hp + 1);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	3308      	adds	r3, #8
 8003848:	e024      	b.n	8003894 <chHeapAlloc+0xe4>
      /*lint -restore*/
    }
    qp = hp;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	617b      	str	r3, [r7, #20]

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1c4      	bne.n	80037e0 <chHeapAlloc+0x30>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3310      	adds	r3, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fb08 	bl	8002e70 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d014      	beq.n	8003892 <chHeapAlloc+0xe2>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	3208      	adds	r2, #8
 8003870:	4610      	mov	r0, r2
 8003872:	4798      	blx	r3
 8003874:	6138      	str	r0, [r7, #16]
    if (hp != NULL) {
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <chHeapAlloc+0xe2>
      hp->h.u.heap = heapp;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
      hp->h.size = size;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	605a      	str	r2, [r3, #4]
      hp++;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3308      	adds	r3, #8
 800388c:	613b      	str	r3, [r7, #16]

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)hp;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	e000      	b.n	8003894 <chHeapAlloc+0xe4>
      /*lint -restore*/
    }
  }

  return NULL;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000df0 	.word	0x20000df0

080038a0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	2320      	movs	r3, #32
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	f3af 8000 	nop.w

080038c0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	f3af 8000 	nop.w

080038e0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0

  port_lock();
 80038e4:	f7ff ffdc 	bl	80038a0 <port_lock>
}
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0

  port_unlock();
 80038f4:	f7ff ffe4 	bl	80038c0 <port_unlock>
}
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	f3af 8000 	nop.w

08003900 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003906:	f3ef 8309 	mrs	r3, PSP
 800390a:	461c      	mov	r4, r3
  return(result);
 800390c:	4623      	mov	r3, r4
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 800390e:	607b      	str	r3, [r7, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3320      	adds	r3, #32
 8003914:	607b      	str	r3, [r7, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 8003920:	f7ff ffe6 	bl	80038f0 <port_unlock_from_isr>
}
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	bf00      	nop
 800392c:	f3af 8000 	nop.w

08003930 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8003936:	f7ff ffd3 	bl	80038e0 <port_lock_from_isr>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <_port_irq_epilogue+0x5c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01d      	beq.n	8003982 <_port_irq_epilogue+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003946:	f3ef 8309 	mrs	r3, PSP
 800394a:	461c      	mov	r4, r3
  return(result);
 800394c:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 800394e:	607b      	str	r3, [r7, #4]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b20      	subs	r3, #32
 8003954:	607b      	str	r3, [r7, #4]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800395c:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003968:	f7fe fc32 	bl	80021d0 <chSchIsPreemptionRequired>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <_port_irq_epilogue+0x4a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <_port_irq_epilogue+0x60>)
 8003976:	619a      	str	r2, [r3, #24]
      ctxp->pc = (regarm_t)_port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 8003978:	e005      	b.n	8003986 <_port_irq_epilogue+0x56>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <_port_irq_epilogue+0x64>)
 800397e:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 8003980:	e001      	b.n	8003986 <_port_irq_epilogue+0x56>
  }
  port_unlock_from_isr();
 8003982:	f7ff ffb5 	bl	80038f0 <port_unlock_from_isr>
}
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	e000ed00 	.word	0xe000ed00
 8003990:	080002b9 	.word	0x080002b9
 8003994:	080002cc 	.word	0x080002cc
 8003998:	f3af 8000 	nop.w
 800399c:	f3af 8000 	nop.w

080039a0 <osalInit>:
/**
 * @brief   OSAL module initialization.
 *
 * @api
 */
static inline void osalInit(void) {
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0

}
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	f3af 8000 	nop.w

080039b0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 80039b4:	f7ff fff4 	bl	80039a0 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 80039b8:	f002 fd9a 	bl	80064f0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 80039bc:	4809      	ldr	r0, [pc, #36]	; (80039e4 <halInit+0x34>)
 80039be:	f003 ffbf 	bl	8007940 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 80039c2:	f000 f8e5 	bl	8003b90 <adcInit>
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
 80039c6:	f000 f95b 	bl	8003c80 <macInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80039ca:	f001 f899 	bl	8004b00 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
 80039ce:	f000 fd0f 	bl	80043f0 <sdcInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80039d2:	f001 f945 	bl	8004c60 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 80039d6:	f001 fc63 	bl	80052a0 <usbInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80039da:	f005 f991 	bl	8008d00 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80039de:	f001 f9af 	bl	8004d40 <stInit>
#endif
}
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	08009ae0 	.word	0x08009ae0
 80039e8:	f3af 8000 	nop.w
 80039ec:	f3af 8000 	nop.w

080039f0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d304      	bcc.n	8003a0e <_mmcsd_get_slice+0x1e>
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b1f      	cmp	r3, #31
 8003a0c:	d902      	bls.n	8003a14 <_mmcsd_get_slice+0x24>
 8003a0e:	481e      	ldr	r0, [pc, #120]	; (8003a88 <_mmcsd_get_slice+0x98>)
 8003a10:	f7fd fe66 	bl	80016e0 <chSysHalt>

  startidx = start / 32U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	61fb      	str	r3, [r7, #28]
  startoff = start % 32U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	61bb      	str	r3, [r7, #24]
  endidx   = end / 32U;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	617b      	str	r3, [r7, #20]
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	3301      	adds	r3, #1
 8003a30:	2201      	movs	r2, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	613b      	str	r3, [r7, #16]

  /* One or two pieces?*/
  if (startidx < endidx) {
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d214      	bcs.n	8003a6c <_mmcsd_get_slice+0x7c>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	40da      	lsrs	r2, r3
           ((data[endidx] & endmask) << (32U - startoff));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	440b      	add	r3, r1
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4019      	ands	r1, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f1c3 0320 	rsb	r3, r3, #32
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
  endidx   = end / 32U;
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;

  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	e009      	b.n	8003a80 <_mmcsd_get_slice+0x90>
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	401a      	ands	r2, r3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	080096c0 	.word	0x080096c0
 8003a8c:	f3af 8000 	nop.w

08003a90 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <_mmcsd_get_capacity+0x14>
 8003a9e:	481c      	ldr	r0, [pc, #112]	; (8003b10 <_mmcsd_get_capacity+0x80>)
 8003aa0:	f7fd fe1e 	bl	80016e0 <chSysHalt>

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	217f      	movs	r1, #127	; 0x7f
 8003aa8:	227e      	movs	r2, #126	; 0x7e
 8003aaa:	f7ff ffa1 	bl	80039f0 <_mmcsd_get_slice>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <_mmcsd_get_capacity+0x2e>
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d01e      	beq.n	8003af6 <_mmcsd_get_capacity+0x66>
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
  default:
    /* Reserved value detected.*/
    break;
 8003ab8:	bf00      	nop
  }
  return 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e023      	b.n	8003b06 <_mmcsd_get_capacity+0x76>
  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
  case 0:
    /* CSD version 1.0 */
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	2149      	movs	r1, #73	; 0x49
 8003ac2:	223e      	movs	r2, #62	; 0x3e
 8003ac4:	f7ff ff94 	bl	80039f0 <_mmcsd_get_slice>
 8003ac8:	6178      	str	r0, [r7, #20]
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	2131      	movs	r1, #49	; 0x31
 8003ace:	222f      	movs	r2, #47	; 0x2f
 8003ad0:	f7ff ff8e 	bl	80039f0 <_mmcsd_get_slice>
 8003ad4:	6138      	str	r0, [r7, #16]
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	2153      	movs	r1, #83	; 0x53
 8003ada:	2250      	movs	r2, #80	; 0x50
 8003adc:	f7ff ff88 	bl	80039f0 <_mmcsd_get_slice>
 8003ae0:	60f8      	str	r0, [r7, #12]
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b09      	subs	r3, #9
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	e007      	b.n	8003b06 <_mmcsd_get_capacity+0x76>
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	2145      	movs	r1, #69	; 0x45
 8003afa:	2230      	movs	r2, #48	; 0x30
 8003afc:	f7ff ff78 	bl	80039f0 <_mmcsd_get_slice>
 8003b00:	4603      	mov	r3, r0
 8003b02:	3301      	adds	r3, #1
 8003b04:	029b      	lsls	r3, r3, #10
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	080096e0 	.word	0x080096e0
 8003b14:	f3af 8000 	nop.w
 8003b18:	f3af 8000 	nop.w
 8003b1c:	f3af 8000 	nop.w

08003b20 <_mmcsd_get_capacity_ext>:
 *
 * @return              The card capacity.
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  osalDbgCheck(NULL != ext_csd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <_mmcsd_get_capacity_ext+0x14>
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <_mmcsd_get_capacity_ext+0x40>)
 8003b30:	f7fd fdd6 	bl	80016e0 <chSysHalt>

  return ((uint32_t)ext_csd[215] << 24U) +
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	33d7      	adds	r3, #215	; 0xd7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	061a      	lsls	r2, r3, #24
         ((uint32_t)ext_csd[214] << 16U) +
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	33d6      	adds	r3, #214	; 0xd6
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	041b      	lsls	r3, r3, #16
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 8003b44:	441a      	add	r2, r3
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	33d5      	adds	r3, #213	; 0xd5
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	021b      	lsls	r3, r3, #8
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8003b4e:	441a      	add	r2, r3
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	33d4      	adds	r3, #212	; 0xd4
 8003b54:	781b      	ldrb	r3, [r3, #0]
 */
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
 8003b56:	4413      	add	r3, r2
         ((uint32_t)ext_csd[214] << 16U) +
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	08009700 	.word	0x08009700
 8003b64:	f3af 8000 	nop.w
 8003b68:	f3af 8000 	nop.w
 8003b6c:	f3af 8000 	nop.w

08003b70 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff f8d1 	bl	8002d20 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	f3af 8000 	nop.w
 8003b88:	f3af 8000 	nop.w
 8003b8c:	f3af 8000 	nop.w

08003b90 <adcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void adcInit(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0

  adc_lld_init();
 8003b94:	f002 fe34 	bl	8006800 <adc_lld_init>
}
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w

08003ba0 <adcObjectInit>:
 *
 * @param[out] adcp     pointer to the @p ADCDriver object
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  adcp->state    = ADC_STOP;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
  adcp->config   = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
  adcp->samples  = NULL;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  adcp->depth    = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
  adcp->grpp     = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
#endif
#if ADC_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&adcp->mutex);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ffcd 	bl	8003b70 <osalMutexObjectInit>
#endif
#if defined(ADC_DRIVER_EXT_INIT_HOOK)
  ADC_DRIVER_EXT_INIT_HOOK(adcp);
#endif
}
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	f3af 8000 	nop.w

08003be0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  tqp->p_next = (thread_t *)tqp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]
}
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  queue_init(tqp);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ffe9 	bl	8003be0 <queue_init>
}
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f3af 8000 	nop.w
 8003c18:	f3af 8000 	nop.w
 8003c1c:	f3af 8000 	nop.w

08003c20 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  esp->es_next = (event_listener_t *)esp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	f3af 8000 	nop.w
 8003c3c:	f3af 8000 	nop.w

08003c40 <osalThreadQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  chThdQueueObjectInit(tqp);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffd9 	bl	8003c00 <chThdQueueObjectInit>
}
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	f3af 8000 	nop.w
 8003c58:	f3af 8000 	nop.w
 8003c5c:	f3af 8000 	nop.w

08003c60 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event flags object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  chEvtObjectInit(esp);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffd9 	bl	8003c20 <chEvtObjectInit>
}
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	f3af 8000 	nop.w
 8003c78:	f3af 8000 	nop.w
 8003c7c:	f3af 8000 	nop.w

08003c80 <macInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void macInit(void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0

  mac_lld_init();
 8003c84:	f002 ff6c 	bl	8006b60 <mac_lld_init>
}
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <macObjectInit>:
 *
 * @param[out] macp     pointer to the @p MACDriver object
 *
 * @init
 */
void macObjectInit(MACDriver *macp) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  macp->state  = MAC_STOP;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
  macp->config = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
  osalThreadQueueObjectInit(&macp->tdqueue);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ffc9 	bl	8003c40 <osalThreadQueueObjectInit>
  osalThreadQueueObjectInit(&macp->rdqueue);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3310      	adds	r3, #16
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ffc4 	bl	8003c40 <osalThreadQueueObjectInit>
#if MAC_USE_EVENTS == TRUE
  osalEventObjectInit(&macp->rdevent);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3318      	adds	r3, #24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ffcf 	bl	8003c60 <osalEventObjectInit>
#endif
}
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	f3af 8000 	nop.w
 8003ccc:	f3af 8000 	nop.w

08003cd0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	f3af 8000 	nop.w

08003cf0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w

08003d10 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0

  port_lock();
 8003d14:	f7ff ffdc 	bl	8003cd0 <port_lock>
  _stats_start_measure_crit_thd();
 8003d18:	f7fe ff02 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8003d1c:	f7fd fd98 	bl	8001850 <_dbg_check_lock>
}
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	f3af 8000 	nop.w
 8003d28:	f3af 8000 	nop.w
 8003d2c:	f3af 8000 	nop.w

08003d30 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 8003d34:	f7fd fda4 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8003d38:	f7fe fefa 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <chSysUnlock+0x34>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <chSysUnlock+0x34>)
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d00a      	beq.n	8003d5c <chSysUnlock+0x2c>
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <chSysUnlock+0x34>)
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <chSysUnlock+0x34>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d202      	bcs.n	8003d5c <chSysUnlock+0x2c>
 8003d56:	4804      	ldr	r0, [pc, #16]	; (8003d68 <chSysUnlock+0x38>)
 8003d58:	f7fd fcc2 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 8003d5c:	f7ff ffc8 	bl	8003cf0 <port_unlock>
}
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000800 	.word	0x20000800
 8003d68:	080097a0 	.word	0x080097a0
 8003d6c:	f3af 8000 	nop.w

08003d70 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0

  chSysLock();
 8003d74:	f7ff ffcc 	bl	8003d10 <chSysLock>
}
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w

08003d80 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0

  chSysUnlock();
 8003d84:	f7ff ffd4 	bl	8003d30 <chSysUnlock>
}
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	f3af 8000 	nop.w

08003d90 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  chThdSleep(time);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fe fca9 	bl	80026f0 <chThdSleep>
}
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	f3af 8000 	nop.w
 8003da8:	f3af 8000 	nop.w
 8003dac:	f3af 8000 	nop.w

08003db0 <mode_detect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mode_detect(SDCDriver *sdcp) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t resp[1];

  /* V2.0 cards detection.*/
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	2108      	movs	r1, #8
 8003dc0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003dc4:	f003 fb34 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01b      	beq.n	8003e0c <mode_detect+0x5c>
                                  MMCSD_CMD8_PATTERN, resp)) {
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d001      	beq.n	8003dea <mode_detect+0x3a>
      return HAL_FAILED;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e02c      	b.n	8003e44 <mode_detect+0x94>
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	2137      	movs	r1, #55	; 0x37
 8003df2:	2200      	movs	r2, #0
 8003df4:	f003 fb1c 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <mode_detect+0x58>
        MMCSD_R1_ERROR(resp[0])) {
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <mode_detect+0x9c>)
 8003e02:	4013      	ands	r3, r2
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
    /* Voltage verification.*/
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
      return HAL_FAILED;
    }
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01c      	beq.n	8003e42 <mode_detect+0x92>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01b      	b.n	8003e44 <mode_detect+0x94>
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	2137      	movs	r1, #55	; 0x37
 8003e14:	2200      	movs	r2, #0
 8003e16:	f003 fb0b 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <mode_detect+0x7a>
        MMCSD_R1_ERROR(resp[0])) {
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <mode_detect+0x9c>)
 8003e24:	4013      	ands	r3, r2
      return HAL_FAILED;
    }
  }
  else {
    /* MMC or SD V1.1 detection.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <mode_detect+0x82>
        MMCSD_R1_ERROR(resp[0])) {
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e30:	e007      	b.n	8003e42 <mode_detect+0x92>
    }
    else {
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    
      /* Reset error flag illegal command.*/
      sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f003 fa8f 	bl	8007360 <sdc_lld_send_cmd_none>
    }
  }

  return HAL_SUCCESS;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	fdffe008 	.word	0xfdffe008

08003e50 <mmc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_init(SDCDriver *sdcp) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t ocr;
  unsigned i;
  uint32_t resp[1];

  ocr = 0xC0FF8000U;
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <mmc_init+0x6c>)
 8003e5a:	613b      	str	r3, [r7, #16]
  i = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  while (true) {
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_INIT, ocr, resp)) {
 8003e60:	f107 030c 	add.w	r3, r7, #12
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	2101      	movs	r1, #1
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	f003 faa1 	bl	80073b0 <sdc_lld_send_cmd_short>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <mmc_init+0x28>
      return HAL_FAILED;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e01c      	b.n	8003eb2 <mmc_init+0x62>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da0c      	bge.n	8003e98 <mmc_init+0x48>
      if ((resp[0] & 0x40000000U) != 0U) {
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d006      	beq.n	8003e96 <mmc_init+0x46>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f043 0210 	orr.w	r2, r3, #16
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
      }
      break;
 8003e94:	e00c      	b.n	8003eb0 <mmc_init+0x60>
 8003e96:	e00b      	b.n	8003eb0 <mmc_init+0x60>
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b63      	cmp	r3, #99	; 0x63
 8003ea2:	d901      	bls.n	8003ea8 <mmc_init+0x58>
      return HAL_FAILED;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e004      	b.n	8003eb2 <mmc_init+0x62>
    }
    osalThreadSleepMilliseconds(10);
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	f7ff ff71 	bl	8003d90 <osalThreadSleep>
  }
 8003eae:	e7d7      	b.n	8003e60 <mmc_init+0x10>

  return HAL_SUCCESS;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	c0ff8000 	.word	0xc0ff8000

08003ec0 <sdc_init>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_init(SDCDriver *sdcp) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  unsigned i;
  uint32_t ocr;
  uint32_t resp[1];

  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_SDV20) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <sdc_init+0x1a>
    ocr = 0xC0100000U;
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <sdc_init+0xa0>)
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e001      	b.n	8003ede <sdc_init+0x1e>
  }
  else {
    ocr = 0x80100000U;
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <sdc_init+0xa4>)
 8003edc:	613b      	str	r3, [r7, #16]
  }

  i = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003ee2:	f107 030c 	add.w	r3, r7, #12
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	2137      	movs	r1, #55	; 0x37
 8003eea:	2200      	movs	r2, #0
 8003eec:	f003 faa0 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <sdc_init+0x40>
        MMCSD_R1_ERROR(resp[0])) {
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <sdc_init+0xa8>)
 8003efa:	4013      	ands	r3, r2
    ocr = 0x80100000U;
  }

  i = 0;
  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <sdc_init+0x44>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e028      	b.n	8003f56 <sdc_init+0x96>
    }
    if (sdc_lld_send_cmd_short(sdcp, MMCSD_CMD_APP_OP_COND, ocr, resp)) {
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	2129      	movs	r1, #41	; 0x29
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	f003 fa4f 	bl	80073b0 <sdc_lld_send_cmd_short>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <sdc_init+0x5c>
      return HAL_FAILED;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e01c      	b.n	8003f56 <sdc_init+0x96>
    }
    if ((resp[0] & 0x80000000U) != 0U) {
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	da0c      	bge.n	8003f3c <sdc_init+0x7c>
      if ((resp[0] & 0x40000000U) != 0U) {
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <sdc_init+0x7a>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f043 0210 	orr.w	r2, r3, #16
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
      }
      break;
 8003f38:	e00c      	b.n	8003f54 <sdc_init+0x94>
 8003f3a:	e00b      	b.n	8003f54 <sdc_init+0x94>
    }
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b63      	cmp	r3, #99	; 0x63
 8003f46:	d901      	bls.n	8003f4c <sdc_init+0x8c>
      return HAL_FAILED;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e004      	b.n	8003f56 <sdc_init+0x96>
    }
    osalThreadSleepMilliseconds(10);
 8003f4c:	2064      	movs	r0, #100	; 0x64
 8003f4e:	f7ff ff1f 	bl	8003d90 <osalThreadSleep>
  }
 8003f52:	e7c6      	b.n	8003ee2 <sdc_init+0x22>

  return HAL_SUCCESS;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	c0100000 	.word	0xc0100000
 8003f64:	80100000 	.word	0x80100000
 8003f68:	fdffe008 	.word	0xfdffe008
 8003f6c:	f3af 8000 	nop.w

08003f70 <mmc_cmd6_construct>:
 * @return              CMD6 argument.
 *
 * @notapi
 */
static uint32_t mmc_cmd6_construct(mmc_switch_t access, uint32_t idx,
                                   uint32_t value, uint32_t cmd_set) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]

  osalDbgAssert(idx <= 191U, "This field is not writable");
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2bbf      	cmp	r3, #191	; 0xbf
 8003f84:	d902      	bls.n	8003f8c <mmc_cmd6_construct+0x1c>
 8003f86:	480b      	ldr	r0, [pc, #44]	; (8003fb4 <mmc_cmd6_construct+0x44>)
 8003f88:	f7fd fbaa 	bl	80016e0 <chSysHalt>
  osalDbgAssert(cmd_set < 8U, "This field has only 3 bits");
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b07      	cmp	r3, #7
 8003f90:	d902      	bls.n	8003f98 <mmc_cmd6_construct+0x28>
 8003f92:	4808      	ldr	r0, [pc, #32]	; (8003fb4 <mmc_cmd6_construct+0x44>)
 8003f94:	f7fd fba4 	bl	80016e0 <chSysHalt>

  return ((uint32_t)access << 24U) | (idx << 16U) | (value << 8U) | cmd_set;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	061a      	lsls	r2, r3, #24
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08009740 	.word	0x08009740
 8003fb8:	f3af 8000 	nop.w
 8003fbc:	f3af 8000 	nop.w

08003fc0 <sdc_cmd6_construct>:
 *
 * @notapi
 */
static uint32_t sdc_cmd6_construct(sd_switch_t mode,
                                   sd_switch_function_t function,
                                   uint32_t value) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	603a      	str	r2, [r7, #0]
 8003fca:	4602      	mov	r2, r0
 8003fcc:	71fa      	strb	r2, [r7, #7]
 8003fce:	71bb      	strb	r3, [r7, #6]
  uint32_t ret = 0xFFFFFF;
 8003fd0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003fd4:	60fb      	str	r3, [r7, #12]

  osalDbgAssert((value < 16U), "This field has only 4 bits");
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b0f      	cmp	r3, #15
 8003fda:	d902      	bls.n	8003fe2 <sdc_cmd6_construct+0x22>
 8003fdc:	480d      	ldr	r0, [pc, #52]	; (8004014 <sdc_cmd6_construct+0x54>)
 8003fde:	f7fd fb7f 	bl	80016e0 <chSysHalt>

  ret &= ~((uint32_t)0xFU << ((uint32_t)function * 4U));
 8003fe2:	79bb      	ldrb	r3, [r7, #6]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  ret |= value << ((uint32_t)function * 4U);
 8003ff4:	79bb      	ldrb	r3, [r7, #6]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  return ret | ((uint32_t)mode << 31U);
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	07da      	lsls	r2, r3, #31
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4313      	orrs	r3, r2
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08009760 	.word	0x08009760
 8004018:	f3af 8000 	nop.w
 800401c:	f3af 8000 	nop.w

08004020 <sdc_cmd6_extract_info>:
 * @return              extracted answer.
 *
 * @notapi
 */
static uint16_t sdc_cmd6_extract_info(sd_switch_function_t function,
                                      const uint8_t *buf) {
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	71fb      	strb	r3, [r7, #7]

  unsigned start = 12U - ((unsigned)function * 2U);
 800402c:	79fa      	ldrb	r2, [r7, #7]
 800402e:	4613      	mov	r3, r2
 8004030:	07db      	lsls	r3, r3, #31
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	330c      	adds	r3, #12
 8004038:	60fb      	str	r3, [r7, #12]

  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	440b      	add	r3, r1
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4313      	orrs	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	b29b      	uxth	r3, r3
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	f3af 8000 	nop.w
 8004068:	f3af 8000 	nop.w
 800406c:	f3af 8000 	nop.w

08004070 <sdc_cmd6_check_status>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_cmd6_check_status(sd_switch_function_t function,
                                 const uint8_t *buf) {
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	330e      	adds	r3, #14
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	041a      	lsls	r2, r3, #16
        ((uint32_t)buf[15] << 8U) |
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	330f      	adds	r3, #15
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	021b      	lsls	r3, r3, #8
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 800408c:	431a      	orrs	r2, r3
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3310      	adds	r3, #16
 8004092:	781b      	ldrb	r3, [r3, #0]
                                 const uint8_t *buf) {

  uint32_t tmp;
  uint32_t status;

  tmp = ((uint32_t)buf[14] << 16U) |
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
        ((uint32_t)buf[15] << 8U) |
        (uint32_t)buf[16];
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	60bb      	str	r3, [r7, #8]
  if (0xFU != status) {
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	d001      	beq.n	80040b2 <sdc_cmd6_check_status+0x42>
    return HAL_SUCCESS;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <sdc_cmd6_check_status+0x44>
  }
  return HAL_FAILED;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <sdc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80040c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	4669      	mov	r1, sp
 80040cc:	460e      	mov	r6, r1
  uint32_t cmdarg;
  const size_t N = 64;
 80040ce:	2140      	movs	r1, #64	; 0x40
 80040d0:	6179      	str	r1, [r7, #20]
  uint8_t tmp[N];
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	3901      	subs	r1, #1
 80040d6:	6139      	str	r1, [r7, #16]
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	4608      	mov	r0, r1
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	00cd      	lsls	r5, r1, #3
 80040e2:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 80040e6:	00c4      	lsls	r4, r0, #3
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	4608      	mov	r0, r1
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	00cb      	lsls	r3, r1, #3
 80040f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80040f6:	00c2      	lsls	r2, r0, #3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3307      	adds	r3, #7
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	ebad 0d03 	sub.w	sp, sp, r3
 8004104:	ab02      	add	r3, sp, #8
 8004106:	3300      	adds	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]

  /* Looks like only "high capacity" cards produce meaningful results during
     this clock detection procedure.*/
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3318      	adds	r3, #24
 8004114:	4618      	mov	r0, r3
 8004116:	217f      	movs	r1, #127	; 0x7f
 8004118:	227e      	movs	r2, #126	; 0x7e
 800411a:	f7ff fc69 	bl	80039f0 <_mmcsd_get_slice>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <sdc_detect_bus_clk+0x6e>
    *clk = SDC_CLK_25MHz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    return HAL_SUCCESS;
 800412a:	2300      	movs	r3, #0
 800412c:	e03e      	b.n	80041ac <sdc_detect_bus_clk+0xec>
  }

  /* Read switch functions' register.*/
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4619      	mov	r1, r3
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	2306      	movs	r3, #6
 800413c:	f003 fa08 	bl	8007550 <sdc_lld_read_special>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <sdc_detect_bus_clk+0x8a>
    return HAL_FAILED;
 8004146:	2301      	movs	r3, #1
 8004148:	e030      	b.n	80041ac <sdc_detect_bus_clk+0xec>
  }

  /* Check card capabilities parsing acquired data.*/
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2000      	movs	r0, #0
 800414e:	4619      	mov	r1, r3
 8004150:	f7ff ff66 	bl	8004020 <sdc_cmd6_extract_info>
 8004154:	4603      	mov	r3, r0
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d025      	beq.n	80041aa <sdc_detect_bus_clk+0xea>
    /* Construct command to set the bus speed.*/
    cmdarg = sdc_cmd6_construct(SD_SWITCH_SET, SD_SWITCH_FUNCTION_SPEED, 1);
 800415e:	2001      	movs	r0, #1
 8004160:	2100      	movs	r1, #0
 8004162:	2201      	movs	r2, #1
 8004164:	f7ff ff2c 	bl	8003fc0 <sdc_cmd6_construct>
 8004168:	60b8      	str	r0, [r7, #8]

    /* Write constructed command and read operation status in single call.*/
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	9200      	str	r2, [sp, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4619      	mov	r1, r3
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	2306      	movs	r3, #6
 8004178:	f003 f9ea 	bl	8007550 <sdc_lld_read_special>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <sdc_detect_bus_clk+0xc6>
      return HAL_FAILED;
 8004182:	2301      	movs	r3, #1
 8004184:	e012      	b.n	80041ac <sdc_detect_bus_clk+0xec>
    }

    /* Check card answer for success status bits.*/
    if (HAL_SUCCESS == sdc_cmd6_check_status(SD_SWITCH_FUNCTION_SPEED, tmp)) {
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2000      	movs	r0, #0
 800418a:	4619      	mov	r1, r3
 800418c:	f7ff ff70 	bl	8004070 <sdc_cmd6_check_status>
 8004190:	4603      	mov	r3, r0
 8004192:	f083 0301 	eor.w	r3, r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <sdc_detect_bus_clk+0xe4>
      *clk = SDC_CLK_50MHz;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	e002      	b.n	80041aa <sdc_detect_bus_clk+0xea>
    }
    else {
      *clk = SDC_CLK_25MHz;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return HAL_SUCCESS;
 80041aa:	2300      	movs	r3, #0
 80041ac:	46b5      	mov	sp, r6
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	f3af 8000 	nop.w
 80041bc:	f3af 8000 	nop.w

080041c0 <mmc_detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t cmdarg;
  uint32_t resp[1];
  uint8_t *scratchpad = sdcp->config->scratchpad;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]

  /* Safe default.*/
  *clk = SDC_CLK_25MHz;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]

  /* Use safe default when there is no space for data.*/
  if (NULL == scratchpad) {
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <mmc_detect_bus_clk+0x22>
    return HAL_SUCCESS;
 80041de:	2300      	movs	r3, #0
 80041e0:	e01c      	b.n	800421c <mmc_detect_bus_clk+0x5c>
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
 80041e2:	2003      	movs	r0, #3
 80041e4:	21b9      	movs	r1, #185	; 0xb9
 80041e6:	2201      	movs	r2, #1
 80041e8:	2300      	movs	r3, #0
 80041ea:	f7ff fec1 	bl	8003f70 <mmc_cmd6_construct>
 80041ee:	6138      	str	r0, [r7, #16]
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	2106      	movs	r1, #6
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	f003 f919 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80041fe:	4603      	mov	r3, r0
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <mmc_detect_bus_clk+0x5a>
                                   MMCSD_R1_ERROR(resp[0]))) {
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <mmc_detect_bus_clk+0x64>)
 800420e:	4013      	ands	r3, r2
  if (NULL == scratchpad) {
    return HAL_SUCCESS;
  }

  cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 185, 1, 0);
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <mmc_detect_bus_clk+0x5a>
                                   MMCSD_R1_ERROR(resp[0]))) {
    *clk = SDC_CLK_50MHz;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
  }

  return HAL_SUCCESS;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	fdffe008 	.word	0xfdffe008
 8004228:	f3af 8000 	nop.w
 800422c:	f3af 8000 	nop.w

08004230 <detect_bus_clk>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]

  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	2b02      	cmp	r3, #2
 8004244:	d105      	bne.n	8004252 <detect_bus_clk+0x22>
    return mmc_detect_bus_clk(sdcp, clk);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	f7ff ffb9 	bl	80041c0 <mmc_detect_bus_clk>
 800424e:	4603      	mov	r3, r0
 8004250:	e004      	b.n	800425c <detect_bus_clk+0x2c>
  }
  return sdc_detect_bus_clk(sdcp, clk);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	f7ff ff33 	bl	80040c0 <sdc_detect_bus_clk>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	f3af 8000 	nop.w
 8004268:	f3af 8000 	nop.w
 800426c:	f3af 8000 	nop.w

08004270 <sdc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_set_bus_width(SDCDriver *sdcp) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t resp[1];

  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <sdc_set_bus_width+0x16>
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 8004282:	2300      	movs	r3, #0
 8004284:	e02e      	b.n	80042e4 <sdc_set_bus_width+0x74>
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	791b      	ldrb	r3, [r3, #4]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d126      	bne.n	80042de <sdc_set_bus_width+0x6e>
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	2101      	movs	r1, #1
 8004294:	f003 f834 	bl	8007300 <sdc_lld_set_bus_mode>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	2137      	movs	r1, #55	; 0x37
 80042a4:	f003 f8c4 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <sdc_set_bus_width+0x48>
        MMCSD_R1_ERROR(resp[0])) {
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <sdc_set_bus_width+0x7c>)
 80042b2:	4013      	ands	r3, r2
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
  }
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
    sdc_lld_set_bus_mode(sdcp, SDC_MODE_4BIT);
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <sdc_set_bus_width+0x4c>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e013      	b.n	80042e4 <sdc_set_bus_width+0x74>
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	2106      	movs	r1, #6
 80042c4:	2202      	movs	r2, #2
 80042c6:	f003 f8b3 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <sdc_set_bus_width+0x6a>
        MMCSD_R1_ERROR(resp[0])) {
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <sdc_set_bus_width+0x7c>)
 80042d4:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
    }

    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <sdc_set_bus_width+0x72>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 80042da:	2301      	movs	r3, #1
 80042dc:	e002      	b.n	80042e4 <sdc_set_bus_width+0x74>
    }
  }
  else {
    /* SD card does not support 8bit bus.*/
    return HAL_FAILED;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <sdc_set_bus_width+0x74>
  }

  return HAL_SUCCESS;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	fdffe008 	.word	0xfdffe008

080042f0 <mmc_set_bus_width>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool mmc_set_bus_width(SDCDriver *sdcp) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t resp[1];
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 80042f8:	2003      	movs	r0, #3
 80042fa:	21b7      	movs	r1, #183	; 0xb7
 80042fc:	2200      	movs	r2, #0
 80042fe:	2300      	movs	r3, #0
 8004300:	f7ff fe36 	bl	8003f70 <mmc_cmd6_construct>
 8004304:	60f8      	str	r0, [r7, #12]

  switch(sdcp->config->bus_width){
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	791b      	ldrb	r3, [r3, #4]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d005      	beq.n	800431c <mmc_set_bus_width+0x2c>
 8004310:	2b02      	cmp	r3, #2
 8004312:	d00b      	beq.n	800432c <mmc_set_bus_width+0x3c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d111      	bne.n	800433c <mmc_set_bus_width+0x4c>
  case SDC_MODE_1BIT:
    /* Nothing to do. Bus is already in 1bit mode.*/
    return HAL_SUCCESS;
 8004318:	2300      	movs	r3, #0
 800431a:	e02c      	b.n	8004376 <mmc_set_bus_width+0x86>
  case SDC_MODE_4BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 800431c:	2003      	movs	r0, #3
 800431e:	21b7      	movs	r1, #183	; 0xb7
 8004320:	2201      	movs	r2, #1
 8004322:	2300      	movs	r3, #0
 8004324:	f7ff fe24 	bl	8003f70 <mmc_cmd6_construct>
 8004328:	60f8      	str	r0, [r7, #12]
    break;
 800432a:	e00b      	b.n	8004344 <mmc_set_bus_width+0x54>
  case SDC_MODE_8BIT:
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 800432c:	2003      	movs	r0, #3
 800432e:	21b7      	movs	r1, #183	; 0xb7
 8004330:	2202      	movs	r2, #2
 8004332:	2300      	movs	r3, #0
 8004334:	f7ff fe1c 	bl	8003f70 <mmc_cmd6_construct>
 8004338:	60f8      	str	r0, [r7, #12]
    break;
 800433a:	e003      	b.n	8004344 <mmc_set_bus_width+0x54>
  default:
    osalDbgAssert(false, "unexpected case");
 800433c:	4810      	ldr	r0, [pc, #64]	; (8004380 <mmc_set_bus_width+0x90>)
 800433e:	f7fd f9cf 	bl	80016e0 <chSysHalt>
    break;
 8004342:	bf00      	nop
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	f002 ffd7 	bl	8007300 <sdc_lld_set_bus_mode>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	2106      	movs	r1, #6
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	f003 f868 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <mmc_set_bus_width+0x80>
      MMCSD_R1_ERROR(resp[0])) {
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <mmc_set_bus_width+0x94>)
 800436a:	4013      	ands	r3, r2
    osalDbgAssert(false, "unexpected case");
    break;
  }

  sdc_lld_set_bus_mode(sdcp, sdcp->config->bus_width);
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <mmc_set_bus_width+0x84>
      MMCSD_R1_ERROR(resp[0])) {
    return HAL_FAILED;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <mmc_set_bus_width+0x86>
  }

  return HAL_SUCCESS;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	08009780 	.word	0x08009780
 8004384:	fdffe008 	.word	0xfdffe008
 8004388:	f3af 8000 	nop.w
 800438c:	f3af 8000 	nop.w

08004390 <_sdc_wait_for_transfer_state>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	210d      	movs	r1, #13
 80043a4:	f003 f844 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <_sdc_wait_for_transfer_state+0x28>
                                   sdcp->rca, resp) ||
        MMCSD_R1_ERROR(resp[0])) {
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <_sdc_wait_for_transfer_state+0x58>)
 80043b2:	4013      	ands	r3, r2
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
  uint32_t resp[1];

  while (true) {
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
                                   sdcp->rca, resp) ||
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <_sdc_wait_for_transfer_state+0x2c>
        MMCSD_R1_ERROR(resp[0])) {
      return HAL_FAILED;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e011      	b.n	80043e0 <_sdc_wait_for_transfer_state+0x50>
    }

    switch (MMCSD_R1_STS(resp[0])) {
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d004      	beq.n	80043d2 <_sdc_wait_for_transfer_state+0x42>
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d308      	bcc.n	80043de <_sdc_wait_for_transfer_state+0x4e>
 80043cc:	2b07      	cmp	r3, #7
 80043ce:	d806      	bhi.n	80043de <_sdc_wait_for_transfer_state+0x4e>
 80043d0:	e001      	b.n	80043d6 <_sdc_wait_for_transfer_state+0x46>
    case MMCSD_STS_TRAN:
      return HAL_SUCCESS;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e004      	b.n	80043e0 <_sdc_wait_for_transfer_state+0x50>
    case MMCSD_STS_DATA:
    case MMCSD_STS_RCV:
    case MMCSD_STS_PRG:
#if SDC_NICE_WAITING == TRUE
      osalThreadSleepMilliseconds(1);
 80043d6:	200a      	movs	r0, #10
 80043d8:	f7ff fcda 	bl	8003d90 <osalThreadSleep>
    default:
      /* The card should have been initialized so any other state is not
         valid and is reported as an error.*/
      return HAL_FAILED;
    }
  }
 80043dc:	e7dc      	b.n	8004398 <_sdc_wait_for_transfer_state+0x8>
#endif
      continue;
    default:
      /* The card should have been initialized so any other state is not
         valid and is reported as an error.*/
      return HAL_FAILED;
 80043de:	2301      	movs	r3, #1
    }
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	fdffe008 	.word	0xfdffe008
 80043ec:	f3af 8000 	nop.w

080043f0 <sdcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdcInit(void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0

  sdc_lld_init();
 80043f4:	f002 ff1c 	bl	8007230 <sdc_lld_init>
}
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w

08004400 <sdcObjectInit>:
 *
 * @param[out] sdcp     pointer to the @p SDCDriver object
 *
 * @init
 */
void sdcObjectInit(SDCDriver *sdcp) {
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  sdcp->vmt      = &sdc_vmt;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <sdcObjectInit+0x30>)
 800440c:	601a      	str	r2, [r3, #0]
  sdcp->state    = BLK_STOP;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	711a      	strb	r2, [r3, #4]
  sdcp->errors   = SDC_NO_ERROR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	635a      	str	r2, [r3, #52]	; 0x34
  sdcp->config   = NULL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c
  sdcp->capacity = 0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	08009720 	.word	0x08009720
 8004434:	f3af 8000 	nop.w
 8004438:	f3af 8000 	nop.w
 800443c:	f3af 8000 	nop.w

08004440 <sdcConnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcConnect(SDCDriver *sdcp) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t resp[1];
  sdcbusclk_t clk = SDC_CLK_25MHz;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]

  osalDbgCheck(sdcp != NULL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <sdcConnect+0x18>
 8004452:	4873      	ldr	r0, [pc, #460]	; (8004620 <sdcConnect+0x1e0>)
 8004454:	f7fd f944 	bl	80016e0 <chSysHalt>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	791b      	ldrb	r3, [r3, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d006      	beq.n	800446e <sdcConnect+0x2e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	791b      	ldrb	r3, [r3, #4]
 8004464:	2b05      	cmp	r3, #5
 8004466:	d002      	beq.n	800446e <sdcConnect+0x2e>
 8004468:	486d      	ldr	r0, [pc, #436]	; (8004620 <sdcConnect+0x1e0>)
 800446a:	f7fd f939 	bl	80016e0 <chSysHalt>
                "invalid state");

  /* Connection procedure in progress.*/
  sdcp->state = BLK_CONNECTING;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	711a      	strb	r2, [r3, #4]

  /* Card clock initialization.*/
  sdc_lld_start_clk(sdcp);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f002 fef3 	bl	8007260 <sdc_lld_start_clk>

  /* Enforces the initial card state.*/
  sdc_lld_send_cmd_none(sdcp, MMCSD_CMD_GO_IDLE_STATE, 0);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	2200      	movs	r2, #0
 8004480:	f002 ff6e 	bl	8007360 <sdc_lld_send_cmd_none>

  /* Detect card type.*/
  if (HAL_FAILED == mode_detect(sdcp)) {
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fc93 	bl	8003db0 <mode_detect>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d000      	beq.n	8004492 <sdcConnect+0x52>
    goto failed;
 8004490:	e0bb      	b.n	800460a <sdcConnect+0x1ca>
  }

  /* Perform specific initialization procedure.*/
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	2b02      	cmp	r3, #2
 800449c:	d106      	bne.n	80044ac <sdcConnect+0x6c>
    if (HAL_FAILED == mmc_init(sdcp)) {
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fcd6 	bl	8003e50 <mmc_init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <sdcConnect+0x7a>
      goto failed;
 80044aa:	e0ae      	b.n	800460a <sdcConnect+0x1ca>
    }
  }
  else {
    if (HAL_FAILED == sdc_init(sdcp)) {
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fd07 	bl	8003ec0 <sdc_init>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d000      	beq.n	80044ba <sdcConnect+0x7a>
      goto failed;
 80044b8:	e0a7      	b.n	800460a <sdcConnect+0x1ca>
    }
  }

  /* Reads CID.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3308      	adds	r3, #8
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	2102      	movs	r1, #2
 80044c2:	2200      	movs	r2, #0
 80044c4:	f002 fff4 	bl	80074b0 <sdc_lld_send_cmd_long_crc>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d000      	beq.n	80044d0 <sdcConnect+0x90>
    goto failed;
 80044ce:	e09c      	b.n	800460a <sdcConnect+0x1ca>
  }

  /* Asks for the RCA.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3338      	adds	r3, #56	; 0x38
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	2103      	movs	r1, #3
 80044d8:	2200      	movs	r2, #0
 80044da:	f002 ffa9 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d000      	beq.n	80044e6 <sdcConnect+0xa6>
                                 0, &sdcp->rca)) {
    goto failed;
 80044e4:	e091      	b.n	800460a <sdcConnect+0x1ca>
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                                sdcp->rca, sdcp->csd)) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3318      	adds	r3, #24
                                 0, &sdcp->rca)) {
    goto failed;
  }

  /* Reads CSD.*/
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	2109      	movs	r1, #9
 80044f2:	f002 ffdd 	bl	80074b0 <sdc_lld_send_cmd_long_crc>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d000      	beq.n	80044fe <sdcConnect+0xbe>
                                sdcp->rca, sdcp->csd)) {
    goto failed;
 80044fc:	e085      	b.n	800460a <sdcConnect+0x1ca>
  }

  /* Selects the card for operations.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004502:	f107 0310 	add.w	r3, r7, #16
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	2107      	movs	r1, #7
 800450a:	f002 ff91 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d000      	beq.n	8004516 <sdcConnect+0xd6>
                                 sdcp->rca, resp)) {
    goto failed;
 8004514:	e079      	b.n	800460a <sdcConnect+0x1ca>
  }

  /* Switches to high speed.*/
  if (HAL_SUCCESS != detect_bus_clk(sdcp, &clk)) {
 8004516:	f107 030f 	add.w	r3, r7, #15
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4619      	mov	r1, r3
 800451e:	f7ff fe87 	bl	8004230 <detect_bus_clk>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d000      	beq.n	800452a <sdcConnect+0xea>
    goto failed;
 8004528:	e06f      	b.n	800460a <sdcConnect+0x1ca>
  }
  sdc_lld_set_data_clk(sdcp, clk);
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4619      	mov	r1, r3
 8004530:	f002 feb6 	bl	80072a0 <sdc_lld_set_data_clk>

  /* Reads extended CSD if needed and possible.*/
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	2b02      	cmp	r3, #2
 800453e:	d12e      	bne.n	800459e <sdcConnect+0x15e>

    /* The card is a MMC, checking if it is a large device.*/
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3318      	adds	r3, #24
 8004544:	4618      	mov	r0, r3
 8004546:	217f      	movs	r1, #127	; 0x7f
 8004548:	227e      	movs	r2, #126	; 0x7e
 800454a:	f7ff fa51 	bl	80039f0 <_mmcsd_get_slice>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d91b      	bls.n	800458c <sdcConnect+0x14c>
      uint8_t *ext_csd = sdcp->config->scratchpad;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	617b      	str	r3, [r7, #20]

      /* Size detection requires the buffer.*/
      if (NULL == ext_csd) {
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d100      	bne.n	8004564 <sdcConnect+0x124>
        goto failed;
 8004562:	e052      	b.n	800460a <sdcConnect+0x1ca>
      }

      if(sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8004564:	2300      	movs	r3, #0
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	6979      	ldr	r1, [r7, #20]
 800456c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004570:	2308      	movs	r3, #8
 8004572:	f002 ffed 	bl	8007550 <sdc_lld_read_special>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d000      	beq.n	800457e <sdcConnect+0x13e>
        goto failed;
 800457c:	e045      	b.n	800460a <sdcConnect+0x1ca>
      }

      /* Capacity from the EXT_CSD.*/
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff face 	bl	8003b20 <_mmcsd_get_capacity_ext>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
 800458a:	e010      	b.n	80045ae <sdcConnect+0x16e>
    }
    else {
      /* Capacity from the normal CSD.*/
      sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3318      	adds	r3, #24
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fa7d 	bl	8003a90 <_mmcsd_get_capacity>
 8004596:	4602      	mov	r2, r0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e007      	b.n	80045ae <sdcConnect+0x16e>
    }
  }
  else {
    /* The card is an SDC, capacity from the normal CSD.*/
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fa74 	bl	8003a90 <_mmcsd_get_capacity>
 80045a8:	4602      	mov	r2, r0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 80045ae:	f107 0310 	add.w	r3, r7, #16
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	2110      	movs	r1, #16
 80045b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ba:	f002 ff39 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d122      	bne.n	800460a <sdcConnect+0x1ca>
                                 MMCSD_BLOCK_SIZE, resp) ||
      MMCSD_R1_ERROR(resp[0])) {
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <sdcConnect+0x1e4>)
 80045c8:	4013      	ands	r3, r2
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
  }

  /* Block length fixed at 512 bytes.*/
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
                                 MMCSD_BLOCK_SIZE, resp) ||
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11d      	bne.n	800460a <sdcConnect+0x1ca>
      MMCSD_R1_ERROR(resp[0])) {
    goto failed;
  }

  /* Switches to wide bus mode.*/
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d902      	bls.n	80045e0 <sdcConnect+0x1a0>
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d008      	beq.n	80045f0 <sdcConnect+0x1b0>
      goto failed;
    }
    break;
  default:
    /* Unknown type.*/
    goto failed;
 80045de:	e014      	b.n	800460a <sdcConnect+0x1ca>

  /* Switches to wide bus mode.*/
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
  case SDC_MODE_CARDTYPE_SDV11:
  case SDC_MODE_CARDTYPE_SDV20:
    if (HAL_FAILED == sdc_set_bus_width(sdcp)) {
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fe45 	bl	8004270 <sdc_set_bus_width>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d000      	beq.n	80045ee <sdcConnect+0x1ae>
      goto failed;
 80045ec:	e00d      	b.n	800460a <sdcConnect+0x1ca>
    }
    break;
 80045ee:	e007      	b.n	8004600 <sdcConnect+0x1c0>
  case SDC_MODE_CARDTYPE_MMC:
    if (HAL_FAILED == mmc_set_bus_width(sdcp)) {
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fe7d 	bl	80042f0 <mmc_set_bus_width>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d000      	beq.n	80045fe <sdcConnect+0x1be>
      goto failed;
 80045fc:	e005      	b.n	800460a <sdcConnect+0x1ca>
    }
    break;
 80045fe:	bf00      	nop
    /* Unknown type.*/
    goto failed;
  }

  /* Initialization complete.*/
  sdcp->state = BLK_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2205      	movs	r2, #5
 8004604:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8004606:	2300      	movs	r3, #0
 8004608:	e006      	b.n	8004618 <sdcConnect+0x1d8>

  /* Connection failed, state reset to BLK_ACTIVE.*/
failed:
  sdc_lld_stop_clk(sdcp);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f002 fe60 	bl	80072d0 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 8004616:	2301      	movs	r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	080097b0 	.word	0x080097b0
 8004624:	fdffe008 	.word	0xfdffe008
 8004628:	f3af 8000 	nop.w
 800462c:	f3af 8000 	nop.w

08004630 <sdcDisconnect>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcDisconnect(SDCDriver *sdcp) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  osalDbgCheck(sdcp != NULL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <sdcDisconnect+0x14>
 800463e:	481b      	ldr	r0, [pc, #108]	; (80046ac <sdcDisconnect+0x7c>)
 8004640:	f7fd f84e 	bl	80016e0 <chSysHalt>

  osalSysLock();
 8004644:	f7ff fb94 	bl	8003d70 <osalSysLock>
  osalDbgAssert((sdcp->state == BLK_ACTIVE) || (sdcp->state == BLK_READY),
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	791b      	ldrb	r3, [r3, #4]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d006      	beq.n	800465e <sdcDisconnect+0x2e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	791b      	ldrb	r3, [r3, #4]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d002      	beq.n	800465e <sdcDisconnect+0x2e>
 8004658:	4814      	ldr	r0, [pc, #80]	; (80046ac <sdcDisconnect+0x7c>)
 800465a:	f7fd f841 	bl	80016e0 <chSysHalt>
                "invalid state");
  if (sdcp->state == BLK_ACTIVE) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d103      	bne.n	800466e <sdcDisconnect+0x3e>
    osalSysUnlock();
 8004666:	f7ff fb8b 	bl	8003d80 <osalSysUnlock>
    return HAL_SUCCESS;
 800466a:	2300      	movs	r3, #0
 800466c:	e019      	b.n	80046a2 <sdcDisconnect+0x72>
  }
  sdcp->state = BLK_DISCONNECTING;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2204      	movs	r2, #4
 8004672:	711a      	strb	r2, [r3, #4]
  osalSysUnlock();
 8004674:	f7ff fb84 	bl	8003d80 <osalSysUnlock>

  /* Waits for eventual pending operations completion.*/
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fe89 	bl	8004390 <_sdc_wait_for_transfer_state>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <sdcDisconnect+0x64>
    sdc_lld_stop_clk(sdcp);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f002 fe23 	bl	80072d0 <sdc_lld_stop_clk>
    sdcp->state = BLK_ACTIVE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	711a      	strb	r2, [r3, #4]
    return HAL_FAILED;
 8004690:	2301      	movs	r3, #1
 8004692:	e006      	b.n	80046a2 <sdcDisconnect+0x72>
  }

  /* Card clock stopped.*/
  sdc_lld_stop_clk(sdcp);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f002 fe1b 	bl	80072d0 <sdc_lld_stop_clk>
  sdcp->state = BLK_ACTIVE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	080097c0 	.word	0x080097c0

080046b0 <sdcRead>:
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <sdcRead+0x20>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <sdcRead+0x20>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <sdcRead+0x26>
 80046d0:	4816      	ldr	r0, [pc, #88]	; (800472c <sdcRead+0x7c>)
 80046d2:	f7fd f805 	bl	80016e0 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	2b05      	cmp	r3, #5
 80046dc:	d002      	beq.n	80046e4 <sdcRead+0x34>
 80046de:	4813      	ldr	r0, [pc, #76]	; (800472c <sdcRead+0x7c>)
 80046e0:	f7fc fffe 	bl	80016e0 <chSysHalt>

  if ((startblk + n - 1U) > sdcp->capacity){
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d907      	bls.n	8004704 <sdcRead+0x54>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 8004700:	2301      	movs	r3, #1
 8004702:	e00e      	b.n	8004722 <sdcRead+0x72>
  }

  /* Read operation in progress.*/
  sdcp->state = BLK_READING;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2206      	movs	r2, #6
 8004708:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_read(sdcp, startblk, buf, n);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f003 f84d 	bl	80077b0 <sdc_lld_read>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Read operation finished.*/
  sdcp->state = BLK_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2205      	movs	r2, #5
 800471e:	711a      	strb	r2, [r3, #4]
  return status;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	080097d0 	.word	0x080097d0

08004730 <sdcWrite>:
 * @retval HAL_FAILED   operation failed.
 *
 * @api
 */
bool sdcWrite(SDCDriver *sdcp, uint32_t startblk,
              const uint8_t *buf, uint32_t n) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  bool status;

  osalDbgCheck((sdcp != NULL) && (buf != NULL) && (n > 0U));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <sdcWrite+0x20>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <sdcWrite+0x20>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <sdcWrite+0x26>
 8004750:	4816      	ldr	r0, [pc, #88]	; (80047ac <sdcWrite+0x7c>)
 8004752:	f7fc ffc5 	bl	80016e0 <chSysHalt>
  osalDbgAssert(sdcp->state == BLK_READY, "invalid state");
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	791b      	ldrb	r3, [r3, #4]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d002      	beq.n	8004764 <sdcWrite+0x34>
 800475e:	4813      	ldr	r0, [pc, #76]	; (80047ac <sdcWrite+0x7c>)
 8004760:	f7fc ffbe 	bl	80016e0 <chSysHalt>

  if ((startblk + n - 1U) > sdcp->capacity){
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	4413      	add	r3, r2
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	429a      	cmp	r2, r3
 8004772:	d907      	bls.n	8004784 <sdcWrite+0x54>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_FAILED;
 8004780:	2301      	movs	r3, #1
 8004782:	e00e      	b.n	80047a2 <sdcWrite+0x72>
  }

  /* Write operation in progress.*/
  sdcp->state = BLK_WRITING;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2207      	movs	r2, #7
 8004788:	711a      	strb	r2, [r3, #4]

  status = sdc_lld_write(sdcp, startblk, buf, n);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f003 f855 	bl	8007840 <sdc_lld_write>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]

  /* Write operation finished.*/
  sdcp->state = BLK_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2205      	movs	r2, #5
 800479e:	711a      	strb	r2, [r3, #4]
  return status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	080097e0 	.word	0x080097e0

080047b0 <sdcSync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcSync(SDCDriver *sdcp) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  bool result;

  osalDbgCheck(sdcp != NULL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <sdcSync+0x14>
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <sdcSync+0x40>)
 80047c0:	f7fc ff8e 	bl	80016e0 <chSysHalt>

  if (sdcp->state != BLK_READY) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	791b      	ldrb	r3, [r3, #4]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d001      	beq.n	80047d0 <sdcSync+0x20>
    return HAL_FAILED;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e00b      	b.n	80047e8 <sdcSync+0x38>
  }

  /* Synchronization operation in progress.*/
  sdcp->state = BLK_SYNCING;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2208      	movs	r2, #8
 80047d4:	711a      	strb	r2, [r3, #4]

  result = sdc_lld_sync(sdcp);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f003 f87a 	bl	80078d0 <sdc_lld_sync>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

  /* Synchronization operation finished.*/
  sdcp->state = BLK_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2205      	movs	r2, #5
 80047e4:	711a      	strb	r2, [r3, #4]
  return result;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	080097f0 	.word	0x080097f0
 80047f4:	f3af 8000 	nop.w
 80047f8:	f3af 8000 	nop.w
 80047fc:	f3af 8000 	nop.w

08004800 <sdcGetInfo>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <sdcGetInfo+0x16>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <sdcGetInfo+0x1c>
 8004816:	480b      	ldr	r0, [pc, #44]	; (8004844 <sdcGetInfo+0x44>)
 8004818:	f7fc ff62 	bl	80016e0 <chSysHalt>

  if (sdcp->state != BLK_READY) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	2b05      	cmp	r3, #5
 8004822:	d001      	beq.n	8004828 <sdcGetInfo+0x28>
    return HAL_FAILED;
 8004824:	2301      	movs	r3, #1
 8004826:	e008      	b.n	800483a <sdcGetInfo+0x3a>
  }

  bdip->blk_num = sdcp->capacity;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	605a      	str	r2, [r3, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004836:	601a      	str	r2, [r3, #0]

  return HAL_SUCCESS;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	08009800 	.word	0x08009800
 8004848:	f3af 8000 	nop.w
 800484c:	f3af 8000 	nop.w

08004850 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	2320      	movs	r3, #32
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w

08004870 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w

08004890 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0

  port_lock();
 8004894:	f7ff ffdc 	bl	8004850 <port_lock>
  _stats_start_measure_crit_thd();
 8004898:	f7fe f942 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800489c:	f7fc ffd8 	bl	8001850 <_dbg_check_lock>
}
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	f3af 8000 	nop.w
 80048a8:	f3af 8000 	nop.w
 80048ac:	f3af 8000 	nop.w

080048b0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 80048b4:	f7fc ffe4 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80048b8:	f7fe f93a 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <chSysUnlock+0x34>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <chSysUnlock+0x34>)
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00a      	beq.n	80048dc <chSysUnlock+0x2c>
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <chSysUnlock+0x34>)
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <chSysUnlock+0x34>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d202      	bcs.n	80048dc <chSysUnlock+0x2c>
 80048d6:	4804      	ldr	r0, [pc, #16]	; (80048e8 <chSysUnlock+0x38>)
 80048d8:	f7fc ff02 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 80048dc:	f7ff ffc8 	bl	8004870 <port_unlock>
}
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000800 	.word	0x20000800
 80048e8:	08009840 	.word	0x08009840
 80048ec:	f3af 8000 	nop.w

080048f0 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  esp->es_next = (event_listener_t *)esp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	f3af 8000 	nop.w
 800490c:	f3af 8000 	nop.w

08004910 <chIQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8004918:	f7fd f83a 	bl	8001990 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2300      	movne	r3, #0
 8004926:	2301      	moveq	r3, #1
 8004928:	b2db      	uxtb	r3, r3
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	f3af 8000 	nop.w
 800493c:	f3af 8000 	nop.w

08004940 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0

  chSysLock();
 8004944:	f7ff ffa4 	bl	8004890 <chSysLock>
}
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w

08004950 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0

  chSysUnlock();
 8004954:	f7ff ffac 	bl	80048b0 <chSysUnlock>
}
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w

08004960 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event flags object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  chEvtObjectInit(esp);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffc1 	bl	80048f0 <chEvtObjectInit>
}
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	f3af 8000 	nop.w
 8004978:	f3af 8000 	nop.w
 800497c:	f3af 8000 	nop.w

08004980 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  chEvtBroadcastFlagsI(esp, flags);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	f7fe fae7 	bl	8002f60 <chEvtBroadcastFlagsI>
}
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	f3af 8000 	nop.w
 800499c:	f3af 8000 	nop.w

080049a0 <write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3330      	adds	r3, #48	; 0x30
 80049b0:	4618      	mov	r0, r3
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	f7fe fdc9 	bl	8003550 <chOQWriteTimeout>
 80049be:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	f3af 8000 	nop.w
 80049cc:	f3af 8000 	nop.w

080049d0 <read>:

static size_t read(void *ip, uint8_t *bp, size_t n) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	330c      	adds	r3, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ea:	f7fe fcb1 	bl	8003350 <chIQReadTimeout>
 80049ee:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	f3af 8000 	nop.w
 80049fc:	f3af 8000 	nop.w

08004a00 <put>:

static msg_t put(void *ip, uint8_t b) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	f7fe fd20 	bl	8003460 <chOQPutTimeout>
 8004a20:	4603      	mov	r3, r0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	f3af 8000 	nop.w

08004a30 <get>:

static msg_t get(void *ip) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a42:	f7fe fc3d 	bl	80032c0 <chIQGetTimeout>
 8004a46:	4603      	mov	r3, r0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	72fb      	strb	r3, [r7, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	f7fe fcf8 	bl	8003460 <chOQPutTimeout>
 8004a70:	4603      	mov	r3, r0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <gett>:

static msg_t gett(void *ip, systime_t timeout) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	4618      	mov	r0, r3
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	f7fe fc15 	bl	80032c0 <chIQGetTimeout>
 8004a96:	4603      	mov	r3, r0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <writet>:

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3330      	adds	r3, #48	; 0x30
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f7fe fd49 	bl	8003550 <chOQWriteTimeout>
 8004abe:	4603      	mov	r3, r0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	f3af 8000 	nop.w
 8004acc:	f3af 8000 	nop.w

08004ad0 <readt>:

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f7fe fc31 	bl	8003350 <chIQReadTimeout>
 8004aee:	4603      	mov	r3, r0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	f3af 8000 	nop.w
 8004afc:	f3af 8000 	nop.w

08004b00 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0

  sd_lld_init();
 8004b04:	f004 f84c 	bl	8008ba0 <sd_lld_init>
}
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w

08004b10 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]

  sdp->vmt = &vmt;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <sdObjectInit+0x64>)
 8004b20:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff1a 	bl	8004960 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f103 020c 	add.w	r2, r3, #12
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3354      	adds	r3, #84	; 0x54
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	9100      	str	r1, [sp, #0]
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f7fe fb59 	bl	8003200 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	9100      	str	r1, [sp, #0]
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f7fe fc51 	bl	8003410 <chOQObjectInit>
}
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08009810 	.word	0x08009810
 8004b78:	f3af 8000 	nop.w
 8004b7c:	f3af 8000 	nop.w

08004b80 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

  osalDbgCheck(sdp != NULL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <sdStart+0x16>
 8004b90:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <sdStart+0x48>)
 8004b92:	f7fc fda5 	bl	80016e0 <chSysHalt>

  osalSysLock();
 8004b96:	f7ff fed3 	bl	8004940 <osalSysLock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7a1b      	ldrb	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d006      	beq.n	8004bb0 <sdStart+0x30>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7a1b      	ldrb	r3, [r3, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d002      	beq.n	8004bb0 <sdStart+0x30>
 8004baa:	4807      	ldr	r0, [pc, #28]	; (8004bc8 <sdStart+0x48>)
 8004bac:	f7fc fd98 	bl	80016e0 <chSysHalt>
                "invalid state");
  sd_lld_start(sdp, config);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	6839      	ldr	r1, [r7, #0]
 8004bb4:	f004 f81c 	bl	8008bf0 <sd_lld_start>
  sdp->state = SD_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 8004bbe:	f7ff fec7 	bl	8004950 <osalSysUnlock>
}
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08009830 	.word	0x08009830
 8004bcc:	f3af 8000 	nop.w

08004bd0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]

  osalDbgCheckClassI();
 8004bdc:	f7fc fed8 	bl	8001990 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <sdIncomingDataI+0x1c>
 8004be6:	4812      	ldr	r0, [pc, #72]	; (8004c30 <sdIncomingDataI+0x60>)
 8004be8:	f7fc fd7a 	bl	80016e0 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe8d 	bl	8004910 <chIQIsEmptyI>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <sdIncomingDataI+0x38>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4618      	mov	r0, r3
 8004c02:	2104      	movs	r1, #4
 8004c04:	f7ff febc 	bl	8004980 <osalEventBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f103 020c 	add.w	r2, r3, #12
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7fe fb1c 	bl	8003250 <chIQPutI>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da05      	bge.n	8004c2a <sdIncomingDataI+0x5a>
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	f7ff feab 	bl	8004980 <osalEventBroadcastFlagsI>
}
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	08009850 	.word	0x08009850
 8004c34:	f3af 8000 	nop.w
 8004c38:	f3af 8000 	nop.w
 8004c3c:	f3af 8000 	nop.w

08004c40 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fe f869 	bl	8002d20 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	f3af 8000 	nop.w
 8004c58:	f3af 8000 	nop.w
 8004c5c:	f3af 8000 	nop.w

08004c60 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0

  spi_lld_init();
 8004c64:	f003 fca4 	bl	80085b0 <spi_lld_init>
}
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w

08004c70 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  spip->state = SPI_STOP;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
  spip->config = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	605a      	str	r2, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ffd6 	bl	8004c40 <osalMutexObjectInit>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	f3af 8000 	nop.w

08004ca0 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8004ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8004cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8004cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	60da      	str	r2, [r3, #12]
}
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w

08004cd0 <st_lld_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0

  STM32_ST_TIM->DIER = 0;
 8004cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]
}
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	f3af 8000 	nop.w
 8004cec:	f3af 8000 	nop.w

08004cf0 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8004cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	f3af 8000 	nop.w

08004d10 <st_lld_is_alarm_active>:
 * @retval false        if the alarm is not active.
 * @retval true         is the alarm is active
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8004d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf0c      	ite	eq
 8004d22:	2300      	moveq	r3, #0
 8004d24:	2301      	movne	r3, #1
 8004d26:	b2db      	uxtb	r3, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	f3af 8000 	nop.w
 8004d38:	f3af 8000 	nop.w
 8004d3c:	f3af 8000 	nop.w

08004d40 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0

  st_lld_init();
 8004d44:	f003 fce4 	bl	8008710 <st_lld_init>
}
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	f3af 8000 	nop.w

08004d50 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8004d58:	f7ff ffda 	bl	8004d10 <st_lld_is_alarm_active>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <stStartAlarm+0x18>
 8004d62:	4804      	ldr	r0, [pc, #16]	; (8004d74 <stStartAlarm+0x24>)
 8004d64:	f7fc fcbc 	bl	80016e0 <chSysHalt>

  st_lld_start_alarm(abstime);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff99 	bl	8004ca0 <st_lld_start_alarm>
}
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	08009860 	.word	0x08009860
 8004d78:	f3af 8000 	nop.w
 8004d7c:	f3af 8000 	nop.w

08004d80 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0

  st_lld_stop_alarm();
 8004d84:	f7ff ffa4 	bl	8004cd0 <st_lld_stop_alarm>
}
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w

08004d90 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8004d98:	f7ff ffba 	bl	8004d10 <st_lld_is_alarm_active>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f083 0301 	eor.w	r3, r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <stSetAlarm+0x1e>
 8004da8:	4804      	ldr	r0, [pc, #16]	; (8004dbc <stSetAlarm+0x2c>)
 8004daa:	f7fc fc99 	bl	80016e0 <chSysHalt>

  st_lld_set_alarm(abstime);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff ff9e 	bl	8004cf0 <st_lld_set_alarm>
}
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08009870 	.word	0x08009870

08004dc0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w

08004de0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w

08004e00 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0

  port_lock();
 8004e04:	f7ff ffdc 	bl	8004dc0 <port_lock>
}
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w

08004e10 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0

  port_unlock();
 8004e14:	f7ff ffe4 	bl	8004de0 <port_unlock>
}
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w

08004e20 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8004e24:	f7ff ffec 	bl	8004e00 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8004e28:	f7fd fe8a 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8004e2c:	f7fc fd40 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	f3af 8000 	nop.w
 8004e38:	f3af 8000 	nop.w
 8004e3c:	f3af 8000 	nop.w

08004e40 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8004e44:	f7fc fd4c 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8004e48:	f7fd fe82 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8004e4c:	f7ff ffe0 	bl	8004e10 <port_unlock_from_isr>
}
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	f3af 8000 	nop.w
 8004e58:	f3af 8000 	nop.w
 8004e5c:	f3af 8000 	nop.w

08004e60 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8004e64:	f7ff ffdc 	bl	8004e20 <chSysLockFromISR>
}
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8004e74:	f7ff ffe4 	bl	8004e40 <chSysUnlockFromISR>
}
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w

08004e80 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	81fb      	strh	r3, [r7, #14]
  hw |= (uint16_t)*p << 8U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	81fb      	strh	r3, [r7, #14]
  return hw;
 8004ea2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  usbp->address = usbp->setup[2];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
  usb_lld_set_address(usbp);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f003 f983 	bl	80081d0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <set_address+0x30>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	2101      	movs	r1, #1
 8004ede:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	701a      	strb	r2, [r3, #0]
}
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	f3af 8000 	nop.w

08004ef0 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f08:	021b      	lsls	r3, r3, #8
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
 8004f0a:	4313      	orrs	r3, r2
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f10:	d05a      	beq.n	8004fc8 <default_handler+0xd8>
 8004f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f16:	d812      	bhi.n	8004f3e <default_handler+0x4e>
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	f000 80ee 	beq.w	80050fa <default_handler+0x20a>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d805      	bhi.n	8004f2e <default_handler+0x3e>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d028      	beq.n	8004f78 <default_handler+0x88>
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f000 80dc 	beq.w	80050e4 <default_handler+0x1f4>
 8004f2c:	e1a6      	b.n	800527c <default_handler+0x38c>
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f32:	d02e      	beq.n	8004f92 <default_handler+0xa2>
 8004f34:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004f38:	f000 8136 	beq.w	80051a8 <default_handler+0x2b8>
 8004f3c:	e19e      	b.n	800527c <default_handler+0x38c>
 8004f3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f42:	d074      	beq.n	800502e <default_handler+0x13e>
 8004f44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f48:	d808      	bhi.n	8004f5c <default_handler+0x6c>
 8004f4a:	f240 3202 	movw	r2, #770	; 0x302
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 815f 	beq.w	8005212 <default_handler+0x322>
 8004f54:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004f58:	d051      	beq.n	8004ffe <default_handler+0x10e>
 8004f5a:	e18f      	b.n	800527c <default_handler+0x38c>
 8004f5c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004f60:	f000 8098 	beq.w	8005094 <default_handler+0x1a4>
 8004f64:	f640 4202 	movw	r2, #3074	; 0xc02
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f000 80bb 	beq.w	80050e4 <default_handler+0x1f4>
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	f000 8082 	beq.w	800507a <default_handler+0x18a>
 8004f76:	e181      	b.n	800527c <default_handler+0x38c>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	651a      	str	r2, [r3, #80]	; 0x50
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	659a      	str	r2, [r3, #88]	; 0x58
    return true;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e175      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d113      	bne.n	8004fc4 <default_handler+0xd4>
      usbp->status &= ~2U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004fa2:	f023 0302 	bic.w	r3, r3, #2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	659a      	str	r2, [r3, #88]	; 0x58
      return true;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e15c      	b.n	800527e <default_handler+0x38e>
    }
    return false;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e15a      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d113      	bne.n	8004ffa <default_handler+0x10a>
      usbp->status |= 2U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	659a      	str	r2, [r3, #88]	; 0x58
      return true;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e141      	b.n	800527e <default_handler+0x38e>
    }
    return false;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e13f      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <default_handler+0x128>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800500e:	2b05      	cmp	r3, #5
 8005010:	d102      	bne.n	8005018 <default_handler+0x128>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff4c 	bl	8004eb0 <set_address>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	651a      	str	r2, [r3, #80]	; 0x50
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	659a      	str	r2, [r3, #88]	; 0x58
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
 800502a:	2301      	movs	r3, #1
 800502c:	e127      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	685c      	ldr	r4, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 605f 	ldrb.w	r6, [r3, #95]	; 0x5f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 505e 	ldrb.w	r5, [r3, #94]	; 0x5e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3360      	adds	r3, #96	; 0x60
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff ff1b 	bl	8004e80 <get_hword>
 800504a:	4603      	mov	r3, r0
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4631      	mov	r1, r6
 8005050:	462a      	mov	r2, r5
 8005052:	47a0      	blx	r4
 8005054:	60f8      	str	r0, [r7, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <default_handler+0x170>
      return false;
 800505c:	2300      	movs	r3, #0
 800505e:	e10e      	b.n	800527e <default_handler+0x38e>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	651a      	str	r2, [r3, #80]	; 0x50
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	659a      	str	r2, [r3, #88]	; 0x58
    /*lint -restore*/
    return true;
 8005076:	2301      	movs	r3, #1
 8005078:	e101      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f103 0267 	add.w	r2, r3, #103	; 0x67
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	659a      	str	r2, [r3, #88]	; 0x58
    return true;
 8005090:	2301      	movs	r3, #1
 8005092:	e0f4      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    if (usbp->configuration == 0U) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <default_handler+0x1c2>
      usbp->state = USB_SELECTED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2203      	movs	r2, #3
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <default_handler+0x1c8>
    }
    else {
      usbp->state = USB_ACTIVE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	701a      	strb	r2, [r3, #0]
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <default_handler+0x1de>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	2102      	movs	r1, #2
 80050cc:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	659a      	str	r2, [r3, #88]	; 0x58
    return true;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0cc      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a68      	ldr	r2, [pc, #416]	; (8005288 <default_handler+0x398>)
 80050e8:	651a      	str	r2, [r3, #80]	; 0x50
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*lint -restore*/
    return true;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0c1      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005100:	b2db      	uxtb	r3, r3
 8005102:	b25b      	sxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	da27      	bge.n	8005158 <default_handler+0x268>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	b2db      	uxtb	r3, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	f003 f8a2 	bl	8008260 <usb_lld_get_status_in>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d002      	beq.n	8005128 <default_handler+0x238>
 8005122:	2b02      	cmp	r3, #2
 8005124:	d00b      	beq.n	800513e <default_handler+0x24e>
 8005126:	e015      	b.n	8005154 <default_handler+0x264>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a58      	ldr	r2, [pc, #352]	; (800528c <default_handler+0x39c>)
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	659a      	str	r2, [r3, #88]	; 0x58
        /*lint -restore*/
        return true;
 800513a:	2301      	movs	r3, #1
 800513c:	e09f      	b.n	800527e <default_handler+0x38e>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a53      	ldr	r2, [pc, #332]	; (8005290 <default_handler+0x3a0>)
 8005142:	651a      	str	r2, [r3, #80]	; 0x50
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	659a      	str	r2, [r3, #88]	; 0x58
        /*lint -restore*/
        return true;
 8005150:	2301      	movs	r3, #1
 8005152:	e094      	b.n	800527e <default_handler+0x38e>
      case EP_STATUS_DISABLED:
      default:
        return false;
 8005154:	2300      	movs	r3, #0
 8005156:	e092      	b.n	800527e <default_handler+0x38e>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	b2db      	uxtb	r3, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4619      	mov	r1, r3
 8005168:	f003 f852 	bl	8008210 <usb_lld_get_status_out>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d002      	beq.n	8005178 <default_handler+0x288>
 8005172:	2b02      	cmp	r3, #2
 8005174:	d00b      	beq.n	800518e <default_handler+0x29e>
 8005176:	e015      	b.n	80051a4 <default_handler+0x2b4>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a44      	ldr	r2, [pc, #272]	; (800528c <default_handler+0x39c>)
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	659a      	str	r2, [r3, #88]	; 0x58
        /*lint -restore*/
        return true;
 800518a:	2301      	movs	r3, #1
 800518c:	e077      	b.n	800527e <default_handler+0x38e>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <default_handler+0x3a0>)
 8005192:	651a      	str	r2, [r3, #80]	; 0x50
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	659a      	str	r2, [r3, #88]	; 0x58
        /*lint -restore*/
        return true;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e06c      	b.n	800527e <default_handler+0x38e>
      case EP_STATUS_DISABLED:
      default:
        return false;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e06a      	b.n	800527e <default_handler+0x38e>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <default_handler+0x2c6>
      return false;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e063      	b.n	800527e <default_handler+0x38e>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <default_handler+0x30c>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	b25b      	sxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da0a      	bge.n	80051e8 <default_handler+0x2f8>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f003 f9c5 	bl	8008570 <usb_lld_clear_in>
 80051e6:	e009      	b.n	80051fc <default_handler+0x30c>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f003 f99a 	bl	8008530 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	651a      	str	r2, [r3, #80]	; 0x50
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	659a      	str	r2, [r3, #88]	; 0x58
    return true;
 800520e:	2301      	movs	r3, #1
 8005210:	e035      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <default_handler+0x330>
      return false;
 800521c:	2300      	movs	r3, #0
 800521e:	e02e      	b.n	800527e <default_handler+0x38e>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <default_handler+0x376>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005234:	b2db      	uxtb	r3, r3
 8005236:	b25b      	sxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	da0a      	bge.n	8005252 <default_handler+0x362>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	b2db      	uxtb	r3, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4619      	mov	r1, r3
 800524c:	f003 f950 	bl	80084f0 <usb_lld_stall_in>
 8005250:	e009      	b.n	8005266 <default_handler+0x376>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	b2db      	uxtb	r3, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	f003 f925 	bl	80084b0 <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	651a      	str	r2, [r3, #80]	; 0x50
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	659a      	str	r2, [r3, #88]	; 0x58
    return true;
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <default_handler+0x38e>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
 800527c:	2300      	movs	r3, #0
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005286:	bf00      	nop
 8005288:	08009880 	.word	0x08009880
 800528c:	080098a0 	.word	0x080098a0
 8005290:	08009890 	.word	0x08009890
 8005294:	f3af 8000 	nop.w
 8005298:	f3af 8000 	nop.w
 800529c:	f3af 8000 	nop.w

080052a0 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0

  usb_lld_init();
 80052a4:	f002 fe9c 	bl	8007fe0 <usb_lld_init>
}
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w

080052b0 <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  unsigned i;

  usbp->state        = USB_STOP;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e00f      	b.n	80052ea <usbObjectInit+0x3a>
    usbp->in_params[i]  = NULL;
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3308      	adds	r3, #8
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	320e      	adds	r2, #14
 80052de:	2100      	movs	r1, #0
 80052e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d9ec      	bls.n	80052ca <usbObjectInit+0x1a>
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	815a      	strh	r2, [r3, #10]
}
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	f3af 8000 	nop.w
 800530c:	f3af 8000 	nop.w

08005310 <usbPrepareReceive>:
 * @param[out] buf      buffer where to copy the received data
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	460b      	mov	r3, r1
 800531e:	72fb      	strb	r3, [r7, #11]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	3302      	adds	r3, #2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	617b      	str	r3, [r7, #20]

  osp->rxqueued           = false;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	605a      	str	r2, [r3, #4]
  osp->rxcnt              = 0;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	4619      	mov	r1, r3
 800534e:	f002 ffc7 	bl	80082e0 <usb_lld_prepare_receive>
}
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	f3af 8000 	nop.w
 800535c:	f3af 8000 	nop.w

08005360 <usbPrepareTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	460b      	mov	r3, r1
 800536e:	72fb      	strb	r3, [r7, #11]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	3302      	adds	r3, #2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	617b      	str	r3, [r7, #20]

  isp->txqueued           = false;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	4619      	mov	r1, r3
 800539e:	f002 ffe7 	bl	8008370 <usb_lld_prepare_transmit>
}
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	f3af 8000 	nop.w
 80053ac:	f3af 8000 	nop.w

080053b0 <usbStartReceiveI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]

  osalDbgCheckClassI();
 80053bc:	f7fc fae8 	bl	8001990 <chDbgCheckClassI>
  osalDbgCheck(usbp != NULL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <usbStartReceiveI+0x1c>
 80053c6:	4812      	ldr	r0, [pc, #72]	; (8005410 <usbStartReceiveI+0x60>)
 80053c8:	f7fc f98a 	bl	80016e0 <chSysHalt>

  if (usbGetReceiveStatusI(usbp, ep)) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	895a      	ldrh	r2, [r3, #10]
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	b29b      	uxth	r3, r3
 80053da:	4013      	ands	r3, r2
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <usbStartReceiveI+0x36>
    return true;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e010      	b.n	8005408 <usbStartReceiveI+0x58>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	895a      	ldrh	r2, [r3, #10]
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	815a      	strh	r2, [r3, #10]
  usb_lld_start_out(usbp, ep);
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4619      	mov	r1, r3
 8005402:	f003 f80d 	bl	8008420 <usb_lld_start_out>
  return false;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	080098b0 	.word	0x080098b0
 8005414:	f3af 8000 	nop.w
 8005418:	f3af 8000 	nop.w
 800541c:	f3af 8000 	nop.w

08005420 <usbStartTransmitI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]

  osalDbgCheckClassI();
 800542c:	f7fc fab0 	bl	8001990 <chDbgCheckClassI>
  osalDbgCheck(usbp != NULL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <usbStartTransmitI+0x1c>
 8005436:	4812      	ldr	r0, [pc, #72]	; (8005480 <usbStartTransmitI+0x60>)
 8005438:	f7fc f952 	bl	80016e0 <chSysHalt>

  if (usbGetTransmitStatusI(usbp, ep)) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	891a      	ldrh	r2, [r3, #8]
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	b29b      	uxth	r3, r3
 800544a:	4013      	ands	r3, r2
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <usbStartTransmitI+0x36>
    return true;
 8005452:	2301      	movs	r3, #1
 8005454:	e010      	b.n	8005478 <usbStartTransmitI+0x58>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	891a      	ldrh	r2, [r3, #8]
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	4313      	orrs	r3, r2
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	811a      	strh	r2, [r3, #8]
  usb_lld_start_in(usbp, ep);
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	f002 fff5 	bl	8008460 <usb_lld_start_in>
  return false;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	080098d0 	.word	0x080098d0
 8005484:	f3af 8000 	nop.w
 8005488:	f3af 8000 	nop.w
 800548c:	f3af 8000 	nop.w

08005490 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  unsigned i;

  usbp->state         = USB_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
  usbp->status        = 0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  usbp->address       = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
  usbp->configuration = 0;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  usbp->transmitting  = 0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e009      	b.n	80054dc <_usb_reset+0x4c>
    usbp->epc[i] = NULL;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3302      	adds	r3, #2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	605a      	str	r2, [r3, #4]
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d9f2      	bls.n	80054c8 <_usb_reset+0x38>
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f002 fdd8 	bl	80080a0 <usb_lld_reset>
}
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	f3af 8000 	nop.w
 80054fc:	f3af 8000 	nop.w

08005500 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  usbReadSetup(usbp, ep, usbp->setup);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	335c      	adds	r3, #92	; 0x5c
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	f002 fec6 	bl	80082b0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <_usb_ep0setup+0x44>
      !(usbp->config->requests_hook_cb(usbp))) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
 8005538:	4603      	mov	r3, r0
 800553a:	f083 0301 	eor.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d027      	beq.n	8005594 <_usb_ep0setup+0x94>
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800554a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <_usb_ep0setup+0x64>
        !default_handler(usbp)) {
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fccc 	bl	8004ef0 <default_handler>
 8005558:	4603      	mov	r3, r0
 800555a:	f083 0301 	eor.w	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8005560:	2b00      	cmp	r3, #0
 8005562:	d017      	beq.n	8005594 <_usb_ep0setup+0x94>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	2100      	movs	r1, #0
 8005568:	f002 ffc2 	bl	80084f0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	2100      	movs	r1, #0
 8005570:	f002 ff9e 	bl	80084b0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <_usb_ep0setup+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	2105      	movs	r1, #5
 8005588:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2206      	movs	r2, #6
 800558e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return;
 8005592:	e06c      	b.n	800566e <_usb_ep0setup+0x16e>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3362      	adds	r3, #98	; 0x62
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fc71 	bl	8004e80 <get_hword>
 800559e:	4603      	mov	r3, r0
 80055a0:	60fb      	str	r3, [r7, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d902      	bls.n	80055b2 <_usb_ep0setup+0xb2>
    usbp->ep0n = max;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da2b      	bge.n	8005618 <_usb_ep0setup+0x118>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d014      	beq.n	80055f2 <_usb_ep0setup+0xf2>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	2100      	movs	r1, #0
 80055dc:	f7ff fec0 	bl	8005360 <usbPrepareTransmit>
      osalSysLockFromISR();
 80055e0:	f7ff fc3e 	bl	8004e60 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	2100      	movs	r1, #0
 80055e8:	f7ff ff1a 	bl	8005420 <usbStartTransmitI>
      osalSysUnlockFromISR();
 80055ec:	f7ff fc40 	bl	8004e70 <osalSysUnlockFromISR>
 80055f0:	e03d      	b.n	800566e <_usb_ep0setup+0x16e>
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2203      	movs	r2, #3
 80055f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	2100      	movs	r1, #0
 80055fe:	2200      	movs	r2, #0
 8005600:	2300      	movs	r3, #0
 8005602:	f7ff fe85 	bl	8005310 <usbPrepareReceive>
      osalSysLockFromISR();
 8005606:	f7ff fc2b 	bl	8004e60 <osalSysLockFromISR>
      (void) usbStartReceiveI(usbp, 0);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	2100      	movs	r1, #0
 800560e:	f7ff fecf 	bl	80053b0 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8005612:	f7ff fc2d 	bl	8004e70 <osalSysUnlockFromISR>
 8005616:	e02a      	b.n	800566e <_usb_ep0setup+0x16e>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	2b00      	cmp	r3, #0
 800561e:	d014      	beq.n	800564a <_usb_ep0setup+0x14a>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	2100      	movs	r1, #0
 8005634:	f7ff fe6c 	bl	8005310 <usbPrepareReceive>
      osalSysLockFromISR();
 8005638:	f7ff fc12 	bl	8004e60 <osalSysLockFromISR>
      (void) usbStartReceiveI(usbp, 0);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	2100      	movs	r1, #0
 8005640:	f7ff feb6 	bl	80053b0 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8005644:	f7ff fc14 	bl	8004e70 <osalSysUnlockFromISR>
 8005648:	e011      	b.n	800566e <_usb_ep0setup+0x16e>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2205      	movs	r2, #5
 800564e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	2200      	movs	r2, #0
 8005658:	2300      	movs	r3, #0
 800565a:	f7ff fe81 	bl	8005360 <usbPrepareTransmit>
      osalSysLockFromISR();
 800565e:	f7ff fbff 	bl	8004e60 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	2100      	movs	r1, #0
 8005666:	f7ff fedb 	bl	8005420 <usbStartTransmitI>
      osalSysUnlockFromISR();
 800566a:	f7ff fc01 	bl	8004e70 <osalSysUnlockFromISR>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	f3af 8000 	nop.w
 8005678:	f3af 8000 	nop.w
 800567c:	f3af 8000 	nop.w

08005680 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005692:	2b06      	cmp	r3, #6
 8005694:	d876      	bhi.n	8005784 <_usb_ep0in+0x104>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <_usb_ep0in+0x1c>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	0800574f 	.word	0x0800574f
 80056a0:	080056b9 	.word	0x080056b9
 80056a4:	0800570f 	.word	0x0800570f
 80056a8:	0800574f 	.word	0x0800574f
 80056ac:	0800574f 	.word	0x0800574f
 80056b0:	08005735 	.word	0x08005735
 80056b4:	08005755 	.word	0x08005755
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3362      	adds	r3, #98	; 0x62
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff fbdf 	bl	8004e80 <get_hword>
 80056c2:	4603      	mov	r3, r0
 80056c4:	60fb      	str	r3, [r7, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d21e      	bcs.n	800570e <_usb_ep0in+0x8e>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68d2      	ldr	r2, [r2, #12]
 80056d8:	8a12      	ldrh	r2, [r2, #16]
 80056da:	fbb3 f1f2 	udiv	r1, r3, r2
 80056de:	fb02 f201 	mul.w	r2, r2, r1
 80056e2:	1a9b      	subs	r3, r3, r2
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d112      	bne.n	800570e <_usb_ep0in+0x8e>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	2100      	movs	r1, #0
 80056ec:	2200      	movs	r2, #0
 80056ee:	2300      	movs	r3, #0
 80056f0:	f7ff fe36 	bl	8005360 <usbPrepareTransmit>
      osalSysLockFromISR();
 80056f4:	f7ff fbb4 	bl	8004e60 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	2100      	movs	r1, #0
 80056fc:	f7ff fe90 	bl	8005420 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8005700:	f7ff fbb6 	bl	8004e70 <osalSysUnlockFromISR>
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return;
 800570c:	e03d      	b.n	800578a <_usb_ep0in+0x10a>
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	2100      	movs	r1, #0
 800571a:	2200      	movs	r2, #0
 800571c:	2300      	movs	r3, #0
 800571e:	f7ff fdf7 	bl	8005310 <usbPrepareReceive>
    osalSysLockFromISR();
 8005722:	f7ff fb9d 	bl	8004e60 <osalSysLockFromISR>
    (void) usbStartReceiveI(usbp, 0);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	2100      	movs	r1, #0
 800572a:	f7ff fe41 	bl	80053b0 <usbStartReceiveI>
    osalSysUnlockFromISR();
 800572e:	f7ff fb9f 	bl	8004e70 <osalSysUnlockFromISR>
#else
    usb_lld_end_setup(usbp, ep);
#endif
    return;
 8005732:	e02a      	b.n	800578a <_usb_ep0in+0x10a>
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <_usb_ep0in+0xc4>
      usbp->ep0endcb(usbp);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return;
 800574c:	e01d      	b.n	800578a <_usb_ep0in+0x10a>
  case USB_EP0_WAITING_SETUP:
  case USB_EP0_WAITING_STS:
  case USB_EP0_RX:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 800574e:	4810      	ldr	r0, [pc, #64]	; (8005790 <_usb_ep0in+0x110>)
 8005750:	f7fb ffc6 	bl	80016e0 <chSysHalt>
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	2100      	movs	r1, #0
 8005758:	f002 feca 	bl	80084f0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	2100      	movs	r1, #0
 8005760:	f002 fea6 	bl	80084b0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <_usb_ep0in+0xfa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	2105      	movs	r1, #5
 8005778:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2206      	movs	r2, #6
 800577e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return;
 8005782:	e002      	b.n	800578a <_usb_ep0in+0x10a>
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <_usb_ep0in+0x110>)
 8005786:	f7fb ffab 	bl	80016e0 <chSysHalt>
  }
}
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	080098f0 	.word	0x080098f0
 8005794:	f3af 8000 	nop.w
 8005798:	f3af 8000 	nop.w
 800579c:	f3af 8000 	nop.w

080057a0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]

  (void)ep;
  switch (usbp->ep0state) {
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d852      	bhi.n	800585c <_usb_ep0out+0xbc>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <_usb_ep0out+0x1c>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005827 	.word	0x08005827
 80057c0:	08005827 	.word	0x08005827
 80057c4:	08005827 	.word	0x08005827
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	080057d9 	.word	0x080057d9
 80057d0:	08005827 	.word	0x08005827
 80057d4:	0800582d 	.word	0x0800582d
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2205      	movs	r2, #5
 80057dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	2100      	movs	r1, #0
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	f7ff fdba 	bl	8005360 <usbPrepareTransmit>
    osalSysLockFromISR();
 80057ec:	f7ff fb38 	bl	8004e60 <osalSysLockFromISR>
    (void) usbStartTransmitI(usbp, 0);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	2100      	movs	r1, #0
 80057f4:	f7ff fe14 	bl	8005420 <usbStartTransmitI>
    osalSysUnlockFromISR();
 80057f8:	f7ff fb3a 	bl	8004e70 <osalSysUnlockFromISR>
#else
    usb_lld_end_setup(usbp, ep);
#endif
    return;
 80057fc:	e031      	b.n	8005862 <_usb_ep0out+0xc2>
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d000      	beq.n	800580c <_usb_ep0out+0x6c>
      break;
 800580a:	e02a      	b.n	8005862 <_usb_ep0out+0xc2>
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <_usb_ep0out+0x7c>
      usbp->ep0endcb(usbp);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return;
 8005824:	e01d      	b.n	8005862 <_usb_ep0out+0xc2>
  case USB_EP0_WAITING_SETUP:
  case USB_EP0_TX:
  case USB_EP0_WAITING_TX0:
  case USB_EP0_SENDING_STS:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 8005826:	4810      	ldr	r0, [pc, #64]	; (8005868 <_usb_ep0out+0xc8>)
 8005828:	f7fb ff5a 	bl	80016e0 <chSysHalt>
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	2100      	movs	r1, #0
 8005830:	f002 fe5e 	bl	80084f0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	2100      	movs	r1, #0
 8005838:	f002 fe3a 	bl	80084b0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <_usb_ep0out+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	2105      	movs	r1, #5
 8005850:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2206      	movs	r2, #6
 8005856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return;
 800585a:	e002      	b.n	8005862 <_usb_ep0out+0xc2>
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
 800585c:	4802      	ldr	r0, [pc, #8]	; (8005868 <_usb_ep0out+0xc8>)
 800585e:	f7fb ff3f 	bl	80016e0 <chSysHalt>
  }
}
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08009900 	.word	0x08009900
 800586c:	f3af 8000 	nop.w

08005870 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	617b      	str	r3, [r7, #20]
  if (divisor == 0) {
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <long_to_string_with_divisor+0x1e>
    ll = num;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	e001      	b.n	8005892 <long_to_string_with_divisor+0x22>
  } else {
    ll = divisor;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	613b      	str	r3, [r7, #16]
  }

  q = p + MAX_FILLER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	330b      	adds	r3, #11
 8005896:	61bb      	str	r3, [r7, #24]
  do {
    i = (int)(l % radix);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	fbb3 f2f2 	udiv	r2, r3, r2
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	fb01 f202 	mul.w	r2, r1, r2
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	61fb      	str	r3, [r7, #28]
    i += '0';
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3330      	adds	r3, #48	; 0x30
 80058ae:	61fb      	str	r3, [r7, #28]
    if (i > '9')
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b39      	cmp	r3, #57	; 0x39
 80058b4:	dd02      	ble.n	80058bc <long_to_string_with_divisor+0x4c>
      i += 'A' - '0' - 10;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3307      	adds	r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
    *--q = i;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3b01      	subs	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	701a      	strb	r2, [r3, #0]
    l /= radix;
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	617b      	str	r3, [r7, #20]
  } while ((ll /= radix) != 0);
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1d9      	bne.n	8005898 <long_to_string_with_divisor+0x28>

  i = (int)(p + MAX_FILLER - q);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	330b      	adds	r3, #11
 80058e8:	461a      	mov	r2, r3
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	61fb      	str	r3, [r7, #28]
  do
    *p++ = *q++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	60fa      	str	r2, [r7, #12]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	1c51      	adds	r1, r2, #1
 80058fa:	61b9      	str	r1, [r7, #24]
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
  while (--i);
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3b01      	subs	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f1      	bne.n	80058f0 <long_to_string_with_divisor+0x80>

  return p;
 800590c:	68fb      	ldr	r3, [r7, #12]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w

08005920 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	2300      	movs	r3, #0
 8005934:	f7ff ff9c 	bl	8005870 <long_to_string_with_divisor>
 8005938:	4603      	mov	r3, r0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	f3af 8000 	nop.w
 8005948:	f3af 8000 	nop.w
 800594c:	f3af 8000 	nop.w

08005950 <ftoa>:
#if CHPRINTF_USE_FLOAT
static const long pow10[FLOAT_PRECISION] = {
    10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
};

static char *ftoa(char *p, double num, unsigned long precision) {
 8005950:	b5b0      	push	{r4, r5, r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	e9c7 2300 	strd	r2, r3, [r7]
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <ftoa+0x18>
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	2b09      	cmp	r3, #9
 8005966:	d901      	bls.n	800596c <ftoa+0x1c>
    precision = FLOAT_PRECISION;
 8005968:	2309      	movs	r3, #9
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
  precision = pow10[precision - 1];
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	1e5a      	subs	r2, r3, #1
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <ftoa+0xa8>)
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28

  l = (long)num;
 8005978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597c:	f7fb f878 	bl	8000a70 <__aeabi_d2iz>
 8005980:	4603      	mov	r3, r0
 8005982:	617b      	str	r3, [r7, #20]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	220a      	movs	r2, #10
 800598a:	2300      	movs	r3, #0
 800598c:	f7ff ff70 	bl	8005870 <long_to_string_with_divisor>
 8005990:	60f8      	str	r0, [r7, #12]
  *p++ = '.';
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	60fa      	str	r2, [r7, #12]
 8005998:	222e      	movs	r2, #46	; 0x2e
 800599a:	701a      	strb	r2, [r3, #0]
  l = (long)((num - l) * precision);
 800599c:	6978      	ldr	r0, [r7, #20]
 800599e:	f7fa fde9 	bl	8000574 <__aeabi_i2d>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059aa:	f7fa fc95 	bl	80002d8 <__aeabi_dsub>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4614      	mov	r4, r2
 80059b4:	461d      	mov	r5, r3
 80059b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b8:	f7fa fdcc 	bl	8000554 <__aeabi_ui2d>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4620      	mov	r0, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7fa fe3c 	bl	8000640 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	f7fb f84e 	bl	8000a70 <__aeabi_d2iz>
 80059d4:	4603      	mov	r3, r0
 80059d6:	617b      	str	r3, [r7, #20]
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80059d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <ftoa+0xac>)
 80059dc:	fba3 1302 	umull	r1, r3, r3, r2
 80059e0:	08db      	lsrs	r3, r3, #3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	220a      	movs	r2, #10
 80059e8:	f7ff ff42 	bl	8005870 <long_to_string_with_divisor>
 80059ec:	4603      	mov	r3, r0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	08009910 	.word	0x08009910
 80059fc:	cccccccd 	.word	0xcccccccd

08005a00 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b096      	sub	sp, #88	; 0x58
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	60ba      	str	r2, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (c == 0)
 8005a1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <chvprintf+0x28>
      return n;
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	e23f      	b.n	8005ea8 <chvprintf+0x4a8>
    if (c != '%') {
 8005a28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a2c:	2b25      	cmp	r3, #37	; 0x25
 8005a2e:	d00b      	beq.n	8005a48 <chvprintf+0x48>
      chSequentialStreamPut(chp, (uint8_t)c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4798      	blx	r3
      n++;
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	3301      	adds	r3, #1
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
      continue;
 8005a46:	e22e      	b.n	8005ea6 <chvprintf+0x4a6>
    }
    p = tmpbuf;
 8005a48:	f107 0310 	add.w	r3, r7, #16
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    s = tmpbuf;
 8005a4e:	f107 0310 	add.w	r3, r7, #16
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
    left_align = FALSE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (*fmt == '-') {
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b2d      	cmp	r3, #45	; 0x2d
 8005a60:	d105      	bne.n	8005a6e <chvprintf+0x6e>
      fmt++;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
      left_align = TRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }
    filler = ' ';
 8005a6e:	2320      	movs	r3, #32
 8005a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (*fmt == '0') {
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d105      	bne.n	8005a88 <chvprintf+0x88>
      fmt++;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60bb      	str	r3, [r7, #8]
      filler = '0';
 8005a82:	2330      	movs	r3, #48	; 0x30
 8005a84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    width = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63bb      	str	r3, [r7, #56]	; 0x38
    while (TRUE) {
      c = *fmt++;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	60ba      	str	r2, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if (c >= '0' && c <= '9')
 8005a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8005a9e:	d909      	bls.n	8005ab4 <chvprintf+0xb4>
 8005aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005aa4:	2b39      	cmp	r3, #57	; 0x39
 8005aa6:	d805      	bhi.n	8005ab4 <chvprintf+0xb4>
        c -= '0';
 8005aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005aac:	3b30      	subs	r3, #48	; 0x30
 8005aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ab2:	e012      	b.n	8005ada <chvprintf+0xda>
      else if (c == '*')
 8005ab4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d106      	bne.n	8005aca <chvprintf+0xca>
        c = va_arg(ap, int);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ac8:	e007      	b.n	8005ada <chvprintf+0xda>
      else
        break;
 8005aca:	bf00      	nop
      width = width * 10 + c;
    }
    precision = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (c == '.') {
 8005ad0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ad6:	d137      	bne.n	8005b48 <chvprintf+0x148>
 8005ad8:	e00a      	b.n	8005af0 <chvprintf+0xf0>
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8005ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005aea:	4413      	add	r3, r2
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8005aee:	e7cd      	b.n	8005a8c <chvprintf+0x8c>
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	60ba      	str	r2, [r7, #8]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (c >= '0' && c <= '9')
 8005afc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b00:	2b2f      	cmp	r3, #47	; 0x2f
 8005b02:	d909      	bls.n	8005b18 <chvprintf+0x118>
 8005b04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b08:	2b39      	cmp	r3, #57	; 0x39
 8005b0a:	d805      	bhi.n	8005b18 <chvprintf+0x118>
          c -= '0';
 8005b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b10:	3b30      	subs	r3, #48	; 0x30
 8005b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b16:	e00b      	b.n	8005b30 <chvprintf+0x130>
        else if (c == '*')
 8005b18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1e:	d106      	bne.n	8005b2e <chvprintf+0x12e>
          c = va_arg(ap, int);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b2c:	e000      	b.n	8005b30 <chvprintf+0x130>
        else
          break;
 8005b2e:	e00b      	b.n	8005b48 <chvprintf+0x148>
        precision *= 10;
 8005b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        precision += c;
 8005b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b42:	4413      	add	r3, r2
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
 8005b46:	e7d3      	b.n	8005af0 <chvprintf+0xf0>
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8005b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8005b4e:	d003      	beq.n	8005b58 <chvprintf+0x158>
 8005b50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b54:	2b4c      	cmp	r3, #76	; 0x4c
 8005b56:	d10e      	bne.n	8005b76 <chvprintf+0x176>
      is_long = TRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      if (*fmt)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <chvprintf+0x174>
        c = *fmt++;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	60ba      	str	r2, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
 8005b72:	e013      	b.n	8005b9c <chvprintf+0x19c>
 8005b74:	e012      	b.n	8005b9c <chvprintf+0x19c>
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 8005b76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d905      	bls.n	8005b8a <chvprintf+0x18a>
 8005b7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b82:	2b5a      	cmp	r3, #90	; 0x5a
 8005b84:	d801      	bhi.n	8005b8a <chvprintf+0x18a>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <chvprintf+0x18c>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /* Command decoding.*/
    switch (c) {
 8005b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ba0:	3b44      	subs	r3, #68	; 0x44
 8005ba2:	2b34      	cmp	r3, #52	; 0x34
 8005ba4:	f200 810f 	bhi.w	8005dc6 <chvprintf+0x3c6>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <chvprintf+0x1b0>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005ce7 	.word	0x08005ce7
 8005bb4:	08005dc7 	.word	0x08005dc7
 8005bb8:	08005dc7 	.word	0x08005dc7
 8005bbc:	08005dc7 	.word	0x08005dc7
 8005bc0:	08005dc7 	.word	0x08005dc7
 8005bc4:	08005ce7 	.word	0x08005ce7
 8005bc8:	08005dc7 	.word	0x08005dc7
 8005bcc:	08005dc7 	.word	0x08005dc7
 8005bd0:	08005dc7 	.word	0x08005dc7
 8005bd4:	08005dc7 	.word	0x08005dc7
 8005bd8:	08005dc7 	.word	0x08005dc7
 8005bdc:	08005d91 	.word	0x08005d91
 8005be0:	08005dc7 	.word	0x08005dc7
 8005be4:	08005dc7 	.word	0x08005dc7
 8005be8:	08005dc7 	.word	0x08005dc7
 8005bec:	08005dc7 	.word	0x08005dc7
 8005bf0:	08005dc7 	.word	0x08005dc7
 8005bf4:	08005d89 	.word	0x08005d89
 8005bf8:	08005dc7 	.word	0x08005dc7
 8005bfc:	08005dc7 	.word	0x08005dc7
 8005c00:	08005d81 	.word	0x08005d81
 8005c04:	08005dc7 	.word	0x08005dc7
 8005c08:	08005dc7 	.word	0x08005dc7
 8005c0c:	08005dc7 	.word	0x08005dc7
 8005c10:	08005dc7 	.word	0x08005dc7
 8005c14:	08005dc7 	.word	0x08005dc7
 8005c18:	08005dc7 	.word	0x08005dc7
 8005c1c:	08005dc7 	.word	0x08005dc7
 8005c20:	08005dc7 	.word	0x08005dc7
 8005c24:	08005dc7 	.word	0x08005dc7
 8005c28:	08005dc7 	.word	0x08005dc7
 8005c2c:	08005c85 	.word	0x08005c85
 8005c30:	08005ce7 	.word	0x08005ce7
 8005c34:	08005dc7 	.word	0x08005dc7
 8005c38:	08005d29 	.word	0x08005d29
 8005c3c:	08005dc7 	.word	0x08005dc7
 8005c40:	08005dc7 	.word	0x08005dc7
 8005c44:	08005ce7 	.word	0x08005ce7
 8005c48:	08005dc7 	.word	0x08005dc7
 8005c4c:	08005dc7 	.word	0x08005dc7
 8005c50:	08005dc7 	.word	0x08005dc7
 8005c54:	08005dc7 	.word	0x08005dc7
 8005c58:	08005dc7 	.word	0x08005dc7
 8005c5c:	08005d91 	.word	0x08005d91
 8005c60:	08005dc7 	.word	0x08005dc7
 8005c64:	08005dc7 	.word	0x08005dc7
 8005c68:	08005dc7 	.word	0x08005dc7
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005dc7 	.word	0x08005dc7
 8005c74:	08005d89 	.word	0x08005d89
 8005c78:	08005dc7 	.word	0x08005dc7
 8005c7c:	08005dc7 	.word	0x08005dc7
 8005c80:	08005d81 	.word	0x08005d81
    case 'c':
      filler = ' ';
 8005c84:	2320      	movs	r3, #32
 8005c86:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      *p++ = va_arg(ap, int);
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	1d11      	adds	r1, r2, #4
 8005c94:	6079      	str	r1, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
      break;
 8005c9c:	e09a      	b.n	8005dd4 <chvprintf+0x3d4>
    case 's':
      filler = ' ';
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if ((s = va_arg(ap, char *)) == 0)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <chvprintf+0x2b8>
        s = "(null)";
 8005cb4:	4b7e      	ldr	r3, [pc, #504]	; (8005eb0 <chvprintf+0x4b0>)
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      if (precision == 0)
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <chvprintf+0x2c4>
        precision = 32767;
 8005cbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (p = s; *p && (--precision >= 0); p++)
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	e002      	b.n	8005cd0 <chvprintf+0x2d0>
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	3301      	adds	r3, #1
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <chvprintf+0x2e4>
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	daf2      	bge.n	8005cca <chvprintf+0x2ca>
        ;
      break;
 8005ce4:	e076      	b.n	8005dd4 <chvprintf+0x3d4>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
 8005ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <chvprintf+0x2fa>
        l = va_arg(ap, long);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf8:	e004      	b.n	8005d04 <chvprintf+0x304>
      else
        l = va_arg(ap, int);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (l < 0) {
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da07      	bge.n	8005d1a <chvprintf+0x31a>
        *p++ = '-';
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d10:	222d      	movs	r2, #45	; 0x2d
 8005d12:	701a      	strb	r2, [r3, #0]
        l = -l;
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	425b      	negs	r3, r3
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      p = ch_ltoa(p, l, 10);
 8005d1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1e:	220a      	movs	r2, #10
 8005d20:	f7ff fdfe 	bl	8005920 <ch_ltoa>
 8005d24:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 8005d26:	e055      	b.n	8005dd4 <chvprintf+0x3d4>
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3307      	adds	r3, #7
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	f103 0208 	add.w	r2, r3, #8
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f7fa febf 	bl	8000ac0 <__aeabi_d2f>
 8005d42:	4603      	mov	r3, r0
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
      if (f < 0) {
 8005d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	f7fb f9b6 	bl	80010bc <__aeabi_fcmplt>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <chvprintf+0x368>
        *p++ = '-';
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d5c:	222d      	movs	r2, #45	; 0x2d
 8005d5e:	701a      	strb	r2, [r3, #0]
        f = -f;
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      p = ftoa(p, f, precision);
 8005d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6a:	f7fa fc15 	bl	8000598 <__aeabi_f2d>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d74:	9100      	str	r1, [sp, #0]
 8005d76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d78:	f7ff fdea 	bl	8005950 <ftoa>
 8005d7c:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 8005d7e:	e029      	b.n	8005dd4 <chvprintf+0x3d4>
#endif
    case 'X':
    case 'x':
      c = 16;
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      goto unsigned_common;
 8005d86:	e006      	b.n	8005d96 <chvprintf+0x396>
    case 'U':
    case 'u':
      c = 10;
 8005d88:	230a      	movs	r3, #10
 8005d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      goto unsigned_common;
 8005d8e:	e002      	b.n	8005d96 <chvprintf+0x396>
    case 'O':
    case 'o':
      c = 8;
 8005d90:	2308      	movs	r3, #8
 8005d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
unsigned_common:
      if (is_long)
 8005d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <chvprintf+0x3aa>
        l = va_arg(ap, unsigned long);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da8:	e004      	b.n	8005db4 <chvprintf+0x3b4>
      else
        l = va_arg(ap, unsigned int);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      p = ch_ltoa(p, l, c);
 8005db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005db8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f7ff fdaf 	bl	8005920 <ch_ltoa>
 8005dc2:	64f8      	str	r0, [r7, #76]	; 0x4c
      break;
 8005dc4:	e006      	b.n	8005dd4 <chvprintf+0x3d4>
    default:
      *p++ = c;
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005dcc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005dd0:	701a      	strb	r2, [r3, #0]
      break;
 8005dd2:	bf00      	nop
    }
    i = (int)(p - s);
 8005dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	643b      	str	r3, [r7, #64]	; 0x40
    if ((width -= i) < 0)
 8005ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da01      	bge.n	8005dee <chvprintf+0x3ee>
      width = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_align == FALSE)
 8005dee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005df2:	f083 0301 	eor.w	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <chvprintf+0x402>
      width = -width;
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	425b      	negs	r3, r3
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38
    if (width < 0) {
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da28      	bge.n	8005e5a <chvprintf+0x45a>
      if (*s == '-' && filler == '0') {
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e0e:	d113      	bne.n	8005e38 <chvprintf+0x438>
 8005e10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e14:	2b30      	cmp	r3, #48	; 0x30
 8005e16:	d10f      	bne.n	8005e38 <chvprintf+0x438>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4790      	blx	r2
        n++;
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	3301      	adds	r3, #1
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
        i--;
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	3b01      	subs	r3, #1
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4798      	blx	r3
        n++;
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
      } while (++width != 0);
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	3301      	adds	r3, #1
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ee      	bne.n	8005e38 <chvprintf+0x438>
    }
    while (--i >= 0) {
 8005e5a:	e00c      	b.n	8005e76 <chvprintf+0x476>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e64:	1c59      	adds	r1, r3, #1
 8005e66:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4790      	blx	r2
      n++;
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	3301      	adds	r3, #1
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	daec      	bge.n	8005e5c <chvprintf+0x45c>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005e82:	e00d      	b.n	8005ea0 <chvprintf+0x4a0>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4798      	blx	r3
      n++;
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	3301      	adds	r3, #1
 8005e98:	637b      	str	r3, [r7, #52]	; 0x34
      width--;
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1ee      	bne.n	8005e84 <chvprintf+0x484>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
 8005ea6:	e5b3      	b.n	8005a10 <chvprintf+0x10>
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3750      	adds	r7, #80	; 0x50
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	08009480 	.word	0x08009480
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	f3af 8000 	nop.w
 8005ebc:	f3af 8000 	nop.w

08005ec0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8005eca:	4913      	ldr	r1, [pc, #76]	; (8005f18 <nvicEnableVector+0x58>)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005edc:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <nvicEnableVector+0x58>)
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	0952      	lsrs	r2, r2, #5
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	f001 011f 	and.w	r1, r1, #31
 8005eea:	2001      	movs	r0, #1
 8005eec:	fa00 f101 	lsl.w	r1, r0, r1
 8005ef0:	3260      	adds	r2, #96	; 0x60
 8005ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <nvicEnableVector+0x58>)
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	0952      	lsrs	r2, r2, #5
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	f001 011f 	and.w	r1, r1, #31
 8005f02:	2001      	movs	r0, #1
 8005f04:	fa00 f101 	lsl.w	r1, r0, r1
 8005f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	e000e100 	.word	0xe000e100
 8005f1c:	f3af 8000 	nop.w

08005f20 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8005f26:	f7fc fdcb 	bl	8002ac0 <_stats_increase_irq>
 8005f2a:	f7fb fcf1 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <Vector6C+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8005f36:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 0;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <Vector6C+0x44>)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <Vector6C+0x48>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d006      	beq.n	8005f54 <Vector6C+0x34>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <Vector6C+0x48>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <Vector6C+0x48>)
 8005f4c:	6852      	ldr	r2, [r2, #4]
 8005f4e:	4610      	mov	r0, r2
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8005f54:	f7fb fcfc 	bl	8001950 <_dbg_check_leave_isr>
 8005f58:	f7fd fcea 	bl	8003930 <_port_irq_epilogue>
}
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40026000 	.word	0x40026000
 8005f68:	20000e14 	.word	0x20000e14
 8005f6c:	f3af 8000 	nop.w

08005f70 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8005f76:	f7fc fda3 	bl	8002ac0 <_stats_increase_irq>
 8005f7a:	f7fb fcc9 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <Vector70+0x48>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8005f88:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 6;
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <Vector70+0x48>)
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	0192      	lsls	r2, r2, #6
 8005f90:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <Vector70+0x4c>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <Vector70+0x38>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <Vector70+0x4c>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <Vector70+0x4c>)
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8005fa8:	f7fb fcd2 	bl	8001950 <_dbg_check_leave_isr>
 8005fac:	f7fd fcc0 	bl	8003930 <_port_irq_epilogue>
}
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40026000 	.word	0x40026000
 8005fbc:	20000e14 	.word	0x20000e14

08005fc0 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8005fc6:	f7fc fd7b 	bl	8002ac0 <_stats_increase_irq>
 8005fca:	f7fb fca1 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8005fce:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <Vector74+0x48>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0c1b      	lsrs	r3, r3, #16
 8005fd4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8005fd8:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 16;
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <Vector74+0x48>)
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	0412      	lsls	r2, r2, #16
 8005fe0:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <Vector74+0x4c>)
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d006      	beq.n	8005ff8 <Vector74+0x38>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8005fea:	4b08      	ldr	r3, [pc, #32]	; (800600c <Vector74+0x4c>)
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <Vector74+0x4c>)
 8005ff0:	6952      	ldr	r2, [r2, #20]
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8005ff8:	f7fb fcaa 	bl	8001950 <_dbg_check_leave_isr>
 8005ffc:	f7fd fc98 	bl	8003930 <_port_irq_epilogue>
}
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40026000 	.word	0x40026000
 800600c:	20000e14 	.word	0x20000e14

08006010 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006016:	f7fc fd53 	bl	8002ac0 <_stats_increase_irq>
 800601a:	f7fb fc79 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <Vector78+0x48>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	0d9b      	lsrs	r3, r3, #22
 8006024:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006028:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 22;
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <Vector78+0x48>)
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	0592      	lsls	r2, r2, #22
 8006030:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <Vector78+0x4c>)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d006      	beq.n	8006048 <Vector78+0x38>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <Vector78+0x4c>)
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	4a07      	ldr	r2, [pc, #28]	; (800605c <Vector78+0x4c>)
 8006040:	69d2      	ldr	r2, [r2, #28]
 8006042:	4610      	mov	r0, r2
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006048:	f7fb fc82 	bl	8001950 <_dbg_check_leave_isr>
 800604c:	f7fd fc70 	bl	8003930 <_port_irq_epilogue>
}
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40026000 	.word	0x40026000
 800605c:	20000e14 	.word	0x20000e14

08006060 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006066:	f7fc fd2b 	bl	8002ac0 <_stats_increase_irq>
 800606a:	f7fb fc51 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <Vector7C+0x44>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006076:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 0;
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <Vector7C+0x44>)
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <Vector7C+0x48>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d006      	beq.n	8006094 <Vector7C+0x34>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <Vector7C+0x48>)
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <Vector7C+0x48>)
 800608c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800608e:	4610      	mov	r0, r2
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006094:	f7fb fc5c 	bl	8001950 <_dbg_check_leave_isr>
 8006098:	f7fd fc4a 	bl	8003930 <_port_irq_epilogue>
}
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40026000 	.word	0x40026000
 80060a8:	20000e14 	.word	0x20000e14
 80060ac:	f3af 8000 	nop.w

080060b0 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80060b6:	f7fc fd03 	bl	8002ac0 <_stats_increase_irq>
 80060ba:	f7fb fc29 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 80060be:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <Vector80+0x48>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	099b      	lsrs	r3, r3, #6
 80060c4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80060c8:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 6;
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <Vector80+0x48>)
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	0192      	lsls	r2, r2, #6
 80060d0:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <Vector80+0x4c>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d006      	beq.n	80060e8 <Vector80+0x38>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <Vector80+0x4c>)
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <Vector80+0x4c>)
 80060e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060e2:	4610      	mov	r0, r2
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80060e8:	f7fb fc32 	bl	8001950 <_dbg_check_leave_isr>
 80060ec:	f7fd fc20 	bl	8003930 <_port_irq_epilogue>
}
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40026000 	.word	0x40026000
 80060fc:	20000e14 	.word	0x20000e14

08006100 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006106:	f7fc fcdb 	bl	8002ac0 <_stats_increase_irq>
 800610a:	f7fb fc01 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <Vector84+0x48>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006118:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 16;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <Vector84+0x48>)
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	0412      	lsls	r2, r2, #16
 8006120:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <Vector84+0x4c>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	d006      	beq.n	8006138 <Vector84+0x38>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <Vector84+0x4c>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	4a07      	ldr	r2, [pc, #28]	; (800614c <Vector84+0x4c>)
 8006130:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006132:	4610      	mov	r0, r2
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006138:	f7fb fc0a 	bl	8001950 <_dbg_check_leave_isr>
 800613c:	f7fd fbf8 	bl	8003930 <_port_irq_epilogue>
}
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40026000 	.word	0x40026000
 800614c:	20000e14 	.word	0x20000e14

08006150 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006156:	f7fc fcb3 	bl	8002ac0 <_stats_increase_irq>
 800615a:	f7fb fbd9 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <VectorFC+0x48>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	0d9b      	lsrs	r3, r3, #22
 8006164:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006168:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 22;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <VectorFC+0x48>)
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	0592      	lsls	r2, r2, #22
 8006170:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <VectorFC+0x4c>)
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <VectorFC+0x38>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <VectorFC+0x4c>)
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	4a07      	ldr	r2, [pc, #28]	; (800619c <VectorFC+0x4c>)
 8006180:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006182:	4610      	mov	r0, r2
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006188:	f7fb fbe2 	bl	8001950 <_dbg_check_leave_isr>
 800618c:	f7fd fbd0 	bl	8003930 <_port_irq_epilogue>
}
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40026000 	.word	0x40026000
 800619c:	20000e14 	.word	0x20000e14

080061a0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80061a6:	f7fc fc8b 	bl	8002ac0 <_stats_increase_irq>
 80061aa:	f7fb fbb1 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <Vector120+0x44>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80061b6:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 0;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <Vector120+0x44>)
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <Vector120+0x48>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <Vector120+0x34>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80061c6:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <Vector120+0x48>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <Vector120+0x48>)
 80061cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061ce:	4610      	mov	r0, r2
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80061d4:	f7fb fbbc 	bl	8001950 <_dbg_check_leave_isr>
 80061d8:	f7fd fbaa 	bl	8003930 <_port_irq_epilogue>
}
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40026400 	.word	0x40026400
 80061e8:	20000e14 	.word	0x20000e14
 80061ec:	f3af 8000 	nop.w

080061f0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80061f6:	f7fc fc63 	bl	8002ac0 <_stats_increase_irq>
 80061fa:	f7fb fb89 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 80061fe:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <Vector124+0x48>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	099b      	lsrs	r3, r3, #6
 8006204:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006208:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 6;
 800620a:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <Vector124+0x48>)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	0192      	lsls	r2, r2, #6
 8006210:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <Vector124+0x4c>)
 8006214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <Vector124+0x38>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800621a:	4b08      	ldr	r3, [pc, #32]	; (800623c <Vector124+0x4c>)
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	4a07      	ldr	r2, [pc, #28]	; (800623c <Vector124+0x4c>)
 8006220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006222:	4610      	mov	r0, r2
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006228:	f7fb fb92 	bl	8001950 <_dbg_check_leave_isr>
 800622c:	f7fd fb80 	bl	8003930 <_port_irq_epilogue>
}
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40026400 	.word	0x40026400
 800623c:	20000e14 	.word	0x20000e14

08006240 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006246:	f7fc fc3b 	bl	8002ac0 <_stats_increase_irq>
 800624a:	f7fb fb61 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <Vector128+0x48>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006258:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 16;
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <Vector128+0x48>)
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	0412      	lsls	r2, r2, #16
 8006260:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <Vector128+0x4c>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	2b00      	cmp	r3, #0
 8006268:	d006      	beq.n	8006278 <Vector128+0x38>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800626a:	4b08      	ldr	r3, [pc, #32]	; (800628c <Vector128+0x4c>)
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	4a07      	ldr	r2, [pc, #28]	; (800628c <Vector128+0x4c>)
 8006270:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006272:	4610      	mov	r0, r2
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006278:	f7fb fb6a 	bl	8001950 <_dbg_check_leave_isr>
 800627c:	f7fd fb58 	bl	8003930 <_port_irq_epilogue>
}
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40026400 	.word	0x40026400
 800628c:	20000e14 	.word	0x20000e14

08006290 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006296:	f7fc fc13 	bl	8002ac0 <_stats_increase_irq>
 800629a:	f7fb fb39 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <Vector12C+0x48>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0d9b      	lsrs	r3, r3, #22
 80062a4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80062a8:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 22;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <Vector12C+0x48>)
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	0592      	lsls	r2, r2, #22
 80062b0:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <Vector12C+0x4c>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <Vector12C+0x38>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <Vector12C+0x4c>)
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <Vector12C+0x4c>)
 80062c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80062c2:	4610      	mov	r0, r2
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80062c8:	f7fb fb42 	bl	8001950 <_dbg_check_leave_isr>
 80062cc:	f7fd fb30 	bl	8003930 <_port_irq_epilogue>
}
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40026400 	.word	0x40026400
 80062dc:	20000e14 	.word	0x20000e14

080062e0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80062e6:	f7fc fbeb 	bl	8002ac0 <_stats_increase_irq>
 80062ea:	f7fb fb11 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <Vector130+0x44>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80062f6:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 0;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <Vector130+0x44>)
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <Vector130+0x48>)
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <Vector130+0x34>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <Vector130+0x48>)
 8006308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630a:	4a07      	ldr	r2, [pc, #28]	; (8006328 <Vector130+0x48>)
 800630c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800630e:	4610      	mov	r0, r2
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006314:	f7fb fb1c 	bl	8001950 <_dbg_check_leave_isr>
 8006318:	f7fd fb0a 	bl	8003930 <_port_irq_epilogue>
}
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40026400 	.word	0x40026400
 8006328:	20000e14 	.word	0x20000e14
 800632c:	f3af 8000 	nop.w

08006330 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006336:	f7fc fbc3 	bl	8002ac0 <_stats_increase_irq>
 800633a:	f7fb fae9 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <Vector150+0x48>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006348:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 6;
 800634a:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <Vector150+0x48>)
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	0192      	lsls	r2, r2, #6
 8006350:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <Vector150+0x4c>)
 8006354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006356:	2b00      	cmp	r3, #0
 8006358:	d006      	beq.n	8006368 <Vector150+0x38>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <Vector150+0x4c>)
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <Vector150+0x4c>)
 8006360:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006362:	4610      	mov	r0, r2
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006368:	f7fb faf2 	bl	8001950 <_dbg_check_leave_isr>
 800636c:	f7fd fae0 	bl	8003930 <_port_irq_epilogue>
}
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40026400 	.word	0x40026400
 800637c:	20000e14 	.word	0x20000e14

08006380 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8006386:	f7fc fb9b 	bl	8002ac0 <_stats_increase_irq>
 800638a:	f7fb fac1 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800638e:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <Vector154+0x48>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	0c1b      	lsrs	r3, r3, #16
 8006394:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006398:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 16;
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <Vector154+0x48>)
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	0412      	lsls	r2, r2, #16
 80063a0:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <Vector154+0x4c>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d006      	beq.n	80063b8 <Vector154+0x38>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <Vector154+0x4c>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	4a07      	ldr	r2, [pc, #28]	; (80063cc <Vector154+0x4c>)
 80063b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063b2:	4610      	mov	r0, r2
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80063b8:	f7fb faca 	bl	8001950 <_dbg_check_leave_isr>
 80063bc:	f7fd fab8 	bl	8003930 <_port_irq_epilogue>
}
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40026400 	.word	0x40026400
 80063cc:	20000e14 	.word	0x20000e14

080063d0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80063d6:	f7fc fb73 	bl	8002ac0 <_stats_increase_irq>
 80063da:	f7fb fa99 	bl	8001910 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <Vector158+0x48>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	0d9b      	lsrs	r3, r3, #22
 80063e4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80063e8:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 22;
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <Vector158+0x48>)
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	0592      	lsls	r2, r2, #22
 80063f0:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <Vector158+0x4c>)
 80063f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <Vector158+0x38>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <Vector158+0x4c>)
 80063fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fe:	4a07      	ldr	r2, [pc, #28]	; (800641c <Vector158+0x4c>)
 8006400:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006402:	4610      	mov	r0, r2
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8006408:	f7fb faa2 	bl	8001950 <_dbg_check_leave_isr>
 800640c:	f7fd fa90 	bl	8003930 <_port_irq_epilogue>
}
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40026400 	.word	0x40026400
 800641c:	20000e14 	.word	0x20000e14

08006420 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
  int i;

  dma_streams_mask = 0;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <dmaInit+0x68>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800642c:	2300      	movs	r3, #0
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	e011      	b.n	8006456 <dmaInit+0x36>
    _stm32_dma_streams[i].stream->CR = 0;
 8006432:	4916      	ldr	r1, [pc, #88]	; (800648c <dmaInit+0x6c>)
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <dmaInit+0x70>)
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2100      	movs	r1, #0
 800644c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3301      	adds	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b0f      	cmp	r3, #15
 800645a:	ddea      	ble.n	8006432 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <dmaInit+0x74>)
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <dmaInit+0x74>)
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <dmaInit+0x78>)
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <dmaInit+0x78>)
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	60da      	str	r2, [r3, #12]
}
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000e10 	.word	0x20000e10
 800648c:	08009940 	.word	0x08009940
 8006490:	20000e14 	.word	0x20000e14
 8006494:	40026000 	.word	0x40026000
 8006498:	40026400 	.word	0x40026400
 800649c:	f3af 8000 	nop.w

080064a0 <hal_lld_backup_domain_init>:
/**
 * @brief   Initializes the backup domain.
 * @note    WARNING! Changing clock source impossible without resetting
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <hal_lld_backup_domain_init+0x40>)
 80064a6:	4a0e      	ldr	r2, [pc, #56]	; (80064e0 <hal_lld_backup_domain_init+0x40>)
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ae:	601a      	str	r2, [r3, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <hal_lld_backup_domain_init+0x44>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064bc:	d006      	beq.n	80064cc <hal_lld_backup_domain_init+0x2c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <hal_lld_backup_domain_init+0x44>)
 80064c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064c4:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <hal_lld_backup_domain_init+0x44>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <hal_lld_backup_domain_init+0x40>)
 80064ce:	4a04      	ldr	r2, [pc, #16]	; (80064e0 <hal_lld_backup_domain_init+0x40>)
 80064d0:	6852      	ldr	r2, [r2, #4]
 80064d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064d6:	605a      	str	r2, [r3, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40007000 	.word	0x40007000
 80064e4:	40023800 	.word	0x40023800
 80064e8:	f3af 8000 	nop.w
 80064ec:	f3af 8000 	nop.w

080064f0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80064f4:	4b17      	ldr	r3, [pc, #92]	; (8006554 <hal_lld_init+0x64>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	4b16      	ldr	r3, [pc, #88]	; (8006554 <hal_lld_init+0x64>)
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <hal_lld_init+0x64>)
 8006502:	2200      	movs	r2, #0
 8006504:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <hal_lld_init+0x64>)
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <hal_lld_init+0x64>)
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	615a      	str	r2, [r3, #20]
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <hal_lld_init+0x64>)
 8006514:	2200      	movs	r2, #0
 8006516:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006518:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <hal_lld_init+0x64>)
 800651a:	4a0e      	ldr	r2, [pc, #56]	; (8006554 <hal_lld_init+0x64>)
 800651c:	6a12      	ldr	r2, [r2, #32]
 800651e:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8006522:	621a      	str	r2, [r3, #32]
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <hal_lld_init+0x64>)
 8006526:	2200      	movs	r2, #0
 8006528:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <hal_lld_init+0x64>)
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <hal_lld_init+0x64>)
 8006530:	f04f 32ff 	mov.w	r2, #4294967295
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <hal_lld_init+0x64>)
 8006538:	2200      	movs	r2, #0
 800653a:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <hal_lld_init+0x64>)
 800653e:	4a05      	ldr	r2, [pc, #20]	; (8006554 <hal_lld_init+0x64>)
 8006540:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006542:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8006548:	f7ff ffaa 	bl	80064a0 <hal_lld_backup_domain_init>

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800654c:	f7ff ff68 	bl	8006420 <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	f3af 8000 	nop.w
 800655c:	f3af 8000 	nop.w

08006560 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8006564:	4b41      	ldr	r3, [pc, #260]	; (800666c <stm32_clock_init+0x10c>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656a:	641a      	str	r2, [r3, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800656c:	4b40      	ldr	r3, [pc, #256]	; (8006670 <stm32_clock_init+0x110>)
 800656e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006572:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006574:	4b3d      	ldr	r3, [pc, #244]	; (800666c <stm32_clock_init+0x10c>)
 8006576:	4a3d      	ldr	r2, [pc, #244]	; (800666c <stm32_clock_init+0x10c>)
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006580:	bf00      	nop
 8006582:	4b3a      	ldr	r3, [pc, #232]	; (800666c <stm32_clock_init+0x10c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f9      	beq.n	8006582 <stm32_clock_init+0x22>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800658e:	4b37      	ldr	r3, [pc, #220]	; (800666c <stm32_clock_init+0x10c>)
 8006590:	4a36      	ldr	r2, [pc, #216]	; (800666c <stm32_clock_init+0x10c>)
 8006592:	6892      	ldr	r2, [r2, #8]
 8006594:	f022 0203 	bic.w	r2, r2, #3
 8006598:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800659a:	4b34      	ldr	r3, [pc, #208]	; (800666c <stm32_clock_init+0x10c>)
 800659c:	4a33      	ldr	r2, [pc, #204]	; (800666c <stm32_clock_init+0x10c>)
 800659e:	6892      	ldr	r2, [r2, #8]
 80065a0:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80065a2:	bf00      	nop
 80065a4:	4b31      	ldr	r3, [pc, #196]	; (800666c <stm32_clock_init+0x10c>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 030c 	and.w	r3, r3, #12
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f9      	bne.n	80065a4 <stm32_clock_init+0x44>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80065b0:	4b2e      	ldr	r3, [pc, #184]	; (800666c <stm32_clock_init+0x10c>)
 80065b2:	4a2e      	ldr	r2, [pc, #184]	; (800666c <stm32_clock_init+0x10c>)
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80065ba:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <stm32_clock_init+0x10c>)
 80065be:	2200      	movs	r2, #0
 80065c0:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <stm32_clock_init+0x10c>)
 80065c4:	4a29      	ldr	r2, [pc, #164]	; (800666c <stm32_clock_init+0x10c>)
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065cc:	601a      	str	r2, [r3, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80065ce:	bf00      	nop
 80065d0:	4b26      	ldr	r3, [pc, #152]	; (800666c <stm32_clock_init+0x10c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f9      	beq.n	80065d0 <stm32_clock_init+0x70>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80065dc:	4b23      	ldr	r3, [pc, #140]	; (800666c <stm32_clock_init+0x10c>)
 80065de:	4a23      	ldr	r2, [pc, #140]	; (800666c <stm32_clock_init+0x10c>)
 80065e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80065e8:	bf00      	nop
 80065ea:	4b20      	ldr	r3, [pc, #128]	; (800666c <stm32_clock_init+0x10c>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f9      	beq.n	80065ea <stm32_clock_init+0x8a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <stm32_clock_init+0x10c>)
 80065f8:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <stm32_clock_init+0x114>)
 80065fa:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <stm32_clock_init+0x10c>)
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <stm32_clock_init+0x10c>)
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006606:	601a      	str	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8006608:	bf00      	nop
 800660a:	4b19      	ldr	r3, [pc, #100]	; (8006670 <stm32_clock_init+0x110>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f9      	beq.n	800660a <stm32_clock_init+0xaa>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006616:	bf00      	nop
 8006618:	4b14      	ldr	r3, [pc, #80]	; (800666c <stm32_clock_init+0x10c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f9      	beq.n	8006618 <stm32_clock_init+0xb8>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8006624:	4b11      	ldr	r3, [pc, #68]	; (800666c <stm32_clock_init+0x10c>)
 8006626:	4a14      	ldr	r2, [pc, #80]	; (8006678 <stm32_clock_init+0x118>)
 8006628:	609a      	str	r2, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800662a:	4b14      	ldr	r3, [pc, #80]	; (800667c <stm32_clock_init+0x11c>)
 800662c:	f240 7205 	movw	r2, #1797	; 0x705
 8006630:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <stm32_clock_init+0x10c>)
 8006634:	4a0d      	ldr	r2, [pc, #52]	; (800666c <stm32_clock_init+0x10c>)
 8006636:	6892      	ldr	r2, [r2, #8]
 8006638:	f042 0202 	orr.w	r2, r2, #2
 800663c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800663e:	bf00      	nop
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <stm32_clock_init+0x10c>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 030c 	and.w	r3, r3, #12
 8006648:	2b08      	cmp	r3, #8
 800664a:	d1f9      	bne.n	8006640 <stm32_clock_init+0xe0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <stm32_clock_init+0x10c>)
 800664e:	4a07      	ldr	r2, [pc, #28]	; (800666c <stm32_clock_init+0x10c>)
 8006650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006656:	645a      	str	r2, [r3, #68]	; 0x44
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <stm32_clock_init+0x10c>)
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <stm32_clock_init+0x10c>)
 800665c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800665e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006662:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	40023800 	.word	0x40023800
 8006670:	40007000 	.word	0x40007000
 8006674:	0740540c 	.word	0x0740540c
 8006678:	38089400 	.word	0x38089400
 800667c:	40023c00 	.word	0x40023c00

08006680 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	2320      	movs	r3, #32
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w

080066a0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0

  port_lock();
 80066c4:	f7ff ffdc 	bl	8006680 <port_lock>
}
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0

  port_unlock();
 80066d4:	f7ff ffe4 	bl	80066a0 <port_unlock>
}
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w

080066e0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 80066e4:	f7ff ffec 	bl	80066c0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 80066e8:	f7fc fa2a 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80066ec:	f7fb f8e0 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	f3af 8000 	nop.w
 80066f8:	f3af 8000 	nop.w
 80066fc:	f3af 8000 	nop.w

08006700 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8006704:	f7fb f8ec 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006708:	f7fc fa22 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800670c:	f7ff ffe0 	bl	80066d0 <port_unlock_from_isr>
}
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	f3af 8000 	nop.w
 800671c:	f3af 8000 	nop.w

08006720 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8006724:	f7ff ffdc 	bl	80066e0 <chSysLockFromISR>
}
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w

08006730 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8006734:	f7ff ffe4 	bl	8006700 <chSysUnlockFromISR>
}
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w

08006740 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]

  chThdResumeI(trp, msg);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	f7fc f857 	bl	8002800 <chThdResumeI>
}
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	f3af 8000 	nop.w
 800675c:	f3af 8000 	nop.w

08006760 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector88) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();
 8006766:	f7fc f9ab 	bl	8002ac0 <_stats_increase_irq>
 800676a:	f7fb f8d1 	bl	8001910 <_dbg_check_enter_isr>

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <Vector88+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	607b      	str	r3, [r7, #4]
  ADC1->SR = 0;
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <Vector88+0x90>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02d      	beq.n	80067e0 <Vector88+0x80>
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <Vector88+0x94>)
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d027      	beq.n	80067e0 <Vector88+0x80>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <Vector88+0x94>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d023      	beq.n	80067e0 <Vector88+0x80>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8006798:	4816      	ldr	r0, [pc, #88]	; (80067f4 <Vector88+0x94>)
 800679a:	f000 f851 	bl	8006840 <adc_lld_stop_conversion>
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <Vector88+0x94>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <Vector88+0x68>
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <Vector88+0x94>)
 80067aa:	2205      	movs	r2, #5
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <Vector88+0x94>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	480f      	ldr	r0, [pc, #60]	; (80067f4 <Vector88+0x94>)
 80067b6:	2101      	movs	r1, #1
 80067b8:	4798      	blx	r3
 80067ba:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <Vector88+0x94>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d102      	bne.n	80067c8 <Vector88+0x68>
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <Vector88+0x94>)
 80067c4:	2202      	movs	r2, #2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <Vector88+0x94>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]
 80067ce:	f7ff ffa7 	bl	8006720 <osalSysLockFromISR>
 80067d2:	4809      	ldr	r0, [pc, #36]	; (80067f8 <Vector88+0x98>)
 80067d4:	f04f 31ff 	mov.w	r1, #4294967295
 80067d8:	f7ff ffb2 	bl	8006740 <osalThreadResumeI>
 80067dc:	f7ff ffa8 	bl	8006730 <osalSysUnlockFromISR>
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 80067e0:	f7fb f8b6 	bl	8001950 <_dbg_check_leave_isr>
 80067e4:	f7fd f8a4 	bl	8003930 <_port_irq_epilogue>
}
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40012000 	.word	0x40012000
 80067f4:	20000e94 	.word	0x20000e94
 80067f8:	20000ea8 	.word	0x20000ea8
 80067fc:	f3af 8000 	nop.w

08006800 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8006804:	4808      	ldr	r0, [pc, #32]	; (8006828 <adc_lld_init+0x28>)
 8006806:	f7fd f9cb 	bl	8003ba0 <adcObjectInit>
  ADCD1.adc = ADC1;
 800680a:	4b07      	ldr	r3, [pc, #28]	; (8006828 <adc_lld_init+0x28>)
 800680c:	4a07      	ldr	r2, [pc, #28]	; (800682c <adc_lld_init+0x2c>)
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <adc_lld_init+0x28>)
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <adc_lld_init+0x30>)
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <adc_lld_init+0x28>)
 8006818:	4a06      	ldr	r2, [pc, #24]	; (8006834 <adc_lld_init+0x34>)
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC_IRQn, STM32_ADC_IRQ_PRIORITY);
 800681c:	2012      	movs	r0, #18
 800681e:	2106      	movs	r1, #6
 8006820:	f7ff fb4e 	bl	8005ec0 <nvicEnableVector>
}
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000e94 	.word	0x20000e94
 800682c:	40012000 	.word	0x40012000
 8006830:	080099d0 	.word	0x080099d0
 8006834:	00022c16 	.word	0x00022c16
 8006838:	f3af 8000 	nop.w
 800683c:	f3af 8000 	nop.w

08006840 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  dmaStreamDisable(adcp->dmastp);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	f022 021f 	bic.w	r2, r2, #31
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	bf00      	nop
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f7      	bne.n	800685e <adc_lld_stop_conversion+0x1e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006878:	7a12      	ldrb	r2, [r2, #8]
 800687a:	213d      	movs	r1, #61	; 0x3d
 800687c:	fa01 f202 	lsl.w	r2, r1, r2
 8006880:	601a      	str	r2, [r3, #0]
  adcp->adc->CR1 = 0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	2200      	movs	r2, #0
 8006888:	605a      	str	r2, [r3, #4]
  adcp->adc->CR2 = 0;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	2201      	movs	r2, #1
 8006898:	609a      	str	r2, [r3, #8]
}
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	f3af 8000 	nop.w
 80068a8:	f3af 8000 	nop.w
 80068ac:	f3af 8000 	nop.w

080068b0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	2320      	movs	r3, #32
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	f3af 8000 	nop.w

080068d0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w

080068f0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0

  port_lock();
 80068f4:	f7ff ffdc 	bl	80068b0 <port_lock>
}
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	f3af 8000 	nop.w

08006900 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0

  port_unlock();
 8006904:	f7ff ffe4 	bl	80068d0 <port_unlock>
}
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8006914:	f7ff ffec 	bl	80068f0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8006918:	f7fc f912 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800691c:	f7fa ffc8 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	f3af 8000 	nop.w
 8006928:	f3af 8000 	nop.w
 800692c:	f3af 8000 	nop.w

08006930 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8006934:	f7fa ffd4 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006938:	f7fc f90a 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800693c:	f7ff ffe0 	bl	8006900 <port_unlock_from_isr>
}
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	f3af 8000 	nop.w
 8006948:	f3af 8000 	nop.w
 800694c:	f3af 8000 	nop.w

08006950 <osalSysHalt>:
 *
 * @param[in] reason    the halt message pointer
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  chSysHalt(reason);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fa fec1 	bl	80016e0 <chSysHalt>
}
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	f3af 8000 	nop.w
 8006968:	f3af 8000 	nop.w
 800696c:	f3af 8000 	nop.w

08006970 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8006974:	f7ff ffcc 	bl	8006910 <chSysLockFromISR>
}
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8006984:	f7ff ffd4 	bl	8006930 <chSysUnlockFromISR>
}
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	f3af 8000 	nop.w

08006990 <osalThreadDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]

  chThdDequeueAllI(tqp, msg);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	f7fb ff8f 	bl	80028c0 <chThdDequeueAllI>
}
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	f3af 8000 	nop.w
 80069ac:	f3af 8000 	nop.w

080069b0 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]

  chEvtBroadcastFlagsI(esp, flags);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	f7fc facf 	bl	8002f60 <chEvtBroadcastFlagsI>
}
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	f3af 8000 	nop.w
 80069cc:	f3af 8000 	nop.w

080069d0 <mii_write>:
 * @param[in] reg       register number
 * @param[in] value     new register value
 *
 * @notapi
 */
void mii_write(MACDriver *macp, uint32_t reg, uint32_t value) {
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]

  ETH->MACMIIDR = value;
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <mii_write+0x3c>)
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	615a      	str	r2, [r3, #20]
  ETH->MACMIIAR = macp->phyaddr | (reg << 6) | MACMIIDR_CR |
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <mii_write+0x3c>)
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	6a11      	ldr	r1, [r2, #32]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	0192      	lsls	r2, r2, #6
 80069ec:	430a      	orrs	r2, r1
                  ETH_MACMIIAR_MW | ETH_MACMIIAR_MB;
 80069ee:	f042 0213 	orr.w	r2, r2, #19
 * @notapi
 */
void mii_write(MACDriver *macp, uint32_t reg, uint32_t value) {

  ETH->MACMIIDR = value;
  ETH->MACMIIAR = macp->phyaddr | (reg << 6) | MACMIIDR_CR |
 80069f2:	611a      	str	r2, [r3, #16]
                  ETH_MACMIIAR_MW | ETH_MACMIIAR_MB;
  while ((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 80069f4:	bf00      	nop
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <mii_write+0x3c>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f9      	bne.n	80069f6 <mii_write+0x26>
    ;
}
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40028000 	.word	0x40028000

08006a10 <mii_read>:
 *
 * @return              The PHY register content.
 *
 * @notapi
 */
uint32_t mii_read(MACDriver *macp, uint32_t reg) {
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]

  ETH->MACMIIAR = macp->phyaddr | (reg << 6) | MACMIIDR_CR | ETH_MACMIIAR_MB;
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <mii_read+0x3c>)
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6a11      	ldr	r1, [r2, #32]
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	0192      	lsls	r2, r2, #6
 8006a24:	430a      	orrs	r2, r1
 8006a26:	f042 0211 	orr.w	r2, r2, #17
 8006a2a:	611a      	str	r2, [r3, #16]
  while ((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 8006a2c:	bf00      	nop
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <mii_read+0x3c>)
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f9      	bne.n	8006a2e <mii_read+0x1e>
    ;
  return ETH->MACMIIDR;
 8006a3a:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <mii_read+0x3c>)
 8006a3c:	695b      	ldr	r3, [r3, #20]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40028000 	.word	0x40028000

08006a50 <mii_find_phy>:
/**
 * @brief   PHY address detection.
 *
 * @param[in] macp      pointer to the @p MACDriver object
 */
static void mii_find_phy(MACDriver *macp) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t i;

#if STM32_MAC_PHY_TIMEOUT > 0
  unsigned n = STM32_MAC_PHY_TIMEOUT;
 8006a58:	2364      	movs	r3, #100	; 0x64
 8006a5a:	60bb      	str	r3, [r7, #8]
 do {
#endif
    for (i = 0U; i < 31U; i++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e020      	b.n	8006aa4 <mii_find_phy+0x54>
      macp->phyaddr = i << 11U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	02da      	lsls	r2, r3, #11
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	621a      	str	r2, [r3, #32]
      ETH->MACMIIDR = (i << 6U) | MACMIIDR_CR;
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <mii_find_phy+0x74>)
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	0192      	lsls	r2, r2, #6
 8006a70:	f042 0210 	orr.w	r2, r2, #16
 8006a74:	615a      	str	r2, [r3, #20]
      if ((mii_read(macp, MII_PHYSID1) == (BOARD_PHY_ID >> 16U)) &&
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	2102      	movs	r1, #2
 8006a7a:	f7ff ffc9 	bl	8006a10 <mii_read>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b22      	cmp	r3, #34	; 0x22
 8006a82:	d10c      	bne.n	8006a9e <mii_find_phy+0x4e>
          ((mii_read(macp, MII_PHYSID2) & 0xFFF0U) == (BOARD_PHY_ID & 0xFFF0U))) {
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	2103      	movs	r1, #3
 8006a88:	f7ff ffc2 	bl	8006a10 <mii_read>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006a92:	4013      	ands	r3, r2
 do {
#endif
    for (i = 0U; i < 31U; i++) {
      macp->phyaddr = i << 11U;
      ETH->MACMIIDR = (i << 6U) | MACMIIDR_CR;
      if ((mii_read(macp, MII_PHYSID1) == (BOARD_PHY_ID >> 16U)) &&
 8006a94:	f241 6210 	movw	r2, #5648	; 0x1610
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <mii_find_phy+0x4e>
          ((mii_read(macp, MII_PHYSID2) & 0xFFF0U) == (BOARD_PHY_ID & 0xFFF0U))) {
        return;
 8006a9c:	e00e      	b.n	8006abc <mii_find_phy+0x6c>

#if STM32_MAC_PHY_TIMEOUT > 0
  unsigned n = STM32_MAC_PHY_TIMEOUT;
 do {
#endif
    for (i = 0U; i < 31U; i++) {
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b1e      	cmp	r3, #30
 8006aa8:	d9db      	bls.n	8006a62 <mii_find_phy+0x12>
          ((mii_read(macp, MII_PHYSID2) & 0xFFF0U) == (BOARD_PHY_ID & 0xFFF0U))) {
        return;
      }
    }
#if STM32_MAC_PHY_TIMEOUT > 0
    n--;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
  } while (n > 0U);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1d2      	bne.n	8006a5c <mii_find_phy+0xc>
#endif
  /* Wrong or defective board.*/
  osalSysHalt("MAC failure");
 8006ab6:	4804      	ldr	r0, [pc, #16]	; (8006ac8 <mii_find_phy+0x78>)
 8006ab8:	f7ff ff4a 	bl	8006950 <osalSysHalt>
}
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40028000 	.word	0x40028000
 8006ac8:	08009490 	.word	0x08009490
 8006acc:	f3af 8000 	nop.w

08006ad0 <Vector134>:

/*===========================================================================*/
/* Driver interrupt handlers.                                                */
/*===========================================================================*/

OSAL_IRQ_HANDLER(STM32_ETH_HANDLER) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
  uint32_t dmasr;

  OSAL_IRQ_PROLOGUE();
 8006ad6:	f7fb fff3 	bl	8002ac0 <_stats_increase_irq>
 8006ada:	f7fa ff19 	bl	8001910 <_dbg_check_enter_isr>

  dmasr = ETH->DMASR;
 8006ade:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <Vector134+0x74>)
 8006ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	607b      	str	r3, [r7, #4]
  ETH->DMASR = dmasr; /* Clear status bits.*/
 8006aea:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <Vector134+0x74>)
 8006aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af0:	3314      	adds	r3, #20
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]

  if (dmasr & ETH_DMASR_RS) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <Vector134+0x4a>
    /* Data Received.*/
    osalSysLockFromISR();
 8006b00:	f7ff ff36 	bl	8006970 <osalSysLockFromISR>
    osalThreadDequeueAllI(&ETHD1.rdqueue, MSG_RESET);
 8006b04:	4810      	ldr	r0, [pc, #64]	; (8006b48 <Vector134+0x78>)
 8006b06:	f06f 0101 	mvn.w	r1, #1
 8006b0a:	f7ff ff41 	bl	8006990 <osalThreadDequeueAllI>
#if MAC_USE_EVENTS
    osalEventBroadcastFlagsI(&ETHD1.rdevent, 0);
 8006b0e:	480f      	ldr	r0, [pc, #60]	; (8006b4c <Vector134+0x7c>)
 8006b10:	2100      	movs	r1, #0
 8006b12:	f7ff ff4d 	bl	80069b0 <osalEventBroadcastFlagsI>
#endif
    osalSysUnlockFromISR();
 8006b16:	f7ff ff33 	bl	8006980 <osalSysUnlockFromISR>
  }

  if (dmasr & ETH_DMASR_TS) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <Vector134+0x66>
    /* Data Transmitted.*/
    osalSysLockFromISR();
 8006b24:	f7ff ff24 	bl	8006970 <osalSysLockFromISR>
    osalThreadDequeueAllI(&ETHD1.tdqueue, MSG_RESET);
 8006b28:	4809      	ldr	r0, [pc, #36]	; (8006b50 <Vector134+0x80>)
 8006b2a:	f06f 0101 	mvn.w	r1, #1
 8006b2e:	f7ff ff2f 	bl	8006990 <osalThreadDequeueAllI>
    osalSysUnlockFromISR();
 8006b32:	f7ff ff25 	bl	8006980 <osalSysUnlockFromISR>
  }

  OSAL_IRQ_EPILOGUE();
 8006b36:	f7fa ff0b 	bl	8001950 <_dbg_check_leave_isr>
 8006b3a:	f7fc fef9 	bl	8003930 <_port_irq_epilogue>
}
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40028000 	.word	0x40028000
 8006b48:	20000ed8 	.word	0x20000ed8
 8006b4c:	20000ee0 	.word	0x20000ee0
 8006b50:	20000ed0 	.word	0x20000ed0
 8006b54:	f3af 8000 	nop.w
 8006b58:	f3af 8000 	nop.w
 8006b5c:	f3af 8000 	nop.w

08006b60 <mac_lld_init>:
/**
 * @brief   Low level MAC initialization.
 *
 * @notapi
 */
void mac_lld_init(void) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
  unsigned i;

  macObjectInit(&ETHD1);
 8006b66:	484d      	ldr	r0, [pc, #308]	; (8006c9c <mac_lld_init+0x13c>)
 8006b68:	f7fd f892 	bl	8003c90 <macObjectInit>
  ETHD1.link_up = false;
 8006b6c:	4b4b      	ldr	r3, [pc, #300]	; (8006c9c <mac_lld_init+0x13c>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	771a      	strb	r2, [r3, #28]

  /* Descriptor tables are initialized in chained mode, note that the first
     word is not initialized here but in mac_lld_start().*/
  for (i = 0; i < STM32_MAC_RECEIVE_BUFFERS; i++) {
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	e025      	b.n	8006bc4 <mac_lld_init+0x64>
    rd[i].rdes1 = STM32_RDES1_RCH | STM32_MAC_BUFFERS_SIZE;
 8006b78:	4a49      	ldr	r2, [pc, #292]	; (8006ca0 <mac_lld_init+0x140>)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4413      	add	r3, r2
 8006b80:	f244 52f2 	movw	r2, #17906	; 0x45f2
 8006b84:	605a      	str	r2, [r3, #4]
    rd[i].rdes2 = (uint32_t)rb[i];
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b8c:	fb02 f203 	mul.w	r2, r2, r3
 8006b90:	4b44      	ldr	r3, [pc, #272]	; (8006ca4 <mac_lld_init+0x144>)
 8006b92:	4413      	add	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	4942      	ldr	r1, [pc, #264]	; (8006ca0 <mac_lld_init+0x140>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	601a      	str	r2, [r3, #0]
    rd[i].rdes3 = (uint32_t)&rd[(i + 1) % STM32_MAC_RECEIVE_BUFFERS];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	011a      	lsls	r2, r3, #4
 8006bac:	4b3c      	ldr	r3, [pc, #240]	; (8006ca0 <mac_lld_init+0x140>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	493b      	ldr	r1, [pc, #236]	; (8006ca0 <mac_lld_init+0x140>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	440b      	add	r3, r1
 8006bba:	3308      	adds	r3, #8
 8006bbc:	605a      	str	r2, [r3, #4]
  macObjectInit(&ETHD1);
  ETHD1.link_up = false;

  /* Descriptor tables are initialized in chained mode, note that the first
     word is not initialized here but in mac_lld_start().*/
  for (i = 0; i < STM32_MAC_RECEIVE_BUFFERS; i++) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d9d6      	bls.n	8006b78 <mac_lld_init+0x18>
    rd[i].rdes1 = STM32_RDES1_RCH | STM32_MAC_BUFFERS_SIZE;
    rd[i].rdes2 = (uint32_t)rb[i];
    rd[i].rdes3 = (uint32_t)&rd[(i + 1) % STM32_MAC_RECEIVE_BUFFERS];
  }
  for (i = 0; i < STM32_MAC_TRANSMIT_BUFFERS; i++) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e024      	b.n	8006c1a <mac_lld_init+0xba>
    td[i].tdes1 = 0;
 8006bd0:	4a35      	ldr	r2, [pc, #212]	; (8006ca8 <mac_lld_init+0x148>)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	4413      	add	r3, r2
 8006bd8:	2200      	movs	r2, #0
 8006bda:	605a      	str	r2, [r3, #4]
    td[i].tdes2 = (uint32_t)tb[i];
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006be2:	fb02 f203 	mul.w	r2, r2, r3
 8006be6:	4b31      	ldr	r3, [pc, #196]	; (8006cac <mac_lld_init+0x14c>)
 8006be8:	4413      	add	r3, r2
 8006bea:	461a      	mov	r2, r3
 8006bec:	492e      	ldr	r1, [pc, #184]	; (8006ca8 <mac_lld_init+0x148>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	601a      	str	r2, [r3, #0]
    td[i].tdes3 = (uint32_t)&td[(i + 1) % STM32_MAC_TRANSMIT_BUFFERS];
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	011a      	lsls	r2, r3, #4
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <mac_lld_init+0x148>)
 8006c04:	4413      	add	r3, r2
 8006c06:	461a      	mov	r2, r3
 8006c08:	4927      	ldr	r1, [pc, #156]	; (8006ca8 <mac_lld_init+0x148>)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	440b      	add	r3, r1
 8006c10:	3308      	adds	r3, #8
 8006c12:	605a      	str	r2, [r3, #4]
  for (i = 0; i < STM32_MAC_RECEIVE_BUFFERS; i++) {
    rd[i].rdes1 = STM32_RDES1_RCH | STM32_MAC_BUFFERS_SIZE;
    rd[i].rdes2 = (uint32_t)rb[i];
    rd[i].rdes3 = (uint32_t)&rd[(i + 1) % STM32_MAC_RECEIVE_BUFFERS];
  }
  for (i = 0; i < STM32_MAC_TRANSMIT_BUFFERS; i++) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	607b      	str	r3, [r7, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d9d7      	bls.n	8006bd0 <mac_lld_init+0x70>
#else
  AFIO->MAPR &= ~AFIO_MAPR_MII_RMII_SEL;
#endif
#elif defined(STM32F2XX) || defined(STM32F4XX)
#if defined(BOARD_PHY_RMII)
  SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <mac_lld_init+0x150>)
 8006c22:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <mac_lld_init+0x150>)
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c2a:	605a      	str	r2, [r3, #4]
#else
#error "unsupported STM32 platform for MAC driver"
#endif

  /* Reset of the MAC core.*/
  rccResetETH();
 8006c2c:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <mac_lld_init+0x154>)
 8006c2e:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <mac_lld_init+0x154>)
 8006c30:	6912      	ldr	r2, [r2, #16]
 8006c32:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006c36:	611a      	str	r2, [r3, #16]
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <mac_lld_init+0x154>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	611a      	str	r2, [r3, #16]

  /* MAC clocks temporary activation.*/
  rccEnableETH(false);
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <mac_lld_init+0x154>)
 8006c40:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <mac_lld_init+0x154>)
 8006c42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c44:	f042 6260 	orr.w	r2, r2, #234881024	; 0xe000000
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30

  /* PHY address setup.*/
#if defined(BOARD_PHY_ADDRESS)
  ETHD1.phyaddr = BOARD_PHY_ADDRESS << 11;
#else
  mii_find_phy(&ETHD1);
 8006c4a:	4814      	ldr	r0, [pc, #80]	; (8006c9c <mac_lld_init+0x13c>)
 8006c4c:	f7ff ff00 	bl	8006a50 <mii_find_phy>
#if defined(BOARD_PHY_RESET)
  /* PHY board-specific reset procedure.*/
  BOARD_PHY_RESET();
#else
  /* PHY soft reset procedure.*/
  mii_write(&ETHD1, MII_BMCR, BMCR_RESET);
 8006c50:	4812      	ldr	r0, [pc, #72]	; (8006c9c <mac_lld_init+0x13c>)
 8006c52:	2100      	movs	r1, #0
 8006c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c58:	f7ff feba 	bl	80069d0 <mii_write>
#if defined(BOARD_PHY_RESET_DELAY)
  chSysPolledDelayX(BOARD_PHY_RESET_DELAY);
#endif
  while (mii_read(&ETHD1, MII_BMCR) & BMCR_RESET)
 8006c5c:	bf00      	nop
 8006c5e:	480f      	ldr	r0, [pc, #60]	; (8006c9c <mac_lld_init+0x13c>)
 8006c60:	2100      	movs	r1, #0
 8006c62:	f7ff fed5 	bl	8006a10 <mii_read>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f6      	bne.n	8006c5e <mac_lld_init+0xfe>
    ;
#endif

#if STM32_MAC_ETH1_CHANGE_PHY_STATE
  /* PHY in power down mode until the driver will be started.*/
  mii_write(&ETHD1, MII_BMCR, mii_read(&ETHD1, MII_BMCR) | BMCR_PDOWN);
 8006c70:	480a      	ldr	r0, [pc, #40]	; (8006c9c <mac_lld_init+0x13c>)
 8006c72:	2100      	movs	r1, #0
 8006c74:	f7ff fecc 	bl	8006a10 <mii_read>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c7e:	4807      	ldr	r0, [pc, #28]	; (8006c9c <mac_lld_init+0x13c>)
 8006c80:	2100      	movs	r1, #0
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7ff fea4 	bl	80069d0 <mii_write>
#endif

  /* MAC clocks stopped again.*/
  rccDisableETH(false);
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <mac_lld_init+0x154>)
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <mac_lld_init+0x154>)
 8006c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c8e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000ec8 	.word	0x20000ec8
 8006ca0:	20000ef4 	.word	0x20000ef4
 8006ca4:	20000f54 	.word	0x20000f54
 8006ca8:	20000f34 	.word	0x20000f34
 8006cac:	20002724 	.word	0x20002724
 8006cb0:	40013800 	.word	0x40013800
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	f3af 8000 	nop.w
 8006cbc:	f3af 8000 	nop.w

08006cc0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w

08006ce0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w

08006d00 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0

  port_lock();
 8006d04:	f7ff ffdc 	bl	8006cc0 <port_lock>
}
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w

08006d10 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0

  port_unlock();
 8006d14:	f7ff ffe4 	bl	8006ce0 <port_unlock>
}
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	f3af 8000 	nop.w

08006d20 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0

  port_lock();
 8006d24:	f7ff ffcc 	bl	8006cc0 <port_lock>
  _stats_start_measure_crit_thd();
 8006d28:	f7fb fefa 	bl	8002b20 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8006d2c:	f7fa fd90 	bl	8001850 <_dbg_check_lock>
}
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	f3af 8000 	nop.w
 8006d38:	f3af 8000 	nop.w
 8006d3c:	f3af 8000 	nop.w

08006d40 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0

  _dbg_check_unlock();
 8006d44:	f7fa fd9c 	bl	8001880 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8006d48:	f7fb fef2 	bl	8002b30 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <chSysUnlock+0x34>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <chSysUnlock+0x34>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d00a      	beq.n	8006d6c <chSysUnlock+0x2c>
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <chSysUnlock+0x34>)
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <chSysUnlock+0x34>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d202      	bcs.n	8006d6c <chSysUnlock+0x2c>
 8006d66:	4804      	ldr	r0, [pc, #16]	; (8006d78 <chSysUnlock+0x38>)
 8006d68:	f7fa fcba 	bl	80016e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
 8006d6c:	f7ff ffb8 	bl	8006ce0 <port_unlock>
}
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000800 	.word	0x20000800
 8006d78:	08009a20 	.word	0x08009a20
 8006d7c:	f3af 8000 	nop.w

08006d80 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8006d84:	f7ff ffbc 	bl	8006d00 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8006d88:	f7fb feda 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8006d8c:	f7fa fd90 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	f3af 8000 	nop.w
 8006d98:	f3af 8000 	nop.w
 8006d9c:	f3af 8000 	nop.w

08006da0 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8006da4:	f7fa fd9c 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8006da8:	f7fb fed2 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8006dac:	f7ff ffb0 	bl	8006d10 <port_unlock_from_isr>
}
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	f3af 8000 	nop.w
 8006dbc:	f3af 8000 	nop.w

08006dc0 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0

  chSysLock();
 8006dc4:	f7ff ffac 	bl	8006d20 <chSysLock>
}
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w

08006dd0 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0

  chSysUnlock();
 8006dd4:	f7ff ffb4 	bl	8006d40 <chSysUnlock>
}
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	f3af 8000 	nop.w

08006de0 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8006de4:	f7ff ffcc 	bl	8006d80 <chSysLockFromISR>
}
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	f3af 8000 	nop.w

08006df0 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8006df4:	f7ff ffd4 	bl	8006da0 <chSysUnlockFromISR>
}
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w

08006e00 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

  chThdSleep(time);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fb fc71 	bl	80026f0 <chThdSleep>
}
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	f3af 8000 	nop.w
 8006e18:	f3af 8000 	nop.w
 8006e1c:	f3af 8000 	nop.w

08006e20 <osalThreadSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  return chThdSuspendS(trp);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fb fcc1 	bl	80027b0 <chThdSuspendS>
 8006e2e:	4603      	mov	r3, r0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	f3af 8000 	nop.w
 8006e3c:	f3af 8000 	nop.w

08006e40 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]

  chThdResumeI(trp, msg);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	f7fb fcd7 	bl	8002800 <chThdResumeI>
}
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	f3af 8000 	nop.w
 8006e5c:	f3af 8000 	nop.w

08006e60 <sdc_lld_prepare_read_bytes>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read_bytes(SDCDriver *sdcp,
                                       uint8_t *buf, uint32_t bytes) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  osalDbgCheck(bytes < 0x1000000);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e72:	d302      	bcc.n	8006e7a <sdc_lld_prepare_read_bytes+0x1a>
 8006e74:	481f      	ldr	r0, [pc, #124]	; (8006ef4 <sdc_lld_prepare_read_bytes+0x94>)
 8006e76:	f7fa fc33 	bl	80016e0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <sdc_lld_prepare_read_bytes+0x98>)
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7fd fa84 	bl	8004390 <_sdc_wait_for_transfer_state>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <sdc_lld_prepare_read_bytes+0x32>
    return HAL_FAILED;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e02c      	b.n	8006eec <sdc_lld_prepare_read_bytes+0x8c>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma, bytes / sizeof (uint32_t));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	0892      	lsrs	r2, r2, #2
 8006ea6:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006eb2:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ecc:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <sdc_lld_prepare_read_bytes+0x9c>)
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	f240 322a 	movw	r2, #810	; 0x32a
 8006ed8:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = bytes;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	220f      	movs	r2, #15
 8006ee8:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DTMODE |   /* multibyte data transfer */
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  return HAL_SUCCESS;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	08009a00 	.word	0x08009a00
 8006ef8:	000927c0 	.word	0x000927c0
 8006efc:	00c007ff 	.word	0x00c007ff

08006f00 <sdc_lld_prepare_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_read(SDCDriver *sdcp, uint32_t startblk,
                                 uint32_t n, uint32_t *resp) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <sdc_lld_prepare_read+0x20>
    startblk *= MMCSD_BLOCK_SIZE;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	025b      	lsls	r3, r3, #9
 8006f1e:	60bb      	str	r3, [r7, #8]

  if (n > 1) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d910      	bls.n	8006f48 <sdc_lld_prepare_read+0x48>
    /* Send read multiple blocks command to card.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	2112      	movs	r1, #18
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f000 fa7f 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <sdc_lld_prepare_read+0x44>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <sdc_lld_prepare_read+0x74>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <sdc_lld_prepare_read+0x6a>
      return HAL_FAILED;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e011      	b.n	8006f6c <sdc_lld_prepare_read+0x6c>
  }
  else{
    /* Send read single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_READ_SINGLE_BLOCK,
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	2111      	movs	r1, #17
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f000 fa6e 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <sdc_lld_prepare_read+0x66>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <sdc_lld_prepare_read+0x74>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <sdc_lld_prepare_read+0x6a>
      return HAL_FAILED;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <sdc_lld_prepare_read+0x6c>
  }

  return HAL_SUCCESS;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	fdffe008 	.word	0xfdffe008
 8006f78:	f3af 8000 	nop.w
 8006f7c:	f3af 8000 	nop.w

08006f80 <sdc_lld_prepare_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
static bool sdc_lld_prepare_write(SDCDriver *sdcp, uint32_t startblk,
                                  uint32_t n, uint32_t *resp) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]

  /* Driver handles data in 512 bytes blocks (just like HC cards). But if we
     have not HC card than we must convert address from blocks to bytes.*/
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <sdc_lld_prepare_write+0x20>
    startblk *= MMCSD_BLOCK_SIZE;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	025b      	lsls	r3, r3, #9
 8006f9e:	60bb      	str	r3, [r7, #8]

  if (n > 1) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d910      	bls.n	8006fc8 <sdc_lld_prepare_write+0x48>
    /* Write multiple blocks command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	2119      	movs	r1, #25
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f000 fa3f 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <sdc_lld_prepare_write+0x44>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <sdc_lld_prepare_write+0x74>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d012      	beq.n	8006fea <sdc_lld_prepare_write+0x6a>
      return HAL_FAILED;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e011      	b.n	8006fec <sdc_lld_prepare_write+0x6c>
  }
  else{
    /* Write single block command.*/
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_WRITE_BLOCK,
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	2118      	movs	r1, #24
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f000 fa2e 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <sdc_lld_prepare_write+0x66>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <sdc_lld_prepare_write+0x74>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <sdc_lld_prepare_write+0x6a>
      return HAL_FAILED;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <sdc_lld_prepare_write+0x6c>
  }

  return HAL_SUCCESS;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	fdffe008 	.word	0xfdffe008
 8006ff8:	f3af 8000 	nop.w
 8006ffc:	f3af 8000 	nop.w

08007000 <sdc_lld_wait_transaction_end>:
 * @return              The operation status.
 * @retval HAL_SUCCESS  operation succeeded.
 * @retval HAL_FAILED   operation failed.
 */
static bool sdc_lld_wait_transaction_end(SDCDriver *sdcp, uint32_t n,
                                         uint32_t *resp) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]

  /* Note the mask is checked before going to sleep because the interrupt
     may have occurred before reaching the critical zone.*/
  osalSysLock();
 800700c:	f7ff fed8 	bl	8006dc0 <osalSysLock>
  if (sdcp->sdio->MASK != 0)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <sdc_lld_wait_transaction_end+0x24>
    osalThreadSuspendS(&sdcp->thread);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	333c      	adds	r3, #60	; 0x3c
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff fefe 	bl	8006e20 <osalThreadSuspendS>
  if ((sdcp->sdio->STA & SDIO_STA_DATAEND) == 0) {
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <sdc_lld_wait_transaction_end+0x3a>
    osalSysUnlock();
 8007032:	f7ff fecd 	bl	8006dd0 <osalSysUnlock>
    return HAL_FAILED;
 8007036:	2301      	movs	r3, #1
 8007038:	e028      	b.n	800708c <sdc_lld_wait_transaction_end+0x8c>
  }

#if (defined(STM32F4XX) || defined(STM32F2XX))
  /* Wait until DMA channel enabled to be sure that all data transferred.*/
  while (sdcp->dma->stream->CR & STM32_DMA_CR_EN)
 800703a:	bf00      	nop
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f7      	bne.n	800703c <sdc_lld_wait_transaction_end+0x3c>
    ;

  /* DMA event flags must be manually cleared.*/
  dmaStreamClearInterrupt(sdcp->dma);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007056:	7a12      	ldrb	r2, [r2, #8]
 8007058:	213d      	movs	r1, #61	; 0x3d
 800705a:	fa01 f202 	lsl.w	r2, r1, r2
 800705e:	601a      	str	r2, [r3, #0]

  sdcp->sdio->ICR = STM32_SDIO_ICR_ALL_FLAGS;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007064:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <sdc_lld_wait_transaction_end+0x94>)
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->DCTRL = 0;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706c:	2200      	movs	r2, #0
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c
  osalSysUnlock();
 8007070:	f7ff feae 	bl	8006dd0 <osalSysUnlock>
  sdcp->sdio->DCTRL = 0;
  osalSysUnlock();
#endif

  /* Finalize transaction.*/
  if (n > 1)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d907      	bls.n	800708a <sdc_lld_wait_transaction_end+0x8a>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	210c      	movs	r1, #12
 800707e:	2200      	movs	r2, #0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f000 f9d5 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8007086:	4603      	mov	r3, r0
 8007088:	e000      	b.n	800708c <sdc_lld_wait_transaction_end+0x8c>

  return HAL_SUCCESS;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	00c007ff 	.word	0x00c007ff
 8007098:	f3af 8000 	nop.w
 800709c:	f3af 8000 	nop.w

080070a0 <sdc_lld_collect_errors>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] sta       value of the STA register
 *
 * @notapi
 */
static void sdc_lld_collect_errors(SDCDriver *sdcp, uint32_t sta) {
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t errors = SDC_NO_ERROR;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]

  if (sta & SDIO_STA_CCRCFAIL)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <sdc_lld_collect_errors+0x20>
    errors |= SDC_CMD_CRC_ERROR;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_DCRCFAIL)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <sdc_lld_collect_errors+0x32>
    errors |= SDC_DATA_CRC_ERROR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f043 0302 	orr.w	r3, r3, #2
 80070d0:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_CTIMEOUT)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <sdc_lld_collect_errors+0x44>
    errors |= SDC_COMMAND_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f043 0308 	orr.w	r3, r3, #8
 80070e2:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_DTIMEOUT)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <sdc_lld_collect_errors+0x56>
    errors |= SDC_DATA_TIMEOUT;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f043 0304 	orr.w	r3, r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_TXUNDERR)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <sdc_lld_collect_errors+0x68>
    errors |= SDC_TX_UNDERRUN;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f043 0310 	orr.w	r3, r3, #16
 8007106:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_RXOVERR)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <sdc_lld_collect_errors+0x7a>
    errors |= SDC_RX_OVERRUN;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	60fb      	str	r3, [r7, #12]
  if (sta & SDIO_STA_STBITERR)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <sdc_lld_collect_errors+0x8c>
    errors |= SDC_STARTBIT_ERROR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712a:	60fb      	str	r3, [r7, #12]

  sdcp->errors |= errors;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	f3af 8000 	nop.w
 8007148:	f3af 8000 	nop.w
 800714c:	f3af 8000 	nop.w

08007150 <sdc_lld_error_cleanup>:
 *
 * @notapi
 */
static void sdc_lld_error_cleanup(SDCDriver *sdcp,
                                  uint32_t n,
                                  uint32_t *resp) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint32_t sta = sdcp->sdio->STA;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	617b      	str	r3, [r7, #20]

  dmaStreamClearInterrupt(sdcp->dma);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800716e:	7a12      	ldrb	r2, [r2, #8]
 8007170:	213d      	movs	r1, #61	; 0x3d
 8007172:	fa01 f202 	lsl.w	r2, r1, r2
 8007176:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(sdcp->dma);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	f022 021f 	bic.w	r2, r2, #31
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	bf00      	nop
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f7      	bne.n	800718e <sdc_lld_error_cleanup+0x3e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071a8:	7a12      	ldrb	r2, [r2, #8]
 80071aa:	213d      	movs	r1, #61	; 0x3d
 80071ac:	fa01 f202 	lsl.w	r2, r1, r2
 80071b0:	601a      	str	r2, [r3, #0]
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <sdc_lld_error_cleanup+0x9c>)
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = 0;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2200      	movs	r2, #0
 80071c0:	63da      	str	r2, [r3, #60]	; 0x3c
  sdcp->sdio->DCTRL = 0;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c6:	2200      	movs	r2, #0
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
  sdc_lld_collect_errors(sdcp, sta);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	f7ff ff67 	bl	80070a0 <sdc_lld_collect_errors>
  if (n > 1)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d905      	bls.n	80071e4 <sdc_lld_error_cleanup+0x94>
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	210c      	movs	r1, #12
 80071dc:	2200      	movs	r2, #0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f000 f926 	bl	8007430 <sdc_lld_send_cmd_short_crc>
}
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	00c007ff 	.word	0x00c007ff

080071f0 <Vector104>:
 * @details It just wakes transaction thread. All error  handling performs in
 *          that thread.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDIO_HANDLER) {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 80071f4:	f7fb fc64 	bl	8002ac0 <_stats_increase_irq>
 80071f8:	f7fa fb8a 	bl	8001910 <_dbg_check_enter_isr>

  osalSysLockFromISR();
 80071fc:	f7ff fdf0 	bl	8006de0 <osalSysLockFromISR>

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  SDIO->MASK = 0;
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <Vector104+0x2c>)
 8007202:	2200      	movs	r2, #0
 8007204:	63da      	str	r2, [r3, #60]	; 0x3c

  osalThreadResumeI(&SDCD1.thread, MSG_OK);
 8007206:	4806      	ldr	r0, [pc, #24]	; (8007220 <Vector104+0x30>)
 8007208:	2100      	movs	r1, #0
 800720a:	f7ff fe19 	bl	8006e40 <osalThreadResumeI>

  osalSysUnlockFromISR();
 800720e:	f7ff fdef 	bl	8006df0 <osalSysUnlockFromISR>

  OSAL_IRQ_EPILOGUE();
 8007212:	f7fa fb9d 	bl	8001950 <_dbg_check_leave_isr>
 8007216:	f7fc fb8b 	bl	8003930 <_port_irq_epilogue>
}
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40012c00 	.word	0x40012c00
 8007220:	20003348 	.word	0x20003348
 8007224:	f3af 8000 	nop.w
 8007228:	f3af 8000 	nop.w
 800722c:	f3af 8000 	nop.w

08007230 <sdc_lld_init>:
/**
 * @brief   Low level SDC driver initialization.
 *
 * @notapi
 */
void sdc_lld_init(void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0

  sdcObjectInit(&SDCD1);
 8007234:	4806      	ldr	r0, [pc, #24]	; (8007250 <sdc_lld_init+0x20>)
 8007236:	f7fd f8e3 	bl	8004400 <sdcObjectInit>
  SDCD1.thread = NULL;
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <sdc_lld_init+0x20>)
 800723c:	2200      	movs	r2, #0
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c
  SDCD1.dma    = STM32_DMA_STREAM(STM32_SDC_SDIO_DMA_STREAM);
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <sdc_lld_init+0x20>)
 8007242:	4a04      	ldr	r2, [pc, #16]	; (8007254 <sdc_lld_init+0x24>)
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
  SDCD1.sdio   = SDIO;
 8007246:	4b02      	ldr	r3, [pc, #8]	; (8007250 <sdc_lld_init+0x20>)
 8007248:	4a03      	ldr	r2, [pc, #12]	; (8007258 <sdc_lld_init+0x28>)
 800724a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	2000330c 	.word	0x2000330c
 8007254:	080099c4 	.word	0x080099c4
 8007258:	40012c00 	.word	0x40012c00
 800725c:	f3af 8000 	nop.w

08007260 <sdc_lld_start_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_start_clk(SDCDriver *sdcp) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

  /* Initial clock setting: 400kHz, 1bit mode.*/
  sdcp->sdio->CLKCR  = STM32_SDIO_DIV_LS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726c:	2278      	movs	r2, #120	; 0x78
 800726e:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER |= SDIO_POWER_PWRCTRL_0 | SDIO_POWER_PWRCTRL_1;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	f042 0203 	orr.w	r2, r2, #3
 800727e:	601a      	str	r2, [r3, #0]
  sdcp->sdio->CLKCR |= SDIO_CLKCR_CLKEN;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007288:	6852      	ldr	r2, [r2, #4]
 800728a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800728e:	605a      	str	r2, [r3, #4]

  /* Clock activation delay.*/
  osalThreadSleep(OSAL_MS2ST(STM32_SDC_CLOCK_ACTIVATION_DELAY));
 8007290:	2064      	movs	r0, #100	; 0x64
 8007292:	f7ff fdb5 	bl	8006e00 <osalThreadSleep>
}
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	f3af 8000 	nop.w

080072a0 <sdc_lld_set_data_clk>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] clk       the clock mode
 *
 * @notapi
 */
void sdc_lld_set_data_clk(SDCDriver *sdcp, sdcbusclk_t clk) {
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  else
    sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
#else
  (void)clk;

  sdcp->sdio->CLKCR = (sdcp->sdio->CLKCR & 0xFFFFFF00U) | STM32_SDIO_DIV_HS;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072b4:	6852      	ldr	r2, [r2, #4]
 80072b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072ba:	605a      	str	r2, [r3, #4]
#endif
}
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	f3af 8000 	nop.w
 80072cc:	f3af 8000 	nop.w

080072d0 <sdc_lld_stop_clk>:
 *
 * @param[in] sdcp      pointer to the @p SDCDriver object
 *
 * @notapi
 */
void sdc_lld_stop_clk(SDCDriver *sdcp) {
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  sdcp->sdio->CLKCR = 0;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072dc:	2200      	movs	r2, #0
 80072de:	605a      	str	r2, [r3, #4]
  sdcp->sdio->POWER = 0;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	f3af 8000 	nop.w
 80072f8:	f3af 8000 	nop.w
 80072fc:	f3af 8000 	nop.w

08007300 <sdc_lld_set_bus_mode>:
 * @param[in] sdcp      pointer to the @p SDCDriver object
 * @param[in] mode      bus mode
 *
 * @notapi
 */
void sdc_lld_set_bus_mode(SDCDriver *sdcp, sdcbusmode_t mode) {
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  uint32_t clk = sdcp->sdio->CLKCR & ~SDIO_CLKCR_WIDBUS;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8007316:	60fb      	str	r3, [r7, #12]

  switch (mode) {
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d008      	beq.n	8007330 <sdc_lld_set_bus_mode+0x30>
 800731e:	2b02      	cmp	r3, #2
 8007320:	d00d      	beq.n	800733e <sdc_lld_set_bus_mode+0x3e>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d112      	bne.n	800734c <sdc_lld_set_bus_mode+0x4c>
  case SDC_MODE_1BIT:
    sdcp->sdio->CLKCR = clk;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
    break;
 800732e:	e00d      	b.n	800734c <sdc_lld_set_bus_mode+0x4c>
  case SDC_MODE_4BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_0;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733a:	605a      	str	r2, [r3, #4]
    break;
 800733c:	e006      	b.n	800734c <sdc_lld_set_bus_mode+0x4c>
  case SDC_MODE_8BIT:
    sdcp->sdio->CLKCR = clk | SDIO_CLKCR_WIDBUS_1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007348:	605a      	str	r2, [r3, #4]
    break;
 800734a:	bf00      	nop
  }
}
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	f3af 8000 	nop.w
 800735c:	f3af 8000 	nop.w

08007360 <sdc_lld_send_cmd_none>:
 * @param[in] cmd       card command
 * @param[in] arg       command argument
 *
 * @notapi
 */
void sdc_lld_send_cmd_none(SDCDriver *sdcp, uint8_t cmd, uint32_t arg) {
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	460b      	mov	r3, r1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	72fb      	strb	r3, [r7, #11]

  sdcp->sdio->ARG = arg;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_CPSMEN;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737a:	7afa      	ldrb	r2, [r7, #11]
 800737c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007380:	60da      	str	r2, [r3, #12]
  while ((sdcp->sdio->STA & SDIO_STA_CMDSENT) == 0)
 8007382:	bf00      	nop
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f8      	beq.n	8007384 <sdc_lld_send_cmd_none+0x24>
    ;
  sdcp->sdio->ICR = SDIO_ICR_CMDSENTC;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007396:	2280      	movs	r2, #128	; 0x80
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
}
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	f3af 8000 	nop.w
 80073a8:	f3af 8000 	nop.w
 80073ac:	f3af 8000 	nop.w

080073b0 <sdc_lld_send_cmd_short>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                            uint32_t *resp) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	460b      	mov	r3, r1
 80073be:	72fb      	strb	r3, [r7, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073cc:	7afa      	ldrb	r2, [r7, #11]
 80073ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073d8:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80073da:	bf00      	nop
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f6      	beq.n	80073dc <sdc_lld_send_cmd_short+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	f002 0245 	and.w	r2, r2, #69	; 0x45
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (SDIO_STA_CTIMEOUT)) != 0) {
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <sdc_lld_send_cmd_short+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	f7ff fe4a 	bl	80070a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800740c:	2301      	movs	r3, #1
 800740e:	e005      	b.n	800741c <sdc_lld_send_cmd_short+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007414:	695a      	ldr	r2, [r3, #20]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	f3af 8000 	nop.w
 8007428:	f3af 8000 	nop.w
 800742c:	f3af 8000 	nop.w

08007430 <sdc_lld_send_cmd_short_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_short_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                                uint32_t *resp) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	460b      	mov	r3, r1
 800743e:	72fb      	strb	r3, [r7, #11]
  uint32_t sta;

  sdcp->sdio->ARG = arg;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_CPSMEN;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744c:	7afa      	ldrb	r2, [r7, #11]
 800744e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007458:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 800745a:	bf00      	nop
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f6      	beq.n	800745c <sdc_lld_send_cmd_short_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	f002 0245 	and.w	r2, r2, #69	; 0x45
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDIO_STA_CTIMEOUT | SDIO_STA_CCRCFAIL)) != 0) {
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f003 0305 	and.w	r3, r3, #5
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <sdc_lld_send_cmd_short_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	f7ff fe0a 	bl	80070a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800748c:	2301      	movs	r3, #1
 800748e:	e005      	b.n	800749c <sdc_lld_send_cmd_short_crc+0x6c>
  }
  *resp = sdcp->sdio->RESP1;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007494:	695a      	ldr	r2, [r3, #20]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	f3af 8000 	nop.w
 80074a8:	f3af 8000 	nop.w
 80074ac:	f3af 8000 	nop.w

080074b0 <sdc_lld_send_cmd_long_crc>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_send_cmd_long_crc(SDCDriver *sdcp, uint8_t cmd, uint32_t arg,
                               uint32_t *resp) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	460b      	mov	r3, r1
 80074be:	72fb      	strb	r3, [r7, #11]
  uint32_t sta;

  (void)sdcp;

  sdcp->sdio->ARG = arg;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	609a      	str	r2, [r3, #8]
  sdcp->sdio->CMD = (uint32_t)cmd | SDIO_CMD_WAITRESP_0 | SDIO_CMD_WAITRESP_1 |
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074cc:	7afa      	ldrb	r2, [r7, #11]
 80074ce:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074d8:	60da      	str	r2, [r3, #12]
                                    SDIO_CMD_CPSMEN;
  while (((sta = sdcp->sdio->STA) & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80074da:	bf00      	nop
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f6      	beq.n	80074dc <sdc_lld_send_cmd_long_crc+0x2c>
                                     SDIO_STA_CCRCFAIL)) == 0)
    ;
  sdcp->sdio->ICR = sta & (SDIO_STA_CMDREND | SDIO_STA_CTIMEOUT |
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	f002 0245 	and.w	r2, r2, #69	; 0x45
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
                           SDIO_STA_CCRCFAIL);
  if ((sta & (STM32_SDIO_STA_ERROR_MASK)) != 0) {
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <sdc_lld_send_cmd_long_crc+0x60>
    sdc_lld_collect_errors(sdcp, sta);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	f7ff fdca 	bl	80070a0 <sdc_lld_collect_errors>
    return HAL_FAILED;
 800750c:	2301      	movs	r3, #1
 800750e:	e01a      	b.n	8007546 <sdc_lld_send_cmd_long_crc+0x96>
  }
  /* Save bytes in reverse order because MSB in response comes first.*/
  *resp++ = sdcp->sdio->RESP4;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	603a      	str	r2, [r7, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800751a:	6a12      	ldr	r2, [r2, #32]
 800751c:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP3;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	603a      	str	r2, [r7, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007528:	69d2      	ldr	r2, [r2, #28]
 800752a:	601a      	str	r2, [r3, #0]
  *resp++ = sdcp->sdio->RESP2;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	603a      	str	r2, [r7, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007536:	6992      	ldr	r2, [r2, #24]
 8007538:	601a      	str	r2, [r3, #0]
  *resp   = sdcp->sdio->RESP1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	601a      	str	r2, [r3, #0]
  return HAL_SUCCESS;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop

08007550 <sdc_lld_read_special>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_special(SDCDriver *sdcp, uint8_t *buf, size_t bytes,
                          uint8_t cmd, uint32_t arg) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	70fb      	strb	r3, [r7, #3]
  uint32_t resp[1];

  if(sdc_lld_prepare_read_bytes(sdcp, buf, bytes))
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	f7ff fc7c 	bl	8006e60 <sdc_lld_prepare_read_bytes>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d000      	beq.n	8007570 <sdc_lld_read_special+0x20>
    goto error;
 800756e:	e01c      	b.n	80075aa <sdc_lld_read_special+0x5a>

  if (sdc_lld_send_cmd_short_crc(sdcp, cmd, arg, resp)
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	4611      	mov	r1, r2
 800757a:	6a3a      	ldr	r2, [r7, #32]
 800757c:	f7ff ff58 	bl	8007430 <sdc_lld_send_cmd_short_crc>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d111      	bne.n	80075aa <sdc_lld_read_special+0x5a>
                                 || MMCSD_R1_ERROR(resp[0]))
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <sdc_lld_read_special+0x74>)
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10c      	bne.n	80075aa <sdc_lld_read_special+0x5a>
    goto error;

  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8007590:	f107 0314 	add.w	r3, r7, #20
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	2101      	movs	r1, #1
 8007598:	461a      	mov	r2, r3
 800759a:	f7ff fd31 	bl	8007000 <sdc_lld_wait_transaction_end>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d000      	beq.n	80075a6 <sdc_lld_read_special+0x56>
    goto error;
 80075a4:	e001      	b.n	80075aa <sdc_lld_read_special+0x5a>

  return HAL_SUCCESS;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e007      	b.n	80075ba <sdc_lld_read_special+0x6a>

error:
  sdc_lld_error_cleanup(sdcp, 1, resp);
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	2101      	movs	r1, #1
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7ff fdcc 	bl	8007150 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 80075b8:	2301      	movs	r3, #1
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	fdffe008 	.word	0xfdffe008
 80075c8:	f3af 8000 	nop.w
 80075cc:	f3af 8000 	nop.w

080075d0 <sdc_lld_read_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
                          uint8_t *buf, uint32_t blocks) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d302      	bcc.n	80075ec <sdc_lld_read_aligned+0x1c>
 80075e6:	4830      	ldr	r0, [pc, #192]	; (80076a8 <sdc_lld_read_aligned+0xd8>)
 80075e8:	f7fa f87a 	bl	80016e0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_READ_TIMEOUT;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f0:	4a2e      	ldr	r2, [pc, #184]	; (80076ac <sdc_lld_read_aligned+0xdc>)
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for reading.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7fc fecb 	bl	8004390 <_sdc_wait_for_transfer_state>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <sdc_lld_read_aligned+0x34>
    return HAL_FAILED;
 8007600:	2301      	movs	r3, #1
 8007602:	e04d      	b.n	80076a0 <sdc_lld_read_aligned+0xd0>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	0252      	lsls	r2, r2, #9
 8007618:	0892      	lsrs	r2, r2, #2
 800761a:	605a      	str	r2, [r3, #4]
                              (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_P2M);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007626:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <sdc_lld_read_aligned+0xe0>)
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007648:	f240 322a 	movw	r2, #810	; 0x32a
 800764c:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_RXOVERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	0252      	lsls	r2, r2, #9
 8007656:	629a      	str	r2, [r3, #40]	; 0x28

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DTDIR |
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	229b      	movs	r2, #155	; 0x9b
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_3 |
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_prepare_read(sdcp, startblk, blocks, resp) == TRUE)
 8007660:	f107 0314 	add.w	r3, r7, #20
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	f7ff fc49 	bl	8006f00 <sdc_lld_prepare_read>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d000      	beq.n	8007676 <sdc_lld_read_aligned+0xa6>
    goto error;
 8007674:	e00c      	b.n	8007690 <sdc_lld_read_aligned+0xc0>

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == TRUE)
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	f7ff fcbe 	bl	8007000 <sdc_lld_wait_transaction_end>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d000      	beq.n	800768c <sdc_lld_read_aligned+0xbc>
    goto error;
 800768a:	e001      	b.n	8007690 <sdc_lld_read_aligned+0xc0>

  return HAL_SUCCESS;
 800768c:	2300      	movs	r3, #0
 800768e:	e007      	b.n	80076a0 <sdc_lld_read_aligned+0xd0>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	f7ff fd59 	bl	8007150 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 800769e:	2301      	movs	r3, #1
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	08009a30 	.word	0x08009a30
 80076ac:	000927c0 	.word	0x000927c0
 80076b0:	00c007ff 	.word	0x00c007ff
 80076b4:	f3af 8000 	nop.w
 80076b8:	f3af 8000 	nop.w
 80076bc:	f3af 8000 	nop.w

080076c0 <sdc_lld_write_aligned>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
                           const uint8_t *buf, uint32_t blocks) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t resp[1];

  osalDbgCheck(blocks < 0x1000000 / MMCSD_BLOCK_SIZE);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d4:	d302      	bcc.n	80076dc <sdc_lld_write_aligned+0x1c>
 80076d6:	4831      	ldr	r0, [pc, #196]	; (800779c <sdc_lld_write_aligned+0xdc>)
 80076d8:	f7fa f802 	bl	80016e0 <chSysHalt>

  sdcp->sdio->DTIMER = STM32_SDC_WRITE_TIMEOUT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e0:	4a2f      	ldr	r2, [pc, #188]	; (80077a0 <sdc_lld_write_aligned+0xe0>)
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Checks for errors and waits for the card to be ready for writing.*/
  if (_sdc_wait_for_transfer_state(sdcp))
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7fc fe53 	bl	8004390 <_sdc_wait_for_transfer_state>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <sdc_lld_write_aligned+0x34>
    return HAL_FAILED;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e04f      	b.n	8007794 <sdc_lld_write_aligned+0xd4>

  /* Prepares the DMA channel for writing.*/
  dmaStreamSetMemory0(sdcp->dma, buf);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(sdcp->dma,
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	0252      	lsls	r2, r2, #9
 8007708:	0892      	lsrs	r2, r2, #2
 800770a:	605a      	str	r2, [r3, #4]
                             (blocks * MMCSD_BLOCK_SIZE) / sizeof (uint32_t));
  dmaStreamSetMode(sdcp->dma, sdcp->dmamode | STM32_DMA_CR_DIR_M2P);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(sdcp->dma);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* Setting up data transfer.*/
  sdcp->sdio->ICR   = STM32_SDIO_ICR_ALL_FLAGS;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007734:	4a1b      	ldr	r2, [pc, #108]	; (80077a4 <sdc_lld_write_aligned+0xe4>)
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
  sdcp->sdio->MASK  = SDIO_MASK_DCRCFAILIE |
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773c:	f240 321a 	movw	r2, #794	; 0x31a
 8007740:	63da      	str	r2, [r3, #60]	; 0x3c
                      SDIO_MASK_DTIMEOUTIE |
                      SDIO_MASK_STBITERRIE |
                      SDIO_MASK_TXUNDERRIE |
                      SDIO_MASK_DATAENDIE;
  sdcp->sdio->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	0252      	lsls	r2, r2, #9
 800774a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Talk to card what we want from it.*/
  if (sdc_lld_prepare_write(sdcp, startblk, blocks, resp) == TRUE)
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	f7ff fc13 	bl	8006f80 <sdc_lld_prepare_write>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d000      	beq.n	8007762 <sdc_lld_write_aligned+0xa2>
    goto error;
 8007760:	e010      	b.n	8007784 <sdc_lld_write_aligned+0xc4>

  /* Transaction starts just after DTEN bit setting.*/
  sdcp->sdio->DCTRL = SDIO_DCTRL_DBLOCKSIZE_3 |
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007766:	2299      	movs	r2, #153	; 0x99
 8007768:	62da      	str	r2, [r3, #44]	; 0x2c
                      SDIO_DCTRL_DBLOCKSIZE_0 |
                      SDIO_DCTRL_DMAEN |
                      SDIO_DCTRL_DTEN;

  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == TRUE)
 800776a:	f107 0314 	add.w	r3, r7, #20
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f7ff fc44 	bl	8007000 <sdc_lld_wait_transaction_end>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d000      	beq.n	8007780 <sdc_lld_write_aligned+0xc0>
    goto error;
 800777e:	e001      	b.n	8007784 <sdc_lld_write_aligned+0xc4>

  return HAL_SUCCESS;
 8007780:	2300      	movs	r3, #0
 8007782:	e007      	b.n	8007794 <sdc_lld_write_aligned+0xd4>

error:
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8007784:	f107 0314 	add.w	r3, r7, #20
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	f7ff fcdf 	bl	8007150 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8007792:	2301      	movs	r3, #1
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	08009a50 	.word	0x08009a50
 80077a0:	005b8d80 	.word	0x005b8d80
 80077a4:	00c007ff 	.word	0x00c007ff
 80077a8:	f3af 8000 	nop.w
 80077ac:	f3af 8000 	nop.w

080077b0 <sdc_lld_read>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_read(SDCDriver *sdcp, uint32_t startblk,
                  uint8_t *buf, uint32_t blocks) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d028      	beq.n	800781a <sdc_lld_read+0x6a>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e01f      	b.n	800780e <sdc_lld_read+0x5e>
      if (sdc_lld_read_aligned(sdcp, startblk, u.buf, 1))
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4a17      	ldr	r2, [pc, #92]	; (8007830 <sdc_lld_read+0x80>)
 80077d4:	2301      	movs	r3, #1
 80077d6:	f7ff fefb 	bl	80075d0 <sdc_lld_read_aligned>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <sdc_lld_read+0x34>
        return HAL_FAILED;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e021      	b.n	8007828 <sdc_lld_read+0x78>
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4b12      	ldr	r3, [pc, #72]	; (8007830 <sdc_lld_read+0x80>)
 80077e8:	4611      	mov	r1, r2
 80077ea:	461a      	mov	r2, r3
 80077ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	461a      	mov	r2, r3
 80077f6:	f7f9 fc8b 	bl	8001110 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007800:	607b      	str	r3, [r7, #4]
      startblk++;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	3301      	adds	r3, #1
 8007806:	60bb      	str	r3, [r7, #8]
                  uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	3301      	adds	r3, #1
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d3db      	bcc.n	80077ce <sdc_lld_read+0x1e>
        return HAL_FAILED;
      memcpy(buf, u.buf, MMCSD_BLOCK_SIZE);
      buf += MMCSD_BLOCK_SIZE;
      startblk++;
    }
    return HAL_SUCCESS;
 8007816:	2300      	movs	r3, #0
 8007818:	e006      	b.n	8007828 <sdc_lld_read+0x78>
  }
#endif /* STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_read_aligned(sdcp, startblk, buf, blocks);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f7ff fed5 	bl	80075d0 <sdc_lld_read_aligned>
 8007826:	4603      	mov	r3, r0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20003358 	.word	0x20003358
 8007834:	f3af 8000 	nop.w
 8007838:	f3af 8000 	nop.w
 800783c:	f3af 8000 	nop.w

08007840 <sdc_lld_write>:
 * @retval HAL_FAILED   operation failed.
 *
 * @notapi
 */
bool sdc_lld_write(SDCDriver *sdcp, uint32_t startblk,
                   const uint8_t *buf, uint32_t blocks) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d028      	beq.n	80078aa <sdc_lld_write+0x6a>
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e01f      	b.n	800789e <sdc_lld_write+0x5e>
      memcpy(u.buf, buf, MMCSD_BLOCK_SIZE);
 800785e:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <sdc_lld_write+0x80>)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4611      	mov	r1, r2
 8007864:	461a      	mov	r2, r3
 8007866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	461a      	mov	r2, r3
 8007870:	f7f9 fc4e 	bl	8001110 <memcpy>
      buf += MMCSD_BLOCK_SIZE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800787a:	607b      	str	r3, [r7, #4]
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <sdc_lld_write+0x80>)
 8007882:	2301      	movs	r3, #1
 8007884:	f7ff ff1c 	bl	80076c0 <sdc_lld_write_aligned>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <sdc_lld_write+0x52>
        return HAL_FAILED;
 800788e:	2301      	movs	r3, #1
 8007890:	e012      	b.n	80078b8 <sdc_lld_write+0x78>
      startblk++;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	3301      	adds	r3, #1
 8007896:	60bb      	str	r3, [r7, #8]
                   const uint8_t *buf, uint32_t blocks) {

#if STM32_SDC_SDIO_UNALIGNED_SUPPORT
  if (((unsigned)buf & 3) != 0) {
    uint32_t i;
    for (i = 0; i < blocks; i++) {
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3301      	adds	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3db      	bcc.n	800785e <sdc_lld_write+0x1e>
      buf += MMCSD_BLOCK_SIZE;
      if (sdc_lld_write_aligned(sdcp, startblk, u.buf, 1))
        return HAL_FAILED;
      startblk++;
    }
    return HAL_SUCCESS;
 80078a6:	2300      	movs	r3, #0
 80078a8:	e006      	b.n	80078b8 <sdc_lld_write+0x78>
  }
#endif /* STM32_SDC_SDIO_UNALIGNED_SUPPORT */
  return sdc_lld_write_aligned(sdcp, startblk, buf, blocks);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	f7ff ff05 	bl	80076c0 <sdc_lld_write_aligned>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20003358 	.word	0x20003358
 80078c4:	f3af 8000 	nop.w
 80078c8:	f3af 8000 	nop.w
 80078cc:	f3af 8000 	nop.w

080078d0 <sdc_lld_sync>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @api
 */
bool sdc_lld_sync(SDCDriver *sdcp) {
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* TODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	f3af 8000 	nop.w
 80078ec:	f3af 8000 	nop.w

080078f0 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]

  gpiop->OTYPER  = config->otyper;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
}
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	f3af 8000 	nop.w

08007940 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8007948:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <_pal_lld_init+0x98>)
 800794a:	4b23      	ldr	r3, [pc, #140]	; (80079d8 <_pal_lld_init+0x98>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8007952:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8007956:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <_pal_lld_init+0x98>)
 800795a:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <_pal_lld_init+0x98>)
 800795c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8007962:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8007966:	6513      	str	r3, [r2, #80]	; 0x50

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	481c      	ldr	r0, [pc, #112]	; (80079dc <_pal_lld_init+0x9c>)
 800796c:	4619      	mov	r1, r3
 800796e:	f7ff ffbf 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	331c      	adds	r3, #28
 8007976:	481a      	ldr	r0, [pc, #104]	; (80079e0 <_pal_lld_init+0xa0>)
 8007978:	4619      	mov	r1, r3
 800797a:	f7ff ffb9 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3338      	adds	r3, #56	; 0x38
 8007982:	4818      	ldr	r0, [pc, #96]	; (80079e4 <_pal_lld_init+0xa4>)
 8007984:	4619      	mov	r1, r3
 8007986:	f7ff ffb3 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOD
  initgpio(GPIOD, &config->PDData);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3354      	adds	r3, #84	; 0x54
 800798e:	4816      	ldr	r0, [pc, #88]	; (80079e8 <_pal_lld_init+0xa8>)
 8007990:	4619      	mov	r1, r3
 8007992:	f7ff ffad 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3370      	adds	r3, #112	; 0x70
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <_pal_lld_init+0xac>)
 800799c:	4619      	mov	r1, r3
 800799e:	f7ff ffa7 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOF
  initgpio(GPIOF, &config->PFData);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	338c      	adds	r3, #140	; 0x8c
 80079a6:	4812      	ldr	r0, [pc, #72]	; (80079f0 <_pal_lld_init+0xb0>)
 80079a8:	4619      	mov	r1, r3
 80079aa:	f7ff ffa1 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOG
  initgpio(GPIOG, &config->PGData);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	33a8      	adds	r3, #168	; 0xa8
 80079b2:	4810      	ldr	r0, [pc, #64]	; (80079f4 <_pal_lld_init+0xb4>)
 80079b4:	4619      	mov	r1, r3
 80079b6:	f7ff ff9b 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOH
  initgpio(GPIOH, &config->PHData);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	33c4      	adds	r3, #196	; 0xc4
 80079be:	480e      	ldr	r0, [pc, #56]	; (80079f8 <_pal_lld_init+0xb8>)
 80079c0:	4619      	mov	r1, r3
 80079c2:	f7ff ff95 	bl	80078f0 <initgpio>
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	33e0      	adds	r3, #224	; 0xe0
 80079ca:	480c      	ldr	r0, [pc, #48]	; (80079fc <_pal_lld_init+0xbc>)
 80079cc:	4619      	mov	r1, r3
 80079ce:	f7ff ff8f 	bl	80078f0 <initgpio>
#endif
}
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40020000 	.word	0x40020000
 80079e0:	40020400 	.word	0x40020400
 80079e4:	40020800 	.word	0x40020800
 80079e8:	40020c00 	.word	0x40020c00
 80079ec:	40021000 	.word	0x40021000
 80079f0:	40021400 	.word	0x40021400
 80079f4:	40021800 	.word	0x40021800
 80079f8:	40021c00 	.word	0x40021c00
 80079fc:	40022000 	.word	0x40022000

08007a00 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	2320      	movs	r3, #32
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w

08007a20 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	2300      	movs	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0

  port_lock();
 8007a44:	f7ff ffdc 	bl	8007a00 <port_lock>
}
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	f3af 8000 	nop.w

08007a50 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0

  port_unlock();
 8007a54:	f7ff ffe4 	bl	8007a20 <port_unlock>
}
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8007a64:	f7ff ffec 	bl	8007a40 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8007a68:	f7fb f86a 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8007a6c:	f7f9 ff20 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	f3af 8000 	nop.w
 8007a7c:	f3af 8000 	nop.w

08007a80 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8007a84:	f7f9 ff2c 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8007a88:	f7fb f862 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 8007a8c:	f7ff ffe0 	bl	8007a50 <port_unlock_from_isr>
}
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	f3af 8000 	nop.w
 8007a98:	f3af 8000 	nop.w
 8007a9c:	f3af 8000 	nop.w

08007aa0 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8007aa4:	f7ff ffdc 	bl	8007a60 <chSysLockFromISR>
}
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	f3af 8000 	nop.w

08007ab0 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8007ab4:	f7ff ffe4 	bl	8007a80 <chSysUnlockFromISR>
}
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w

08007ac0 <osalSysPolledDelayX>:
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

  chSysPolledDelayX(cycles);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7f9 fe39 	bl	8001740 <chSysPolledDelayX>
}
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	f3af 8000 	nop.w
 8007adc:	f3af 8000 	nop.w

08007ae0 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]

  chThdResumeI(trp, msg);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	f7fa fe87 	bl	8002800 <chThdResumeI>
}
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	f3af 8000 	nop.w
 8007afc:	f3af 8000 	nop.w

08007b00 <otg_rxfifo_flush>:
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
}

static void otg_rxfifo_flush(USBDriver *usbp) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b0c:	60fb      	str	r3, [r7, #12]

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2210      	movs	r2, #16
 8007b12:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8007b14:	bf00      	nop
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f9      	bne.n	8007b16 <otg_rxfifo_flush+0x16>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(12);
 8007b22:	200c      	movs	r0, #12
 8007b24:	f7ff ffcc 	bl	8007ac0 <osalSysPolledDelayX>
}
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop

08007b30 <otg_txfifo_flush>:

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  stm32_otg_t *otgp = usbp->otg;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b3e:	60fb      	str	r3, [r7, #12]

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	019b      	lsls	r3, r3, #6
 8007b44:	f043 0220 	orr.w	r2, r3, #32
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8007b4c:	bf00      	nop
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f9      	bne.n	8007b4e <otg_txfifo_flush+0x1e>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(12);
 8007b5a:	200c      	movs	r0, #12
 8007b5c:	f7ff ffb0 	bl	8007ac0 <osalSysPolledDelayX>
}
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	f3af 8000 	nop.w
 8007b6c:	f3af 8000 	nop.w

08007b70 <otg_ram_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <otg_ram_alloc>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] size      size of the packet buffer to allocate in words
 *
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t next;

  next = usbp->pmnext;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
  usbp->pmnext += size;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	441a      	add	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	671a      	str	r2, [r3, #112]	; 0x70
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d902      	bls.n	8007bc0 <otg_ram_alloc+0x30>
 8007bba:	4804      	ldr	r0, [pc, #16]	; (8007bcc <otg_ram_alloc+0x3c>)
 8007bbc:	f7f9 fd90 	bl	80016e0 <chSysHalt>
                "OTG FIFO memory overflow");
  return next;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	08009ac0 	.word	0x08009ac0

08007bd0 <otg_epin_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be0:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	015b      	lsls	r3, r3, #5
 8007be8:	4413      	add	r3, r2
 8007bea:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	613b      	str	r3, [r7, #16]

  otgp->ie[ep].DIEPINT = epint;
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	015b      	lsls	r3, r3, #5
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	601a      	str	r2, [r3, #0]

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d047      	beq.n	8007c9c <otg_epin_handler+0xcc>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d040      	beq.n	8007c9c <otg_epin_handler+0xcc>
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	3302      	adds	r3, #2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	60fb      	str	r3, [r7, #12]

    if (isp->txsize < isp->totsize) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d218      	bcs.n	8007c68 <otg_epin_handler+0x98>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	609a      	str	r2, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f000 fb8e 	bl	8008370 <usb_lld_prepare_transmit>
      osalSysLockFromISR();
 8007c54:	f7ff ff24 	bl	8007aa0 <osalSysLockFromISR>
      usb_lld_start_in(usbp, ep);
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f000 fbff 	bl	8008460 <usb_lld_start_in>
      osalSysUnlockFromISR();
 8007c62:	f7ff ff25 	bl	8007ab0 <osalSysUnlockFromISR>
 8007c66:	e019      	b.n	8007c9c <otg_epin_handler+0xcc>
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	891b      	ldrh	r3, [r3, #8]
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	2101      	movs	r1, #1
 8007c72:	fa01 f303 	lsl.w	r3, r1, r3
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	811a      	strh	r2, [r3, #8]
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4798      	blx	r3
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d028      	beq.n	8007cf8 <otg_epin_handler+0x128>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2101      	movs	r1, #1
 8007cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb4:	4013      	ands	r3, r2
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01e      	beq.n	8007cf8 <otg_epin_handler+0x128>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
 8007cba:	f7ff fef1 	bl	8007aa0 <osalSysLockFromISR>
    usbp->txpending |= (1 << ep);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	675a      	str	r2, [r3, #116]	; 0x74
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	2101      	movs	r1, #1
 8007cda:	fa01 f303 	lsl.w	r3, r1, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	401a      	ands	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    osalThreadResumeI(&usbp->wait, MSG_OK);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3378      	adds	r3, #120	; 0x78
 8007cec:	4618      	mov	r0, r3
 8007cee:	2100      	movs	r1, #0
 8007cf0:	f7ff fef6 	bl	8007ae0 <osalThreadResumeI>
    osalSysUnlockFromISR();
 8007cf4:	f7ff fedc 	bl	8007ab0 <osalSysUnlockFromISR>
  }
}
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop

08007d00 <otg_epout_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d10:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	015b      	lsls	r3, r3, #5
 8007d18:	4413      	add	r3, r2
 8007d1a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	613b      	str	r3, [r7, #16]

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	4413      	add	r3, r2
 8007d2a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	601a      	str	r2, [r3, #0]

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d011      	beq.n	8007d60 <otg_epout_handler+0x60>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <otg_epout_handler+0x60>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	3302      	adds	r3, #2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4798      	blx	r3

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d047      	beq.n	8007dfa <otg_epout_handler+0xfa>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d040      	beq.n	8007dfa <otg_epout_handler+0xfa>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	60fb      	str	r3, [r7, #12]

    if (osp->rxsize < osp->totsize) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d218      	bcs.n	8007dc6 <otg_epout_handler+0xc6>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	609a      	str	r2, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4619      	mov	r1, r3
 8007dae:	f000 fa97 	bl	80082e0 <usb_lld_prepare_receive>
      chSysLockFromISR();
 8007db2:	f7ff fe55 	bl	8007a60 <chSysLockFromISR>
      usb_lld_start_out(usbp, ep);
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f000 fb30 	bl	8008420 <usb_lld_start_out>
      chSysUnlockFromISR();
 8007dc0:	f7ff fe5e 	bl	8007a80 <chSysUnlockFromISR>
 8007dc4:	e019      	b.n	8007dfa <otg_epout_handler+0xfa>
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	895b      	ldrh	r3, [r3, #10]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4013      	ands	r3, r2
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	815a      	strh	r2, [r3, #10]
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	3302      	adds	r3, #2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4611      	mov	r1, r2
 8007df8:	4798      	blx	r3
    }
  }
}
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <usb_lld_serve_interrupt>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e0c:	617b      	str	r3, [r7, #20]
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	613b      	str	r3, [r7, #16]
  sts &= otgp->GINTMSK;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
  otgp->GINTSTS = sts;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	615a      	str	r2, [r3, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <usb_lld_serve_interrupt+0x4a>
    _usb_reset(usbp);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fd fb2e 	bl	8005490 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <usb_lld_serve_interrupt+0x4a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	2100      	movs	r1, #0
 8007e48:	4798      	blx	r3
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <usb_lld_serve_interrupt+0x5a>
    (void)otgp->DSTS;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <usb_lld_serve_interrupt+0x78>
    _usb_isr_invoke_sof_cb(usbp);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <usb_lld_serve_interrupt+0x78>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00f      	beq.n	8007ea2 <usb_lld_serve_interrupt+0xa2>
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
 8007e82:	f7ff fe0d 	bl	8007aa0 <osalSysLockFromISR>
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f023 0210 	bic.w	r2, r3, #16
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	619a      	str	r2, [r3, #24]
    osalThreadResumeI(&usbp->wait, MSG_OK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3378      	adds	r3, #120	; 0x78
 8007e96:	4618      	mov	r0, r3
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f7ff fe21 	bl	8007ae0 <osalThreadResumeI>
    osalSysUnlockFromISR();
 8007e9e:	f7ff fe07 	bl	8007ab0 <osalSysUnlockFromISR>
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8007ea8:	60fb      	str	r3, [r7, #12]
  if (sts & GINTSTS_IEPINT) {
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d035      	beq.n	8007f20 <usb_lld_serve_interrupt+0x120>
    if (src & (1 << 0))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <usb_lld_serve_interrupt+0xc6>
      otg_epin_handler(usbp, 0);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f7ff fe85 	bl	8007bd0 <otg_epin_handler>
    if (src & (1 << 1))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <usb_lld_serve_interrupt+0xd8>
      otg_epin_handler(usbp, 1);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	f7ff fe7c 	bl	8007bd0 <otg_epin_handler>
    if (src & (1 << 2))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <usb_lld_serve_interrupt+0xea>
      otg_epin_handler(usbp, 2);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	f7ff fe73 	bl	8007bd0 <otg_epin_handler>
    if (src & (1 << 3))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <usb_lld_serve_interrupt+0xfc>
      otg_epin_handler(usbp, 3);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	2103      	movs	r1, #3
 8007ef8:	f7ff fe6a 	bl	8007bd0 <otg_epin_handler>
#if STM32_USB_USE_OTG2
    if (src & (1 << 4))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <usb_lld_serve_interrupt+0x10e>
      otg_epin_handler(usbp, 4);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	2104      	movs	r1, #4
 8007f0a:	f7ff fe61 	bl	8007bd0 <otg_epin_handler>
    if (src & (1 << 5))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <usb_lld_serve_interrupt+0x120>
      otg_epin_handler(usbp, 5);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	2105      	movs	r1, #5
 8007f1c:	f7ff fe58 	bl	8007bd0 <otg_epin_handler>
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d035      	beq.n	8007f96 <usb_lld_serve_interrupt+0x196>
    if (src & (1 << 16))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <usb_lld_serve_interrupt+0x13c>
      otg_epout_handler(usbp, 0);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	2100      	movs	r1, #0
 8007f38:	f7ff fee2 	bl	8007d00 <otg_epout_handler>
    if (src & (1 << 17))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <usb_lld_serve_interrupt+0x14e>
      otg_epout_handler(usbp, 1);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	2101      	movs	r1, #1
 8007f4a:	f7ff fed9 	bl	8007d00 <otg_epout_handler>
    if (src & (1 << 18))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <usb_lld_serve_interrupt+0x160>
      otg_epout_handler(usbp, 2);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	f7ff fed0 	bl	8007d00 <otg_epout_handler>
    if (src & (1 << 19))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <usb_lld_serve_interrupt+0x172>
      otg_epout_handler(usbp, 3);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	2103      	movs	r1, #3
 8007f6e:	f7ff fec7 	bl	8007d00 <otg_epout_handler>
#if STM32_USB_USE_OTG2
    if (src & (1 << 20))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <usb_lld_serve_interrupt+0x184>
      otg_epout_handler(usbp, 4);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	2104      	movs	r1, #4
 8007f80:	f7ff febe 	bl	8007d00 <otg_epout_handler>
    if (src & (1 << 21))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <usb_lld_serve_interrupt+0x196>
      otg_epout_handler(usbp, 5);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	2105      	movs	r1, #5
 8007f92:	f7ff feb5 	bl	8007d00 <otg_epout_handler>
#endif
  }
}
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	f3af 8000 	nop.w

08007fa0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 8007fa4:	f7fa fd8c 	bl	8002ac0 <_stats_increase_irq>
 8007fa8:	f7f9 fcb2 	bl	8001910 <_dbg_check_enter_isr>

  usb_lld_serve_interrupt(&USBD1);
 8007fac:	4803      	ldr	r0, [pc, #12]	; (8007fbc <Vector14C+0x1c>)
 8007fae:	f7ff ff27 	bl	8007e00 <usb_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007fb2:	f7f9 fccd 	bl	8001950 <_dbg_check_leave_isr>
 8007fb6:	f7fb fcbb 	bl	8003930 <_port_irq_epilogue>
}
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20003558 	.word	0x20003558

08007fc0 <Vector174>:
/**
 * @brief   OTG2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG2_HANDLER) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 8007fc4:	f7fa fd7c 	bl	8002ac0 <_stats_increase_irq>
 8007fc8:	f7f9 fca2 	bl	8001910 <_dbg_check_enter_isr>

  usb_lld_serve_interrupt(&USBD2);
 8007fcc:	4803      	ldr	r0, [pc, #12]	; (8007fdc <Vector174+0x1c>)
 8007fce:	f7ff ff17 	bl	8007e00 <usb_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8007fd2:	f7f9 fcbd 	bl	8001950 <_dbg_check_leave_isr>
 8007fd6:	f7fb fcab 	bl	8003930 <_port_irq_epilogue>
}
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20003748 	.word	0x20003748

08007fe0 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8007fe6:	4825      	ldr	r0, [pc, #148]	; (800807c <usb_lld_init+0x9c>)
 8007fe8:	f7fd f962 	bl	80052b0 <usbObjectInit>
  USBD1.wait      = NULL;
 8007fec:	4b23      	ldr	r3, [pc, #140]	; (800807c <usb_lld_init+0x9c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	679a      	str	r2, [r3, #120]	; 0x78
  USBD1.otg       = OTG_FS;
 8007ff2:	4b22      	ldr	r3, [pc, #136]	; (800807c <usb_lld_init+0x9c>)
 8007ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ff8:	669a      	str	r2, [r3, #104]	; 0x68
  USBD1.otgparams = &fsparams;
 8007ffa:	4b20      	ldr	r3, [pc, #128]	; (800807c <usb_lld_init+0x9c>)
 8007ffc:	4a20      	ldr	r2, [pc, #128]	; (8008080 <usb_lld_init+0xa0>)
 8007ffe:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <usb_lld_init+0x9c>)
 8008002:	2200      	movs	r2, #0
 8008004:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Filling the thread working area here because the function
     @p chThdCreateI() does not do it.*/
#if CH_DBG_FILL_THREADS
  {
    void *wsp = USBD1.wa_pump;
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <usb_lld_init+0xa4>)
 8008008:	607b      	str	r3, [r7, #4]
    _thread_memfill((uint8_t *)wsp,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3368      	adds	r3, #104	; 0x68
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	22ff      	movs	r2, #255	; 0xff
 8008014:	f7fa fae4 	bl	80025e0 <_thread_memfill>
                    (uint8_t *)wsp + sizeof(thread_t),
                    CH_DBG_THREAD_FILL_VALUE);
    _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008024:	4610      	mov	r0, r2
 8008026:	4619      	mov	r1, r3
 8008028:	2255      	movs	r2, #85	; 0x55
 800802a:	f7fa fad9 	bl	80025e0 <_thread_memfill>
#endif /* CH_DBG_FILL_THREADS */
#endif /* defined(_CHIBIOS_RT_) */
#endif

#if STM32_USB_USE_OTG2
  usbObjectInit(&USBD2);
 800802e:	4816      	ldr	r0, [pc, #88]	; (8008088 <usb_lld_init+0xa8>)
 8008030:	f7fd f93e 	bl	80052b0 <usbObjectInit>
  USBD2.wait      = NULL;
 8008034:	4b14      	ldr	r3, [pc, #80]	; (8008088 <usb_lld_init+0xa8>)
 8008036:	2200      	movs	r2, #0
 8008038:	679a      	str	r2, [r3, #120]	; 0x78
  USBD2.otg       = OTG_HS;
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <usb_lld_init+0xa8>)
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <usb_lld_init+0xac>)
 800803e:	669a      	str	r2, [r3, #104]	; 0x68
  USBD2.otgparams = &hsparams;
 8008040:	4b11      	ldr	r3, [pc, #68]	; (8008088 <usb_lld_init+0xa8>)
 8008042:	4a13      	ldr	r2, [pc, #76]	; (8008090 <usb_lld_init+0xb0>)
 8008044:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(_CHIBIOS_RT_)
  USBD2.tr = NULL;
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <usb_lld_init+0xa8>)
 8008048:	2200      	movs	r2, #0
 800804a:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Filling the thread working area here because the function
     @p chThdCreateI() does not do it.*/
#if CH_DBG_FILL_THREADS
  {
    void *wsp = USBD2.wa_pump;
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <usb_lld_init+0xb4>)
 800804e:	603b      	str	r3, [r7, #0]
    _thread_memfill((uint8_t *)wsp,
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	3368      	adds	r3, #104	; 0x68
 8008054:	6838      	ldr	r0, [r7, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	f7fa fac1 	bl	80025e0 <_thread_memfill>
                    (uint8_t *)wsp + sizeof(thread_t),
                    CH_DBG_THREAD_FILL_VALUE);
    _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	2255      	movs	r2, #85	; 0x55
 8008070:	f7fa fab6 	bl	80025e0 <_thread_memfill>
                    CH_DBG_STACK_FILL_VALUE);
  }
#endif /* CH_DBG_FILL_THREADS */
#endif /* defined(_CHIBIOS_RT_) */
#endif
}
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20003558 	.word	0x20003558
 8008080:	08009aa0 	.word	0x08009aa0
 8008084:	200035d8 	.word	0x200035d8
 8008088:	20003748 	.word	0x20003748
 800808c:	40040000 	.word	0x40040000
 8008090:	08009ab0 	.word	0x08009ab0
 8008094:	200037c8 	.word	0x200037c8
 8008098:	f3af 8000 	nop.w
 800809c:	f3af 8000 	nop.w

080080a0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ac:	60bb      	str	r3, [r7, #8]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	2100      	movs	r1, #0
 80080b2:	f7ff fd3d 	bl	8007b30 <otg_txfifo_flush>

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e022      	b.n	8008102 <usb_lld_reset+0x62>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3348      	adds	r3, #72	; 0x48
 80080c2:	015b      	lsls	r3, r3, #5
 80080c4:	4413      	add	r3, r2
 80080c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080ca:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3358      	adds	r3, #88	; 0x58
 80080d2:	015b      	lsls	r3, r3, #5
 80080d4:	4413      	add	r3, r2
 80080d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080da:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFF;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	015b      	lsls	r3, r3, #5
 80080e2:	4413      	add	r3, r2
 80080e4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFF;
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	015b      	lsls	r3, r3, #5
 80080f2:	4413      	add	r3, r2
 80080f4:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	601a      	str	r2, [r3, #0]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d2d6      	bcs.n	80080bc <usb_lld_reset+0x1c>
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800811e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fd24 	bl	8007b70 <otg_ram_reset>

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
  otg_rxfifo_flush(usbp);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fce4 	bl	8007b00 <otg_rxfifo_flush>

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800813e:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008150:	f043 0310 	orr.w	r3, r3, #16
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	6193      	str	r3, [r2, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2209      	movs	r2, #9
 800815c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2209      	movs	r2, #9
 8008164:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a17      	ldr	r2, [pc, #92]	; (80081c8 <usb_lld_reset+0x128>)
 800816c:	60da      	str	r2, [r3, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
 8008176:	2340      	movs	r3, #64	; 0x40
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
 800818e:	2340      	movs	r3, #64	; 0x40
 8008190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	089b      	lsrs	r3, r3, #2
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	041b      	lsls	r3, r3, #16
 80081a6:	461c      	mov	r4, r3
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
 80081a8:	2340      	movs	r3, #64	; 0x40
 80081aa:	089b      	lsrs	r3, r3, #2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7ff fced 	bl	8007b90 <otg_ram_alloc>
 80081b6:	4603      	mov	r3, r0
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80081b8:	ea44 0203 	orr.w	r2, r4, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	629a      	str	r2, [r3, #40]	; 0x28
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
                                                  ep0config.in_maxsize / 4));
}
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08009a70 	.word	0x08009a70
 80081cc:	f3af 8000 	nop.w

080081d0 <usb_lld_set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081dc:	60fb      	str	r3, [r7, #12]

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80081e4:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	431a      	orrs	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	f3af 8000 	nop.w
 800820c:	f3af 8000 	nop.w

08008210 <usb_lld_get_status_out>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	3358      	adds	r3, #88	; 0x58
 8008224:	015b      	lsls	r3, r3, #5
 8008226:	4413      	add	r3, r2
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DOEPCTL_USBAEP))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <usb_lld_get_status_out+0x2a>
    return EP_STATUS_DISABLED;
 8008236:	2300      	movs	r3, #0
 8008238:	e007      	b.n	800824a <usb_lld_get_status_out+0x3a>
  if (ctl & DOEPCTL_STALL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <usb_lld_get_status_out+0x38>
    return EP_STATUS_STALLED;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <usb_lld_get_status_out+0x3a>
  return EP_STATUS_ACTIVE;
 8008248:	2302      	movs	r3, #2
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	f3af 8000 	nop.w
 800825c:	f3af 8000 	nop.w

08008260 <usb_lld_get_status_in>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	3348      	adds	r3, #72	; 0x48
 8008274:	015b      	lsls	r3, r3, #5
 8008276:	4413      	add	r3, r2
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DIEPCTL_USBAEP))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <usb_lld_get_status_in+0x2a>
    return EP_STATUS_DISABLED;
 8008286:	2300      	movs	r3, #0
 8008288:	e007      	b.n	800829a <usb_lld_get_status_in+0x3a>
  if (ctl & DIEPCTL_STALL)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <usb_lld_get_status_in+0x38>
    return EP_STATUS_STALLED;
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <usb_lld_get_status_in+0x3a>
  return EP_STATUS_ACTIVE;
 8008298:	2302      	movs	r3, #2
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	f3af 8000 	nop.w
 80082ac:	f3af 8000 	nop.w

080082b0 <usb_lld_read_setup>:
 * @param[in] ep        endpoint number
 * @param[out] buf      buffer where to copy the packet data
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	460b      	mov	r3, r1
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	72fb      	strb	r3, [r7, #11]

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	3302      	adds	r3, #2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4619      	mov	r1, r3
 80082d0:	2208      	movs	r2, #8
 80082d2:	f7f8 ff1d 	bl	8001110 <memcpy>
}
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	f3af 8000 	nop.w

080082e0 <usb_lld_prepare_receive>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	3302      	adds	r3, #2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	611a      	str	r2, [r3, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <usb_lld_prepare_receive+0x38>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b40      	cmp	r3, #64	; 0x40
 8008310:	d902      	bls.n	8008318 <usb_lld_prepare_receive+0x38>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2240      	movs	r2, #64	; 0x40
 8008316:	605a      	str	r2, [r3, #4]

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	3302      	adds	r3, #2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	8a5b      	ldrh	r3, [r3, #18]
 800832a:	4413      	add	r3, r2
 800832c:	1e5a      	subs	r2, r3, #1
         usbp->epc[ep]->out_maxsize;
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	3302      	adds	r3, #2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	8a5b      	ldrh	r3, [r3, #18]
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	60bb      	str	r3, [r7, #8]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	04d0      	lsls	r0, r2, #19
                               DOEPTSIZ_XFRSIZ(osp->rxsize);
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	6852      	ldr	r2, [r2, #4]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8008350:	4302      	orrs	r2, r0
 8008352:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8008356:	015b      	lsls	r3, r3, #5
 8008358:	440b      	add	r3, r1
 800835a:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 800835e:	601a      	str	r2, [r3, #0]
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w

08008370 <usb_lld_prepare_transmit>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	3302      	adds	r3, #2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	611a      	str	r2, [r3, #16]
  if (isp->txsize == 0) {
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <usb_lld_prepare_transmit+0x42>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	015b      	lsls	r3, r3, #5
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80083aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e02b      	b.n	800840a <usb_lld_prepare_transmit+0x9a>
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <usb_lld_prepare_transmit+0x56>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b40      	cmp	r3, #64	; 0x40
 80083be:	d902      	bls.n	80083c6 <usb_lld_prepare_transmit+0x56>
      isp->txsize = EP0_MAX_INSIZE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2240      	movs	r2, #64	; 0x40
 80083c4:	605a      	str	r2, [r3, #4]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	3302      	adds	r3, #2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	8a1b      	ldrh	r3, [r3, #16]
 80083d8:	4413      	add	r3, r2
 80083da:	1e5a      	subs	r2, r3, #1
                    usbp->epc[ep]->in_maxsize;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	3302      	adds	r3, #2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	8a1b      	ldrh	r3, [r3, #16]
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	60bb      	str	r3, [r7, #8]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	04d0      	lsls	r0, r2, #19
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	6852      	ldr	r2, [r2, #4]
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 80083fe:	4302      	orrs	r2, r0
 8008400:	015b      	lsls	r3, r3, #5
 8008402:	440b      	add	r3, r1
 8008404:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008408:	601a      	str	r2, [r3, #0]
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	f3af 8000 	nop.w
 8008418:	f3af 8000 	nop.w
 800841c:	f3af 8000 	nop.w

08008420 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	3258      	adds	r2, #88	; 0x58
 800843a:	0152      	lsls	r2, r2, #5
 800843c:	4402      	add	r2, r0
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008444:	3358      	adds	r3, #88	; 0x58
 8008446:	015b      	lsls	r3, r3, #5
 8008448:	440b      	add	r3, r1
 800844a:	601a      	str	r2, [r3, #0]
}
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	f3af 8000 	nop.w
 800845c:	f3af 8000 	nop.w

08008460 <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	3248      	adds	r2, #72	; 0x48
 800847a:	0152      	lsls	r2, r2, #5
 800847c:	4402      	add	r2, r0
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008484:	3348      	adds	r3, #72	; 0x48
 8008486:	015b      	lsls	r3, r3, #5
 8008488:	440b      	add	r3, r1
 800848a:	601a      	str	r2, [r3, #0]
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008494:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	2001      	movs	r0, #1
 800849c:	fa00 f202 	lsl.w	r2, r0, r2
 80084a0:	430a      	orrs	r2, r1
 80084a2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	3258      	adds	r2, #88	; 0x58
 80084ca:	0152      	lsls	r2, r2, #5
 80084cc:	4402      	add	r2, r0
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80084d4:	3358      	adds	r3, #88	; 0x58
 80084d6:	015b      	lsls	r3, r3, #5
 80084d8:	440b      	add	r3, r1
 80084da:	601a      	str	r2, [r3, #0]
}
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	f3af 8000 	nop.w
 80084ec:	f3af 8000 	nop.w

080084f0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	3248      	adds	r2, #72	; 0x48
 800850a:	0152      	lsls	r2, r2, #5
 800850c:	4402      	add	r2, r0
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008514:	3348      	adds	r3, #72	; 0x48
 8008516:	015b      	lsls	r3, r3, #5
 8008518:	440b      	add	r3, r1
 800851a:	601a      	str	r2, [r3, #0]
}
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	f3af 8000 	nop.w
 800852c:	f3af 8000 	nop.w

08008530 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	3258      	adds	r2, #88	; 0x58
 800854a:	0152      	lsls	r2, r2, #5
 800854c:	4402      	add	r2, r0
 800854e:	6812      	ldr	r2, [r2, #0]
 8008550:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008554:	3358      	adds	r3, #88	; 0x58
 8008556:	015b      	lsls	r3, r3, #5
 8008558:	440b      	add	r3, r1
 800855a:	601a      	str	r2, [r3, #0]
}
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	f3af 8000 	nop.w
 800856c:	f3af 8000 	nop.w

08008570 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	3248      	adds	r2, #72	; 0x48
 800858a:	0152      	lsls	r2, r2, #5
 800858c:	4402      	add	r2, r0
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008594:	3348      	adds	r3, #72	; 0x48
 8008596:	015b      	lsls	r3, r3, #5
 8008598:	440b      	add	r3, r1
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	f3af 8000 	nop.w
 80085ac:	f3af 8000 	nop.w

080085b0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0

  dummytx = 0xFFFF;
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <spi_lld_init+0x34>)
 80085b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ba:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80085bc:	480a      	ldr	r0, [pc, #40]	; (80085e8 <spi_lld_init+0x38>)
 80085be:	f7fc fb57 	bl	8004c70 <spiObjectInit>
  SPID1.spi       = SPI1;
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <spi_lld_init+0x38>)
 80085c4:	4a09      	ldr	r2, [pc, #36]	; (80085ec <spi_lld_init+0x3c>)
 80085c6:	61da      	str	r2, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <spi_lld_init+0x38>)
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <spi_lld_init+0x40>)
 80085cc:	621a      	str	r2, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <spi_lld_init+0x38>)
 80085d0:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <spi_lld_init+0x44>)
 80085d2:	625a      	str	r2, [r3, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80085d4:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <spi_lld_init+0x38>)
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <spi_lld_init+0x48>)
 80085d8:	629a      	str	r2, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80085da:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <spi_lld_init+0x38>)
 80085dc:	4a07      	ldr	r2, [pc, #28]	; (80085fc <spi_lld_init+0x4c>)
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20003984 	.word	0x20003984
 80085e8:	20003954 	.word	0x20003954
 80085ec:	40013000 	.word	0x40013000
 80085f0:	080099a0 	.word	0x080099a0
 80085f4:	080099c4 	.word	0x080099c4
 80085f8:	06010016 	.word	0x06010016
 80085fc:	06010046 	.word	0x06010046

08008600 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	2320      	movs	r3, #32
 8008608:	607b      	str	r3, [r7, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w

08008620 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	2300      	movs	r3, #0
 8008628:	607b      	str	r3, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w

08008640 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0

  port_lock();
 8008644:	f7ff ffdc 	bl	8008600 <port_lock>
}
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w

08008650 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0

  port_unlock();
 8008654:	f7ff ffe4 	bl	8008620 <port_unlock>
}
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w

08008660 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8008664:	f7ff ffec 	bl	8008640 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 8008668:	f7fa fa6a 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800866c:	f7f9 f920 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	f3af 8000 	nop.w
 8008678:	f3af 8000 	nop.w
 800867c:	f3af 8000 	nop.w

08008680 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8008684:	f7f9 f92c 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008688:	f7fa fa62 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800868c:	f7ff ffe0 	bl	8008650 <port_unlock_from_isr>
}
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	f3af 8000 	nop.w
 800869c:	f3af 8000 	nop.w

080086a0 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 80086a4:	f7ff ffdc 	bl	8008660 <chSysLockFromISR>
}
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w

080086b0 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 80086b4:	f7ff ffe4 	bl	8008680 <chSysUnlockFromISR>
}
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w

080086c0 <osalOsTimerHandlerI>:
 * @brief   Systick callback for the underlying OS.
 * @note    This callback is only defined if the OSAL requires such a
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0

  chSysTimerHandlerI();
 80086c4:	f7f9 f81c 	bl	8001700 <chSysTimerHandlerI>
}
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	f3af 8000 	nop.w

080086d0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 80086d4:	f7fa f9f4 	bl	8002ac0 <_stats_increase_irq>
 80086d8:	f7f9 f91a 	bl	8001910 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80086dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <VectorB0+0x2e>
    STM32_ST_TIM->SR = 0U;
 80086ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ee:	2200      	movs	r2, #0
 80086f0:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 80086f2:	f7ff ffd5 	bl	80086a0 <osalSysLockFromISR>
    osalOsTimerHandlerI();
 80086f6:	f7ff ffe3 	bl	80086c0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80086fa:	f7ff ffd9 	bl	80086b0 <osalSysUnlockFromISR>
  }

  OSAL_IRQ_EPILOGUE();
 80086fe:	f7f9 f927 	bl	8001950 <_dbg_check_leave_isr>
 8008702:	f7fb f915 	bl	8003930 <_port_irq_epilogue>
}
 8008706:	bd80      	pop	{r7, pc}
 8008708:	f3af 8000 	nop.w
 800870c:	f3af 8000 	nop.w

08008710 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8008714:	4b19      	ldr	r3, [pc, #100]	; (800877c <st_lld_init+0x6c>)
 8008716:	4a19      	ldr	r2, [pc, #100]	; (800877c <st_lld_init+0x6c>)
 8008718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8008720:	4b17      	ldr	r3, [pc, #92]	; (8008780 <st_lld_init+0x70>)
 8008722:	4a17      	ldr	r2, [pc, #92]	; (8008780 <st_lld_init+0x70>)
 8008724:	6892      	ldr	r2, [r2, #8]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	609a      	str	r2, [r3, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800872c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008730:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8008734:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8008736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8008740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008744:	2200      	movs	r2, #0
 8008746:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8008748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800874c:	2200      	movs	r2, #0
 800874e:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8008750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008754:	2200      	movs	r2, #0
 8008756:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8008758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8008760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008764:	2201      	movs	r2, #1
 8008766:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8008768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800876c:	2201      	movs	r2, #1
 800876e:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8008770:	201c      	movs	r0, #28
 8008772:	2108      	movs	r1, #8
 8008774:	f7fd fba4 	bl	8005ec0 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40023800 	.word	0x40023800
 8008780:	e0042000 	.word	0xe0042000
 8008784:	f3af 8000 	nop.w
 8008788:	f3af 8000 	nop.w
 800878c:	f3af 8000 	nop.w

08008790 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	2320      	movs	r3, #32
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w

080087d0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0

  port_lock();
 80087d4:	f7ff ffdc 	bl	8008790 <port_lock>
}
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w

080087e0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0

  port_unlock();
 80087e4:	f7ff ffe4 	bl	80087b0 <port_unlock>
}
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 80087f4:	f7ff ffec 	bl	80087d0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
 80087f8:	f7fa f9a2 	bl	8002b40 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 80087fc:	f7f9 f858 	bl	80018b0 <_dbg_check_lock_from_isr>
}
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
 8008808:	f3af 8000 	nop.w
 800880c:	f3af 8000 	nop.w

08008810 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
 8008814:	f7f9 f864 	bl	80018e0 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008818:	f7fa f99a 	bl	8002b50 <_stats_stop_measure_crit_isr>
  port_unlock_from_isr();
 800881c:	f7ff ffe0 	bl	80087e0 <port_unlock_from_isr>
}
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	f3af 8000 	nop.w
 8008828:	f3af 8000 	nop.w
 800882c:	f3af 8000 	nop.w

08008830 <chOQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();
 8008838:	f7f9 f8aa 	bl	8001990 <chDbgCheckClassI>

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695a      	ldr	r2, [r3, #20]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	429a      	cmp	r2, r3
 8008846:	d105      	bne.n	8008854 <chOQIsEmptyI+0x24>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <chOQIsEmptyI+0x24>
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <chOQIsEmptyI+0x26>
 8008854:	2300      	movs	r3, #0
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	b2db      	uxtb	r3, r3
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	f3af 8000 	nop.w
 8008868:	f3af 8000 	nop.w
 800886c:	f3af 8000 	nop.w

08008870 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0

  chSysLockFromISR();
 8008874:	f7ff ffbc 	bl	80087f0 <chSysLockFromISR>
}
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	f3af 8000 	nop.w

08008880 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0

  chSysUnlockFromISR();
 8008884:	f7ff ffc4 	bl	8008810 <chSysUnlockFromISR>
}
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w

08008890 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]

  chEvtBroadcastFlagsI(esp, flags);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	f7fa fb5f 	bl	8002f60 <chEvtBroadcastFlagsI>
}
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	f3af 8000 	nop.w
 80088ac:	f3af 8000 	nop.w

080088b0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USART_TypeDef *u = sdp->usart;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80088c0:	3314      	adds	r3, #20
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80088cc:	3314      	adds	r3, #20
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b1f      	ldr	r3, [pc, #124]	; (8008950 <usart_init+0xa0>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d007      	beq.n	80088e6 <usart_init+0x36>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80088dc:	3314      	adds	r3, #20
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <usart_init+0xa4>)
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d107      	bne.n	80088f6 <usart_init+0x46>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <usart_init+0xa8>)
 80088ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	e006      	b.n	8008904 <usart_init+0x54>
  else
    u->BRR = STM32_PCLK1 / config->speed;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a18      	ldr	r2, [pc, #96]	; (800895c <usart_init+0xac>)
 80088fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	88db      	ldrh	r3, [r3, #6]
 8008908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800890c:	b29b      	uxth	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	891b      	ldrh	r3, [r3, #8]
 8008918:	f043 0301 	orr.w	r3, r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8008928:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 800892c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8008930:	b29b      	uxth	r3, r3
 8008932:	461a      	mov	r2, r3
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
}
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40011000 	.word	0x40011000
 8008954:	40011400 	.word	0x40011400
 8008958:	0501bd00 	.word	0x0501bd00
 800895c:	0280de80 	.word	0x0280de80

08008960 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	807b      	strh	r3, [r7, #2]
  eventflags_t sts = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]

  if (sr & USART_SR_ORE)
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <set_error+0x22>
    sts |= SD_OVERRUN_ERROR;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008980:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_PE)
 8008982:	887b      	ldrh	r3, [r7, #2]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <set_error+0x34>
    sts |= SD_PARITY_ERROR;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f043 0320 	orr.w	r3, r3, #32
 8008992:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_FE)
 8008994:	887b      	ldrh	r3, [r7, #2]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <set_error+0x46>
    sts |= SD_FRAMING_ERROR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a4:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_NE)
 80089a6:	887b      	ldrh	r3, [r7, #2]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <set_error+0x58>
    sts |= SD_NOISE_ERROR;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089b6:	60fb      	str	r3, [r7, #12]
  chnAddFlagsI(sdp, sts);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	f7ff ff66 	bl	8008890 <osalEventBroadcastFlagsI>
}
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	f3af 8000 	nop.w

080089d0 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = sdp->usart;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80089de:	3314      	adds	r3, #20
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	613b      	str	r3, [r7, #16]
  uint16_t cr1 = u->CR1;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	81fb      	strh	r3, [r7, #14]
  uint16_t sr = u->SR;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	82fb      	strh	r3, [r7, #22]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80089f0:	8afb      	ldrh	r3, [r7, #22]
 80089f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00e      	beq.n	8008a18 <serve_interrupt+0x48>
    osalSysLockFromISR();
 80089fa:	f7ff ff39 	bl	8008870 <osalSysLockFromISR>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a08:	f7ff ff42 	bl	8008890 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a12:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8008a14:	f7ff ff34 	bl	8008880 <osalSysUnlockFromISR>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8008a18:	f7ff ff2a 	bl	8008870 <osalSysLockFromISR>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008a1c:	e019      	b.n	8008a52 <serve_interrupt+0x82>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8008a1e:	8afb      	ldrh	r3, [r7, #22]
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <serve_interrupt+0x62>
      set_error(sdp, sr);
 8008a28:	8afb      	ldrh	r3, [r7, #22]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f7ff ff97 	bl	8008960 <set_error>
    b = u->DR;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	737b      	strb	r3, [r7, #13]
    if (sr & USART_SR_RXNE)
 8008a38:	8afb      	ldrh	r3, [r7, #22]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <serve_interrupt+0x7c>
      sdIncomingDataI(sdp, b);
 8008a42:	7b7b      	ldrb	r3, [r7, #13]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4619      	mov	r1, r3
 8008a48:	f7fc f8c2 	bl	8004bd0 <sdIncomingDataI>
    sr = u->SR;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	82fb      	strh	r3, [r7, #22]
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008a52:	8afb      	ldrh	r3, [r7, #22]
 8008a54:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e0      	bne.n	8008a1e <serve_interrupt+0x4e>
    b = u->DR;
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
  }
  osalSysUnlockFromISR();
 8008a5c:	f7ff ff10 	bl	8008880 <osalSysUnlockFromISR>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d022      	beq.n	8008ab0 <serve_interrupt+0xe0>
 8008a6a:	8afb      	ldrh	r3, [r7, #22]
 8008a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01d      	beq.n	8008ab0 <serve_interrupt+0xe0>
    msg_t b;
    osalSysLockFromISR();
 8008a74:	f7ff fefc 	bl	8008870 <osalSysLockFromISR>
    b = oqGetI(&sdp->oqueue);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3330      	adds	r3, #48	; 0x30
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fa fd37 	bl	80034f0 <chOQGetI>
 8008a82:	60b8      	str	r0, [r7, #8]
    if (b < Q_OK) {
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da0d      	bge.n	8008aa6 <serve_interrupt+0xd6>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	2108      	movs	r1, #8
 8008a92:	f7ff fefd 	bl	8008890 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8008a96:	89fb      	ldrh	r3, [r7, #14]
 8008a98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	e002      	b.n	8008aac <serve_interrupt+0xdc>
    }
    else
      u->DR = b;
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 8008aac:	f7ff fee8 	bl	8008880 <osalSysUnlockFromISR>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8008ab0:	8afb      	ldrh	r3, [r7, #22]
 8008ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01a      	beq.n	8008af0 <serve_interrupt+0x120>
    osalSysLockFromISR();
 8008aba:	f7ff fed9 	bl	8008870 <osalSysLockFromISR>
    if (oqIsEmptyI(&sdp->oqueue))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3330      	adds	r3, #48	; 0x30
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff feb4 	bl	8008830 <chOQIsEmptyI>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <serve_interrupt+0x10a>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	2110      	movs	r1, #16
 8008ad6:	f7ff fedb 	bl	8008890 <osalEventBroadcastFlagsI>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008ada:	89fb      	ldrh	r3, [r7, #14]
 8008adc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	60da      	str	r2, [r3, #12]
    u->SR = ~USART_SR_TC;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aea:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8008aec:	f7ff fec8 	bl	8008880 <osalSysUnlockFromISR>
  }
}
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	f3af 8000 	nop.w
 8008afc:	f3af 8000 	nop.w

08008b00 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <notify1+0x20>)
 8008b0a:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <notify1+0x20>)
 8008b0c:	68d2      	ldr	r2, [r2, #12]
 8008b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b12:	60da      	str	r2, [r3, #12]
}
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40011000 	.word	0x40011000
 8008b24:	f3af 8000 	nop.w
 8008b28:	f3af 8000 	nop.w
 8008b2c:	f3af 8000 	nop.w

08008b30 <notify4>:
  USART3->CR1 |= USART_CR1_TXEIE;
}
#endif

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE;
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <notify4+0x20>)
 8008b3a:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <notify4+0x20>)
 8008b3c:	68d2      	ldr	r2, [r2, #12]
 8008b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b42:	60da      	str	r2, [r3, #12]
}
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	40004c00 	.word	0x40004c00
 8008b54:	f3af 8000 	nop.w
 8008b58:	f3af 8000 	nop.w
 8008b5c:	f3af 8000 	nop.w

08008b60 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 8008b64:	f7f9 ffac 	bl	8002ac0 <_stats_increase_irq>
 8008b68:	f7f8 fed2 	bl	8001910 <_dbg_check_enter_isr>

  serve_interrupt(&SD1);
 8008b6c:	4803      	ldr	r0, [pc, #12]	; (8008b7c <VectorD4+0x1c>)
 8008b6e:	f7ff ff2f 	bl	80089d0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8008b72:	f7f8 feed 	bl	8001950 <_dbg_check_leave_isr>
 8008b76:	f7fa fedb 	bl	8003930 <_port_irq_epilogue>
}
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20003988 	.word	0x20003988

08008b80 <Vector110>:
/**
 * @brief   UART4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();
 8008b84:	f7f9 ff9c 	bl	8002ac0 <_stats_increase_irq>
 8008b88:	f7f8 fec2 	bl	8001910 <_dbg_check_enter_isr>

  serve_interrupt(&SD4);
 8008b8c:	4803      	ldr	r0, [pc, #12]	; (8008b9c <Vector110+0x1c>)
 8008b8e:	f7ff ff1f 	bl	80089d0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8008b92:	f7f8 fedd 	bl	8001950 <_dbg_check_leave_isr>
 8008b96:	f7fa fecb 	bl	8003930 <_port_irq_epilogue>
}
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	200059e0 	.word	0x200059e0

08008ba0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8008ba4:	480b      	ldr	r0, [pc, #44]	; (8008bd4 <sd_lld_init+0x34>)
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4a0b      	ldr	r2, [pc, #44]	; (8008bd8 <sd_lld_init+0x38>)
 8008baa:	f7fb ffb1 	bl	8004b10 <sdObjectInit>
  SD1.usart = USART1;
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <sd_lld_init+0x34>)
 8008bb0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8008bb4:	3314      	adds	r3, #20
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <sd_lld_init+0x3c>)
 8008bb8:	601a      	str	r2, [r3, #0]
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
#endif

#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4, NULL, notify4);
 8008bba:	4809      	ldr	r0, [pc, #36]	; (8008be0 <sd_lld_init+0x40>)
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <sd_lld_init+0x44>)
 8008bc0:	f7fb ffa6 	bl	8004b10 <sdObjectInit>
  SD4.usart = UART4;
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <sd_lld_init+0x40>)
 8008bc6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8008bca:	3314      	adds	r3, #20
 8008bcc:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <sd_lld_init+0x48>)
 8008bce:	601a      	str	r2, [r3, #0]

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
#endif
}
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20003988 	.word	0x20003988
 8008bd8:	08008b01 	.word	0x08008b01
 8008bdc:	40011000 	.word	0x40011000
 8008be0:	200059e0 	.word	0x200059e0
 8008be4:	08008b31 	.word	0x08008b31
 8008be8:	40004c00 	.word	0x40004c00
 8008bec:	f3af 8000 	nop.w

08008bf0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]

  if (config == NULL)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <sd_lld_start+0x14>
    config = &default_config;
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <sd_lld_start+0x64>)
 8008c02:	603b      	str	r3, [r7, #0]

  if (sdp->state == SD_STOP) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7a1b      	ldrb	r3, [r3, #8]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d11b      	bne.n	8008c44 <sd_lld_start+0x54>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <sd_lld_start+0x68>)
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d109      	bne.n	8008c28 <sd_lld_start+0x38>
      rccEnableUSART1(FALSE);
 8008c14:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <sd_lld_start+0x6c>)
 8008c16:	4a11      	ldr	r2, [pc, #68]	; (8008c5c <sd_lld_start+0x6c>)
 8008c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c1a:	f042 0210 	orr.w	r2, r2, #16
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 8008c20:	2025      	movs	r0, #37	; 0x25
 8008c22:	210c      	movs	r1, #12
 8008c24:	f7fd f94c 	bl	8005ec0 <nvicEnableVector>
      rccEnableUSART3(FALSE);
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_UART4
    if (&SD4 == sdp) {
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <sd_lld_start+0x70>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d109      	bne.n	8008c44 <sd_lld_start+0x54>
      rccEnableUART4(FALSE);
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <sd_lld_start+0x6c>)
 8008c32:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <sd_lld_start+0x6c>)
 8008c34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008c36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40
      nvicEnableVector(STM32_UART4_NUMBER, STM32_SERIAL_UART4_PRIORITY);
 8008c3c:	2034      	movs	r0, #52	; 0x34
 8008c3e:	210c      	movs	r1, #12
 8008c40:	f7fd f93e 	bl	8005ec0 <nvicEnableVector>
      rccEnableUSART6(FALSE);
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	f7ff fe32 	bl	80088b0 <usart_init>
}
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	08009ad0 	.word	0x08009ad0
 8008c58:	20003988 	.word	0x20003988
 8008c5c:	40023800 	.word	0x40023800
 8008c60:	200059e0 	.word	0x200059e0
 8008c64:	f3af 8000 	nop.w
 8008c68:	f3af 8000 	nop.w
 8008c6c:	f3af 8000 	nop.w

08008c70 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0

  stm32_clock_init();
 8008c74:	f7fd fc74 	bl	8006560 <stm32_clock_init>
}
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	f3af 8000 	nop.w

08008c80 <sdc_lld_is_card_inserted>:

#if HAL_USE_SDC || defined(__DOXYGEN__)
/**
 * @brief   SDC card detection.
 */
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  static bool last_status = FALSE;

  if (blkIsTransferring(sdcp))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	791b      	ldrb	r3, [r3, #4]
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d00b      	beq.n	8008ca8 <sdc_lld_is_card_inserted+0x28>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	791b      	ldrb	r3, [r3, #4]
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d007      	beq.n	8008ca8 <sdc_lld_is_card_inserted+0x28>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	2b06      	cmp	r3, #6
 8008c9e:	d003      	beq.n	8008ca8 <sdc_lld_is_card_inserted+0x28>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	791b      	ldrb	r3, [r3, #4]
 8008ca4:	2b07      	cmp	r3, #7
 8008ca6:	d102      	bne.n	8008cae <sdc_lld_is_card_inserted+0x2e>
    return last_status;
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <sdc_lld_is_card_inserted+0x58>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	e00d      	b.n	8008cca <sdc_lld_is_card_inserted+0x4a>
  return last_status = !((bool)palReadPad(GPIOA, GPIOA_DETECT_USD));
 8008cae:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <sdc_lld_is_card_inserted+0x5c>)
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	0a1b      	lsrs	r3, r3, #8
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bf14      	ite	ne
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	2301      	moveq	r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <sdc_lld_is_card_inserted+0x58>)
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <sdc_lld_is_card_inserted+0x58>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20007a38 	.word	0x20007a38
 8008cdc:	40020000 	.word	0x40020000

08008ce0 <sdc_lld_is_write_protected>:

/**
 * @brief   SDC card write protection detection.
 */
bool sdc_lld_is_write_protected(SDCDriver *sdcp) {
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  (void)sdcp;
  return FALSE;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	f3af 8000 	nop.w
 8008cfc:	f3af 8000 	nop.w

08008d00 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
	palClearPad(GPIOG, GPIOG_LED1);
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <boardInit+0x24>)
 8008d06:	2204      	movs	r2, #4
 8008d08:	835a      	strh	r2, [r3, #26]
	palClearPad(GPIOG, GPIOG_LED2);
 8008d0a:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <boardInit+0x24>)
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	835a      	strh	r2, [r3, #26]
	palClearPad(GPIOG, GPIOG_LED3);
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <boardInit+0x24>)
 8008d12:	2210      	movs	r2, #16
 8008d14:	835a      	strh	r2, [r3, #26]
	palClearPad(GPIOG, GPIOG_LED4);
 8008d16:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <boardInit+0x24>)
 8008d18:	2220      	movs	r2, #32
 8008d1a:	835a      	strh	r2, [r3, #26]
}
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	40021800 	.word	0x40021800
 8008d28:	f3af 8000 	nop.w
 8008d2c:	f3af 8000 	nop.w

08008d30 <_ZL18chRegSetThreadNamePKc>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <_ZL18chRegSetThreadNamePKc+0x1c>)
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000800 	.word	0x20000800

08008d50 <_ZL8chprintfP20BaseSequentialStreamPKcz>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008d50:	b40e      	push	{r1, r2, r3}
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8008d5a:	f107 0320 	add.w	r3, r7, #32
 8008d5e:	60bb      	str	r3, [r7, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	69f9      	ldr	r1, [r7, #28]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	f7fc fe4b 	bl	8005a00 <chvprintf>
 8008d6a:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return formatted_bytes;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d78:	b003      	add	sp, #12
 8008d7a:	4770      	bx	lr
 8008d7c:	f3af 8000 	nop.w

08008d80 <_ZL7Thread1Pv>:
#include "header/FIR.h"
#include "header/DataFilter.h"

static THD_WORKING_AREA(waThread1, 256);

static THD_FUNCTION(Thread1, pArg) {
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b090      	sub	sp, #64	; 0x40
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	(void) pArg;
	DataFilter *_DataFilter = (DataFilter *) pArg;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38

	chRegSetThreadName("Filtro");
 8008d8c:	4827      	ldr	r0, [pc, #156]	; (8008e2c <_ZL7Thread1Pv+0xac>)
 8008d8e:	f7ff ffcf 	bl	8008d30 <_ZL18chRegSetThreadNamePKc>

	float _EntradasX[9] = { 0.00000, 0.62791, 1.25333, 1.87381, 2.48690,
			3.09017, 3.68125, 4.25779, 4.81754 };
 8008d92:	4b27      	ldr	r3, [pc, #156]	; (8008e30 <_ZL7Thread1Pv+0xb0>)
 8008d94:	f107 040c 	add.w	r4, r7, #12
 8008d98:	461d      	mov	r5, r3
 8008d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	6023      	str	r3, [r4, #0]

	IIR *_ClassIIR = (IIR*) chHeapAlloc(NULL, sizeof(IIR));
 8008da6:	2000      	movs	r0, #0
 8008da8:	2110      	movs	r1, #16
 8008daa:	f7fa fd01 	bl	80037b0 <chHeapAlloc>
 8008dae:	6378      	str	r0, [r7, #52]	; 0x34
	_ClassIIR->setInitialDataFilter(_DataFilter);
 8008db0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db4:	f000 facc 	bl	8009350 <_ZN3IIR20setInitialDataFilterEP10DataFilter>

	float _Result;

	chprintf((BaseSequentialStream *) &SD1, "\r\nResultado:");
 8008db8:	481e      	ldr	r0, [pc, #120]	; (8008e34 <_ZL7Thread1Pv+0xb4>)
 8008dba:	491f      	ldr	r1, [pc, #124]	; (8008e38 <_ZL7Thread1Pv+0xb8>)
 8008dbc:	f7ff ffc8 	bl	8008d50 <_ZL8chprintfP20BaseSequentialStreamPKcz>

	int _Cont;
	for (_Cont = 0; _Cont < 9; _Cont++) {
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc4:	e02b      	b.n	8008e1e <_ZL7Thread1Pv+0x9e>
		chThdSleepMilliseconds(500);
 8008dc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8008dca:	f7f9 fc91 	bl	80026f0 <chThdSleep>
		palTogglePad(GPIOG, GPIOG_LED1);
 8008dce:	4b1b      	ldr	r3, [pc, #108]	; (8008e3c <_ZL7Thread1Pv+0xbc>)
 8008dd0:	4a1a      	ldr	r2, [pc, #104]	; (8008e3c <_ZL7Thread1Pv+0xbc>)
 8008dd2:	6952      	ldr	r2, [r2, #20]
 8008dd4:	f082 0204 	eor.w	r2, r2, #4
 8008dd8:	615a      	str	r2, [r3, #20]
		_Result = _ClassIIR->directFormI(_EntradasX[_Cont]);
 8008dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008de2:	4413      	add	r3, r2
 8008de4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8008de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008dea:	4619      	mov	r1, r3
 8008dec:	f000 fa30 	bl	8009250 <_ZN3IIR11directFormIEf>
 8008df0:	6338      	str	r0, [r7, #48]	; 0x30
		chprintf((BaseSequentialStream *) &SD1, "%f ", _Result);
 8008df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df4:	f7f7 fbd0 	bl	8000598 <__aeabi_f2d>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	480d      	ldr	r0, [pc, #52]	; (8008e34 <_ZL7Thread1Pv+0xb4>)
 8008dfe:	4910      	ldr	r1, [pc, #64]	; (8008e40 <_ZL7Thread1Pv+0xc0>)
 8008e00:	f7ff ffa6 	bl	8008d50 <_ZL8chprintfP20BaseSequentialStreamPKcz>
		chThdSleepMilliseconds(500);
 8008e04:	f241 3088 	movw	r0, #5000	; 0x1388
 8008e08:	f7f9 fc72 	bl	80026f0 <chThdSleep>
		palTogglePad(GPIOG, GPIOG_LED1);
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <_ZL7Thread1Pv+0xbc>)
 8008e0e:	4a0b      	ldr	r2, [pc, #44]	; (8008e3c <_ZL7Thread1Pv+0xbc>)
 8008e10:	6952      	ldr	r2, [r2, #20]
 8008e12:	f082 0204 	eor.w	r2, r2, #4
 8008e16:	615a      	str	r2, [r3, #20]
	float _Result;

	chprintf((BaseSequentialStream *) &SD1, "\r\nResultado:");

	int _Cont;
	for (_Cont = 0; _Cont < 9; _Cont++) {
 8008e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	ddd0      	ble.n	8008dc6 <_ZL7Thread1Pv+0x46>
		_Result = _ClassIIR->directFormI(_EntradasX[_Cont]);
		chprintf((BaseSequentialStream *) &SD1, "%f ", _Result);
		chThdSleepMilliseconds(500);
		palTogglePad(GPIOG, GPIOG_LED1);
	}
}
 8008e24:	3740      	adds	r7, #64	; 0x40
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bdb0      	pop	{r4, r5, r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	080094a0 	.word	0x080094a0
 8008e30:	080094bc 	.word	0x080094bc
 8008e34:	20003988 	.word	0x20003988
 8008e38:	080094a8 	.word	0x080094a8
 8008e3c:	40021800 	.word	0x40021800
 8008e40:	080094b8 	.word	0x080094b8
 8008e44:	f3af 8000 	nop.w
 8008e48:	f3af 8000 	nop.w
 8008e4c:	f3af 8000 	nop.w

08008e50 <main>:

int main() {
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b097      	sub	sp, #92	; 0x5c
 8008e54:	af02      	add	r7, sp, #8

	halInit();
 8008e56:	f7fa fdab 	bl	80039b0 <halInit>
	chSysInit();
 8008e5a:	f7f8 fbf9 	bl	8001650 <chSysInit>

	SerialConfig uartCfg = { 9600, };
 8008e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	3304      	adds	r3, #4
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	3304      	adds	r3, #4
 8008e74:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38

	sdStart(&SD1, &uartCfg);
 8008e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e7e:	4833      	ldr	r0, [pc, #204]	; (8008f4c <main+0xfc>)
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7fb fe7d 	bl	8004b80 <sdStart>

	int _FilterOrder = 3;
 8008e86:	2303      	movs	r3, #3
 8008e88:	64fb      	str	r3, [r7, #76]	; 0x4c

	float _CondicionesInicialesX[3] = { 0, 0, 0 };
 8008e8a:	f04f 0300 	mov.w	r3, #0
 8008e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	633b      	str	r3, [r7, #48]	; 0x30
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
	float _CoeficientesB[4] = { -0.0209863, 0.0203430, 0.0203430, -0.0209863 };
 8008e9c:	4b2c      	ldr	r3, [pc, #176]	; (8008f50 <main+0x100>)
 8008e9e:	f107 041c 	add.w	r4, r7, #28
 8008ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float _CondicionesInicialesY[3] = { 0, 0, 0 };
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
	float _CoeficientesA[3] = { -3.1089549, 3.2355190, -1.1278510 };
 8008eba:	4a26      	ldr	r2, [pc, #152]	; (8008f54 <main+0x104>)
 8008ebc:	1d3b      	adds	r3, r7, #4
 8008ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	DataFilter *_DataFilter = (DataFilter*) chHeapAlloc(NULL,
			sizeof(DataFilter));
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	212c      	movs	r1, #44	; 0x2c
 8008ec8:	f7fa fc72 	bl	80037b0 <chHeapAlloc>
 8008ecc:	64b8      	str	r0, [r7, #72]	; 0x48

	_DataFilter->newDataFilter(_FilterOrder);
 8008ece:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ed0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008ed2:	f000 f84d 	bl	8008f70 <_ZN10DataFilter13newDataFilterEi>
	_DataFilter->setArrayCoefficientsB(_CoeficientesB);
 8008ed6:	f107 031c 	add.w	r3, r7, #28
 8008eda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008edc:	4619      	mov	r1, r3
 8008ede:	f000 f8df 	bl	80090a0 <_ZN10DataFilter21setArrayCoefficientsBEPf>
	_DataFilter->setArrayInitialConditionsX(_CondicionesInicialesX);
 8008ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ee6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f000 f901 	bl	80090f0 <_ZN10DataFilter26setArrayInitialConditionsXEPf>
	_DataFilter->setArrayInitialConditionsY(_CondicionesInicialesY);
 8008eee:	f107 0310 	add.w	r3, r7, #16
 8008ef2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f000 f973 	bl	80091e0 <_ZN10DataFilter26setArrayInitialConditionsYEPf>
	_DataFilter->setArrayCoefficientsA(_CoeficientesA);
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008efe:	4619      	mov	r1, r3
 8008f00:	f000 f95e 	bl	80091c0 <_ZN10DataFilter21setArrayCoefficientsAEPf>

	void *_Arg = _DataFilter;
 8008f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f06:	647b      	str	r3, [r7, #68]	; 0x44

	chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, _Arg);
 8008f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4812      	ldr	r0, [pc, #72]	; (8008f58 <main+0x108>)
 8008f0e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8008f12:	2240      	movs	r2, #64	; 0x40
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <main+0x10c>)
 8008f16:	f7f9 fbbb 	bl	8002690 <chThdCreateStatic>

	while (TRUE) {
		if (palReadPad(GPIOG, GPIOG_BUTTON)) {
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <main+0x110>)
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bf0c      	ite	eq
 8008f26:	2300      	moveq	r3, #0
 8008f28:	2301      	movne	r3, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <main+0xf0>
			chprintf((BaseSequentialStream *) &SD1,
					"Se ha presionado SW1 \r\n");
 8008f30:	4806      	ldr	r0, [pc, #24]	; (8008f4c <main+0xfc>)
 8008f32:	490c      	ldr	r1, [pc, #48]	; (8008f64 <main+0x114>)
 8008f34:	f7ff ff0c 	bl	8008d50 <_ZL8chprintfP20BaseSequentialStreamPKcz>
			chThdSleepMilliseconds(200);
 8008f38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008f3c:	f7f9 fbd8 	bl	80026f0 <chThdSleep>
		}
		chThdSleepMilliseconds(200);
 8008f40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008f44:	f7f9 fbd4 	bl	80026f0 <chThdSleep>
	}
 8008f48:	e7e7      	b.n	8008f1a <main+0xca>
 8008f4a:	bf00      	nop
 8008f4c:	20003988 	.word	0x20003988
 8008f50:	080094f8 	.word	0x080094f8
 8008f54:	08009508 	.word	0x08009508
 8008f58:	20007a40 	.word	0x20007a40
 8008f5c:	08008d81 	.word	0x08008d81
 8008f60:	40021800 	.word	0x40021800
 8008f64:	080094e0 	.word	0x080094e0
 8008f68:	f3af 8000 	nop.w
 8008f6c:	f3af 8000 	nop.w

08008f70 <_ZN10DataFilter13newDataFilterEi>:
#include <serial.h>
#include <chprintf.h>

#include "header/DataFilter.h"

void DataFilter::newDataFilter(int pFilterOrder) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]

	//allocate memory
	ArrayInitialConditionsX = (float*) chHeapAlloc(NULL,
			sizeof(float) * pFilterOrder);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4619      	mov	r1, r3
 8008f82:	f7fa fc15 	bl	80037b0 <chHeapAlloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
	ArrayCoefficientsB = (float*) chHeapAlloc(NULL,
			sizeof(float) * (pFilterOrder + 1));
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	2000      	movs	r0, #0
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fa fc0b 	bl	80037b0 <chHeapAlloc>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
	ArrayInputsY = (float*) chHeapAlloc(NULL, sizeof(float) * (FilterOrder + BUFFER_SIZE));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	330a      	adds	r3, #10
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	2000      	movs	r0, #0
 8008faa:	4619      	mov	r1, r3
 8008fac:	f7fa fc00 	bl	80037b0 <chHeapAlloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	61da      	str	r2, [r3, #28]
	setFilterOrder(pFilterOrder);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	f000 f8e1 	bl	8009180 <_ZN10DataFilter14setFilterOrderEi>
}
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	f3af 8000 	nop.w
 8008fc8:	f3af 8000 	nop.w
 8008fcc:	f3af 8000 	nop.w

08008fd0 <_ZN10DataFilter16createArrayInputEv>:
	chHeapFree(ArrayCoefficientsB);
	chHeapFree(ArrayInputsY);
	chHeapFree(ArrayInputsX);
}

void DataFilter::createArrayInput() {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	ArrayInputsX = (float*) chHeapAlloc(NULL,
			sizeof(float) * (FilterOrder + BUFFER_SIZE));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	330a      	adds	r3, #10
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f7fa fbe4 	bl	80037b0 <chHeapAlloc>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	611a      	str	r2, [r3, #16]
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ff4:	e012      	b.n	800901c <_ZN10DataFilter16createArrayInputEv+0x4c>
		ArrayInputsX[Cont] = ArrayInitialConditionsX[Cont];
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6891      	ldr	r1, [r2, #8]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800900a:	0092      	lsls	r2, r2, #2
 800900c:	440a      	add	r2, r1
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	601a      	str	r2, [r3, #0]
}

void DataFilter::createArrayInput() {
	ArrayInputsX = (float*) chHeapAlloc(NULL,
			sizeof(float) * (FilterOrder + BUFFER_SIZE));
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	629a      	str	r2, [r3, #40]	; 0x28
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	dbe6      	blt.n	8008ff6 <_ZN10DataFilter16createArrayInputEv+0x26>
		ArrayInputsX[Cont] = ArrayInitialConditionsX[Cont];
	}
}
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop

08009030 <_ZN10DataFilter9moveArrayEPf>:

void DataFilter::moveArray(float *pArray) {
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	629a      	str	r2, [r3, #40]	; 0x28
 8009040:	e011      	b.n	8009066 <_ZN10DataFilter9moveArrayEPf+0x36>
		pArray[Cont] = pArray[Cont + BUFFER_SIZE];
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	4413      	add	r3, r2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009050:	320a      	adds	r2, #10
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	440a      	add	r2, r1
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	601a      	str	r2, [r3, #0]
		ArrayInputsX[Cont] = ArrayInitialConditionsX[Cont];
	}
}

void DataFilter::moveArray(float *pArray) {
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	629a      	str	r2, [r3, #40]	; 0x28
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	dbe7      	blt.n	8009042 <_ZN10DataFilter9moveArrayEPf+0x12>
		pArray[Cont] = pArray[Cont + BUFFER_SIZE];
	}
}
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	f3af 8000 	nop.w

08009080 <_ZNK10DataFilter21getArrayCoefficientsBEv>:

float* DataFilter::getArrayCoefficientsB() const {
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	return ArrayCoefficientsB;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	f3af 8000 	nop.w
 800909c:	f3af 8000 	nop.w

080090a0 <_ZN10DataFilter21setArrayCoefficientsBEPf>:

void DataFilter::setArrayCoefficientsB(float* pArrayCoefficientsB) {
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
	for (Cont = 0; Cont < (FilterOrder + 1); Cont++) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	629a      	str	r2, [r3, #40]	; 0x28
 80090b0:	e011      	b.n	80090d6 <_ZN10DataFilter21setArrayCoefficientsBEPf+0x36>
		ArrayCoefficientsB[Cont] = pArrayCoefficientsB[Cont];
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	440a      	add	r2, r1
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	601a      	str	r2, [r3, #0]
float* DataFilter::getArrayCoefficientsB() const {
	return ArrayCoefficientsB;
}

void DataFilter::setArrayCoefficientsB(float* pArrayCoefficientsB) {
	for (Cont = 0; Cont < (FilterOrder + 1); Cont++) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	629a      	str	r2, [r3, #40]	; 0x28
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	3301      	adds	r3, #1
 80090e0:	429a      	cmp	r2, r3
 80090e2:	dbe6      	blt.n	80090b2 <_ZN10DataFilter21setArrayCoefficientsBEPf+0x12>
		ArrayCoefficientsB[Cont] = pArrayCoefficientsB[Cont];
	}
}
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop

080090f0 <_ZN10DataFilter26setArrayInitialConditionsXEPf>:

void DataFilter::setArrayInitialConditionsX(float *pArrayInitialConditions) {
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009100:	e011      	b.n	8009126 <_ZN10DataFilter26setArrayInitialConditionsXEPf+0x36>
		ArrayInitialConditionsX[Cont] = pArrayInitialConditions[Cont];
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009112:	0092      	lsls	r2, r2, #2
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	440a      	add	r2, r1
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	601a      	str	r2, [r3, #0]
		ArrayCoefficientsB[Cont] = pArrayCoefficientsB[Cont];
	}
}

void DataFilter::setArrayInitialConditionsX(float *pArrayInitialConditions) {
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	629a      	str	r2, [r3, #40]	; 0x28
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	dbe7      	blt.n	8009102 <_ZN10DataFilter26setArrayInitialConditionsXEPf+0x12>
		ArrayInitialConditionsX[Cont] = pArrayInitialConditions[Cont];
	}
}
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	f3af 8000 	nop.w

08009140 <_ZNK10DataFilter15getArrayInputsXEv>:

float* DataFilter::getArrayInputsX() const {
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
	return ArrayInputsX;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	f3af 8000 	nop.w
 800915c:	f3af 8000 	nop.w

08009160 <_ZNK10DataFilter14getFilterOrderEv>:

int DataFilter::getFilterOrder() const {
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	return FilterOrder;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	f3af 8000 	nop.w
 800917c:	f3af 8000 	nop.w

08009180 <_ZN10DataFilter14setFilterOrderEi>:

void DataFilter::setFilterOrder(int pFilterOrder) {
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	FilterOrder = pFilterOrder;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
}
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	f3af 8000 	nop.w

080091a0 <_ZNK10DataFilter21getArrayCoefficientsAEv>:

float* DataFilter::getArrayCoefficientsA() const {
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	return ArrayCoefficientsA;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	f3af 8000 	nop.w
 80091bc:	f3af 8000 	nop.w

080091c0 <_ZN10DataFilter21setArrayCoefficientsAEPf>:

void DataFilter::setArrayCoefficientsA(float* arrayCoefficientsA) {
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	ArrayCoefficientsA = arrayCoefficientsA;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	619a      	str	r2, [r3, #24]
}
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w

080091e0 <_ZN10DataFilter26setArrayInitialConditionsYEPf>:

float* DataFilter::getArrayInitialConditionsY() const {
	return ArrayInitialConditionsY;
}

void DataFilter::setArrayInitialConditionsY(float* arrayInitialConditionsY) {
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28
 80091f0:	e011      	b.n	8009216 <_ZN10DataFilter26setArrayInitialConditionsYEPf+0x36>
		ArrayInputsY[Cont] = arrayInitialConditionsY[Cont];
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69da      	ldr	r2, [r3, #28]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	440a      	add	r2, r1
 8009208:	6812      	ldr	r2, [r2, #0]
 800920a:	601a      	str	r2, [r3, #0]
float* DataFilter::getArrayInitialConditionsY() const {
	return ArrayInitialConditionsY;
}

void DataFilter::setArrayInitialConditionsY(float* arrayInitialConditionsY) {
	for (Cont = 0; Cont < FilterOrder; Cont++) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	629a      	str	r2, [r3, #40]	; 0x28
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	dbe7      	blt.n	80091f2 <_ZN10DataFilter26setArrayInitialConditionsYEPf+0x12>
		ArrayInputsY[Cont] = arrayInitialConditionsY[Cont];
	}
}
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	f3af 8000 	nop.w

08009230 <_ZNK10DataFilter15getArrayInputsYEv>:

float* DataFilter::getArrayInputsY() const {
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	return ArrayInputsY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	69db      	ldr	r3, [r3, #28]
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	f3af 8000 	nop.w
 800924c:	f3af 8000 	nop.w

08009250 <_ZN3IIR11directFormIEf>:

IIR::~IIR() {
	//free the variable
}

float IIR::directFormI(float pData) {
 8009250:	b580      	push	{r7, lr}
 8009252:	b08e      	sub	sp, #56	; 0x38
 8009254:	af02      	add	r7, sp, #8
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]

	//variable that need
	float *_ArrayInputsX = InitialDataFilter->getArrayInputsX();
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ff6e 	bl	8009140 <_ZNK10DataFilter15getArrayInputsXEv>
 8009264:	62f8      	str	r0, [r7, #44]	; 0x2c
	float *_ArrayInputsY = InitialDataFilter->getArrayInputsY();
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff ffe0 	bl	8009230 <_ZNK10DataFilter15getArrayInputsYEv>
 8009270:	62b8      	str	r0, [r7, #40]	; 0x28

	int _FilterOrder = InitialDataFilter->getFilterOrder();
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff ff72 	bl	8009160 <_ZNK10DataFilter14getFilterOrderEv>
 800927c:	6278      	str	r0, [r7, #36]	; 0x24
	int _ContInputData;

	float _ResultX = 0;
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	623b      	str	r3, [r7, #32]
	float *_ArrayCoefficientsB = InitialDataFilter->getArrayCoefficientsB();
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fef9 	bl	8009080 <_ZNK10DataFilter21getArrayCoefficientsBEv>
 800928e:	61f8      	str	r0, [r7, #28]

	float _ResultY = 0;
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	61bb      	str	r3, [r7, #24]
	float *_ArrayCoefficientsA = InitialDataFilter->getArrayCoefficientsA();
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ff80 	bl	80091a0 <_ZNK10DataFilter21getArrayCoefficientsAEv>
 80092a0:	6178      	str	r0, [r7, #20]

	float _Result;

	//if the buffer is full, move the data
	if (ContBuffer == BUFFER_SIZE) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	2b0a      	cmp	r3, #10
 80092a8:	d10e      	bne.n	80092c8 <_ZN3IIR11directFormIEf+0x78>
		InitialDataFilter->moveArray(_ArrayInputsX);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	4618      	mov	r0, r3
 80092b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092b2:	f7ff febd 	bl	8009030 <_ZN10DataFilter9moveArrayEPf>
		InitialDataFilter->moveArray(_ArrayInputsY);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	4618      	mov	r0, r3
 80092bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092be:	f7ff feb7 	bl	8009030 <_ZN10DataFilter9moveArrayEPf>
		ContBuffer = 0;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	60da      	str	r2, [r3, #12]
	}

	_ContInputData = _FilterOrder + ContBuffer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	4413      	add	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]

	//set the inputdata
	_ArrayInputsX[_ContInputData] = pData;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d8:	4413      	add	r3, r2
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	601a      	str	r2, [r3, #0]

	// sum for X
	_ResultX = MathOperation->sum(_FilterOrder, 0, _ArrayCoefficientsB,
			_ArrayInputsX, ContBuffer);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68d2      	ldr	r2, [r2, #12]
 80092e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092e8:	9100      	str	r1, [sp, #0]
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	4618      	mov	r0, r3
 80092ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092f0:	2200      	movs	r2, #0
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f000 f84c 	bl	8009390 <_ZN12FuntionsMath3sumEiiPfS0_i>
 80092f8:	6238      	str	r0, [r7, #32]

	//sum for Y
	_ResultY = MathOperation->sum(_FilterOrder - 1, 0, _ArrayCoefficientsA,
			_ArrayInputsY, ContBuffer);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	3b01      	subs	r3, #1
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	68c9      	ldr	r1, [r1, #12]
 8009306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009308:	9000      	str	r0, [sp, #0]
 800930a:	9101      	str	r1, [sp, #4]
 800930c:	4610      	mov	r0, r2
 800930e:	4619      	mov	r1, r3
 8009310:	2200      	movs	r2, #0
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f000 f83c 	bl	8009390 <_ZN12FuntionsMath3sumEiiPfS0_i>
 8009318:	61b8      	str	r0, [r7, #24]

	// Final reusult
	_Result = _ResultX - _ResultY;
 800931a:	6a38      	ldr	r0, [r7, #32]
 800931c:	69b9      	ldr	r1, [r7, #24]
 800931e:	f7f7 fc23 	bl	8000b68 <__aeabi_fsub>
 8009322:	4603      	mov	r3, r0
 8009324:	60fb      	str	r3, [r7, #12]

	//set the data for history
	_ArrayInputsY[_ContInputData] = _Result;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932c:	4413      	add	r3, r2
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	601a      	str	r2, [r3, #0]

	ContBuffer++;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	60da      	str	r2, [r3, #12]

	return _Result;
 800933c:	68fb      	ldr	r3, [r7, #12]

}
 800933e:	4618      	mov	r0, r3
 8009340:	3730      	adds	r7, #48	; 0x30
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	f3af 8000 	nop.w
 800934c:	f3af 8000 	nop.w

08009350 <_ZN3IIR20setInitialDataFilterEP10DataFilter>:

void IIR::setInitialDataFilter(DataFilter *pInitialDataFilter) {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	// Create class that do the sum
	MathOperation = (FuntionsMath*) chHeapAlloc(NULL, sizeof(FuntionsMath));
 800935a:	2000      	movs	r0, #0
 800935c:	2104      	movs	r1, #4
 800935e:	f7fa fa27 	bl	80037b0 <chHeapAlloc>
 8009362:	4602      	mov	r2, r0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
	InitialDataFilter = pInitialDataFilter;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	609a      	str	r2, [r3, #8]
	ContBuffer = 0;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	60da      	str	r2, [r3, #12]
	InitialDataFilter->createArrayInput();
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fe29 	bl	8008fd0 <_ZN10DataFilter16createArrayInputEv>
}
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	f3af 8000 	nop.w
 8009388:	f3af 8000 	nop.w
 800938c:	f3af 8000 	nop.w

08009390 <_ZN12FuntionsMath3sumEiiPfS0_i>:
FuntionsMath::FuntionsMath() {
	// TODO Auto-generated constructor stub
}

float FuntionsMath::sum(int pUpperLimit, int pLowerLimit, float* pCoefficients,
		float* pArray, int pCont) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]

	float _Result = 0; //save the result
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
	int _PosInitCond = 0; //access to
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
	int _Cont;

	for (_Cont = pLowerLimit; _Cont <= pUpperLimit; _Cont++) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	e01e      	b.n	80093ec <_ZN12FuntionsMath3sumEiiPfS0_i+0x5c>

		_PosInitCond = pCont + pUpperLimit;
 80093ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4413      	add	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
		_Result += pCoefficients[_Cont] * pArray[_PosInitCond];
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4413      	add	r3, r2
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093c6:	440b      	add	r3, r1
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	f7f7 fcd7 	bl	8000d80 <__aeabi_fmul>
 80093d2:	4603      	mov	r3, r0
 80093d4:	69f8      	ldr	r0, [r7, #28]
 80093d6:	4619      	mov	r1, r3
 80093d8:	f7f7 fbc8 	bl	8000b6c <__addsf3>
 80093dc:	4603      	mov	r3, r0
 80093de:	61fb      	str	r3, [r7, #28]

		pCont--;
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	3b01      	subs	r3, #1
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	float _Result = 0; //save the result
	int _PosInitCond = 0; //access to
	int _Cont;

	for (_Cont = pLowerLimit; _Cont <= pUpperLimit; _Cont++) {
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	3301      	adds	r3, #1
 80093ea:	61bb      	str	r3, [r7, #24]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	dddc      	ble.n	80093ae <_ZN12FuntionsMath3sumEiiPfS0_i+0x1e>
		_PosInitCond = pCont + pUpperLimit;
		_Result += pCoefficients[_Cont] * pArray[_PosInitCond];

		pCont--;
	}
	return _Result;
 80093f4:	69fb      	ldr	r3, [r7, #28]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	656c6469 	.word	0x656c6469
	...
 8009410:	31235653 	.word	0x31235653
 8009414:	00000000 	.word	0x00000000
 8009418:	32235653 	.word	0x32235653
 800941c:	00000000 	.word	0x00000000
 8009420:	33235653 	.word	0x33235653
 8009424:	00000000 	.word	0x00000000
 8009428:	34235653 	.word	0x34235653
 800942c:	00000000 	.word	0x00000000
 8009430:	35235653 	.word	0x35235653
 8009434:	00000000 	.word	0x00000000
 8009438:	36235653 	.word	0x36235653
 800943c:	00000000 	.word	0x00000000
 8009440:	37235653 	.word	0x37235653
 8009444:	00000000 	.word	0x00000000
 8009448:	38235653 	.word	0x38235653
 800944c:	00000000 	.word	0x00000000
 8009450:	39235653 	.word	0x39235653
 8009454:	00000000 	.word	0x00000000
 8009458:	31235653 	.word	0x31235653
 800945c:	00000030 	.word	0x00000030
 8009460:	31235653 	.word	0x31235653
 8009464:	00000031 	.word	0x00000031
	...
 8009470:	63617473 	.word	0x63617473
 8009474:	766f206b 	.word	0x766f206b
 8009478:	6c667265 	.word	0x6c667265
 800947c:	0000776f 	.word	0x0000776f
 8009480:	6c756e28 	.word	0x6c756e28
 8009484:	0000296c 	.word	0x0000296c
	...
 8009490:	2043414d 	.word	0x2043414d
 8009494:	6c696166 	.word	0x6c696166
 8009498:	00657275 	.word	0x00657275
 800949c:	00000000 	.word	0x00000000
 80094a0:	746c6946 	.word	0x746c6946
 80094a4:	00006f72 	.word	0x00006f72
 80094a8:	65520a0d 	.word	0x65520a0d
 80094ac:	746c7573 	.word	0x746c7573
 80094b0:	3a6f6461 	.word	0x3a6f6461
 80094b4:	00000000 	.word	0x00000000
 80094b8:	00206625 	.word	0x00206625
 80094bc:	00000000 	.word	0x00000000
 80094c0:	3f20beb6 	.word	0x3f20beb6
 80094c4:	3fa06d1e 	.word	0x3fa06d1e
 80094c8:	3fefd902 	.word	0x3fefd902
 80094cc:	401f295f 	.word	0x401f295f
 80094d0:	4045c558 	.word	0x4045c558
 80094d4:	406b999a 	.word	0x406b999a
 80094d8:	40883fd1 	.word	0x40883fd1
 80094dc:	409a294a 	.word	0x409a294a
 80094e0:	68206553 	.word	0x68206553
 80094e4:	72702061 	.word	0x72702061
 80094e8:	6f697365 	.word	0x6f697365
 80094ec:	6f64616e 	.word	0x6f64616e
 80094f0:	31575320 	.word	0x31575320
 80094f4:	000a0d20 	.word	0x000a0d20
 80094f8:	bcabeb76 	.word	0xbcabeb76
 80094fc:	3ca6a65d 	.word	0x3ca6a65d
 8009500:	3ca6a65d 	.word	0x3ca6a65d
 8009504:	bcabeb76 	.word	0xbcabeb76
 8009508:	c046f91e 	.word	0xc046f91e
 800950c:	404f12be 	.word	0x404f12be
 8009510:	bf905d6c 	.word	0xbf905d6c
	...

08009520 <__func__.5928>:
 8009520:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....

08009530 <__func__.6545>:
 8009530:	54566863 65536f44 00004974 00000000     chVTDoSetI......

08009540 <__func__.6553>:
 8009540:	54566863 65526f44 49746573 00000000     chVTDoResetI....

08009550 <__func__.6542>:
 8009550:	63536863 61655268 00497964 00000000     chSchReadyI.....

08009560 <__func__.6554>:
 8009560:	68546863 65724364 49657461 00000000     chThdCreateI....

08009570 <__func__.5842>:
 8009570:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009580 <__func__.6013>:
 8009580:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08009590 <__func__.6598>:
 8009590:	68546863 69784564 00005374 00000000     chThdExitS......

080095a0 <__func__.6608>:
 80095a0:	68546863 73755364 646e6570 00000053     chThdSuspendS...

080095b0 <__func__.6620>:
 80095b0:	68546863 73655264 49656d75 00000000     chThdResumeI....

080095c0 <__func__.6025>:
 80095c0:	68546863 446f4464 65757165 654e6575     chThdDoDequeueNe
 80095d0:	00497478 00000000 00000000 00000000     xtI.............

080095e0 <ch_debug>:
 80095e0:	6e69616d 18021600 08680404 1814100c     main......h.....
 80095f0:	2221201c 00000000 00000000 00000000     . !"............

08009600 <__func__.6537>:
 8009600:	744d6863 6a624f78 49746365 0074696e     chMtxObjectInit.

08009610 <__func__.5842>:
 8009610:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009620 <__func__.6545>:
 8009620:	744d6863 636f4c78 0000536b 00000000     chMtxLockS......

08009630 <__func__.6568>:
 8009630:	744d6863 6c6e5578 006b636f 00000000     chMtxUnlock.....

08009640 <__func__.6562>:
 8009640:	76456863 6f724274 61636461 6c467473     chEvtBroadcastFl
 8009650:	49736761 00000000 00000000 00000000     agsI............

08009660 <__func__.6579>:
 8009660:	76456863 67695374 496c616e 00000000     chEvtSignalI....

08009670 <__func__.5842>:
 8009670:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009680 <__func__.6565>:
 8009680:	51496863 64616552 656d6954 0074756f     chIQReadTimeout.

08009690 <__func__.6601>:
 8009690:	514f6863 74697257 6d695465 74756f65     chOQWriteTimeout
	...

080096b0 <__func__.5842>:
 80096b0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080096c0 <__func__.7912>:
 80096c0:	636d6d5f 675f6473 735f7465 6563696c     _mmcsd_get_slice
	...

080096e0 <__func__.7919>:
 80096e0:	636d6d5f 675f6473 635f7465 63617061     _mmcsd_get_capac
 80096f0:	00797469 00000000 00000000 00000000     ity.............

08009700 <__func__.7927>:
 8009700:	636d6d5f 675f6473 635f7465 63617061     _mmcsd_get_capac
 8009710:	5f797469 00747865 00000000 00000000     ity_ext.........

08009720 <sdc_vmt>:
 8009720:	08008c81 08008ce1 08004441 08004631     ........AD..1F..
 8009730:	080046b1 08004731 080047b1 08004801     .F..1G...G...H..

08009740 <__func__.8305>:
 8009740:	5f636d6d 36646d63 6e6f635f 75727473     mmc_cmd6_constru
 8009750:	00007463 00000000 00000000 00000000     ct..............

08009760 <__func__.8312>:
 8009760:	5f636473 36646d63 6e6f635f 75727473     sdc_cmd6_constru
 8009770:	00007463 00000000 00000000 00000000     ct..............

08009780 <__func__.8356>:
 8009780:	5f636d6d 5f746573 5f737562 74646977     mmc_set_bus_widt
 8009790:	00000068 00000000 00000000 00000000     h...............

080097a0 <__func__.6186>:
 80097a0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080097b0 <__func__.8388>:
 80097b0:	43636473 656e6e6f 00007463 00000000     sdcConnect......

080097c0 <__func__.8399>:
 80097c0:	44636473 6f637369 63656e6e 00000074     sdcDisconnect...

080097d0 <__func__.8407>:
 80097d0:	52636473 00646165 00000000 00000000     sdcRead.........

080097e0 <__func__.8415>:
 80097e0:	57636473 65746972 00000000 00000000     sdcWrite........

080097f0 <__func__.8425>:
 80097f0:	53636473 00636e79 00000000 00000000     sdcSync.........

08009800 <__func__.8430>:
 8009800:	47636473 6e497465 00006f66 00000000     sdcGetInfo......

08009810 <vmt>:
 8009810:	080049a1 080049d1 08004a01 08004a31     .I...I...J..1J..
 8009820:	08004a51 08004a81 08004aa1 08004ad1     QJ...J...J...J..

08009830 <__func__.7954>:
 8009830:	74536473 00747261 00000000 00000000     sdStart.........

08009840 <__func__.5842>:
 8009840:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009850 <__func__.7963>:
 8009850:	6e496473 696d6f63 6144676e 00496174     sdIncomingDataI.

08009860 <__func__.7909>:
 8009860:	74537473 41747261 6d72616c 00000000     stStartAlarm....

08009870 <__func__.7916>:
 8009870:	65537473 616c4174 00006d72 00000000     stSetAlarm......

08009880 <zero_status>:
	...

08009890 <active_status>:
	...

080098a0 <halted_status>:
 80098a0:	00000001 00000000 00000000 00000000     ................

080098b0 <__func__.8356>:
 80098b0:	53627375 74726174 65636552 49657669     usbStartReceiveI
	...

080098d0 <__func__.8361>:
 80098d0:	53627375 74726174 6e617254 74696d73     usbStartTransmit
 80098e0:	00000049 00000000 00000000 00000000     I...............

080098f0 <__func__.8395>:
 80098f0:	6273755f 3070655f 00006e69 00000000     _usb_ep0in......

08009900 <__func__.8409>:
 8009900:	6273755f 3070655f 0074756f 00000000     _usb_ep0out.....

08009910 <pow10>:
 8009910:	0000000a 00000064 000003e8 00002710     ....d........'..
 8009920:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8009930:	3b9aca00 00000000 00000000 00000000     ...;............

08009940 <_stm32_dma_streams>:
 8009940:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8009950:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8009960:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8009970:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8009980:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8009990:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 80099a0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80099b0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80099c0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 80099d0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80099e0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80099f0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08009a00 <__func__.8258>:
 8009a00:	5f636473 5f646c6c 70657270 5f657261     sdc_lld_prepare_
 8009a10:	64616572 7479625f 00007365 00000000     read_bytes......

08009a20 <__func__.6186>:
 8009a20:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009a30 <__func__.8380>:
 8009a30:	5f636473 5f646c6c 64616572 696c615f     sdc_lld_read_ali
 8009a40:	64656e67 00000000 00000000 00000000     gned............

08009a50 <__func__.8389>:
 8009a50:	5f636473 5f646c6c 74697277 6c615f65     sdc_lld_write_al
 8009a60:	656e6769 00000064 00000000 00000000     igned...........

08009a70 <ep0config>:
 8009a70:	00000000 08005501 08005681 080057a1     .....U...V...W..
 8009a80:	00400040 20003938 20003938 00000001     @.@.89. 89. ....
 8009a90:	2000394c 00000000 00000000 00000000     L9. ............

08009aa0 <fsparams>:
 8009aa0:	00000080 00000140 00000003 00000000     ....@...........

08009ab0 <hsparams>:
 8009ab0:	00000100 00000400 00000005 00000000     ................

08009ac0 <__func__.8304>:
 8009ac0:	5f67746f 5f6d6172 6f6c6c61 00000063     otg_ram_alloc...

08009ad0 <default_config>:
 8009ad0:	0001c200 40000000 00000000 00000000     .......@........

08009ae0 <pal_default_config>:
 8009ae0:	aaa88028 00000000 ffffffff 20011500     (.............. 
 8009af0:	0000ffff b0000bb0 000aa770 aaa40280     ........p.......
 8009b00:	00000000 ffffffff 00015405 0000ffff     .........T......
 8009b10:	00000000 ccbb7700 02aaaa08 00000000     .....w..........
 8009b20:	ffffffff 04000051 0000ffff 88bb00b0     ....Q...........
 8009b30:	000ccccc 00000020 00000000 ffffffff     .... ...........
 8009b40:	55555545 0000ffff 00000c00 00000000     EUUU............
	...
 8009b58:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
	...
 8009b74:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
 8009b84:	00000000 00810554 00000000 ffffffff     ....T...........
 8009b94:	15045554 0000ffc3 00000000 0000b000     TU..............
	...
 8009bac:	ffffffff 55555550 0000ffff 00000000     ....PUUU........
	...
 8009bc8:	ffffffff 55555555 0000ffff 00000000     ....UUUU........
 8009bd8:	00000000                                ....
